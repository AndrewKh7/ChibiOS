
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
                .align  2
                .thumb_func
                .global Reset_Handler
Reset_Handler:
                /* Interrupts are globally masked initially.*/
                cpsid   i
  200200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
  200202:	4827      	ldr	r0, [pc, #156]	; (2002a0 <endfiniloop+0x4>)
                msr     MSP, r0
  200204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
  200208:	4826      	ldr	r0, [pc, #152]	; (2002a4 <endfiniloop+0x8>)
                msr     PSP, r0
  20020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
  20020e:	4826      	ldr	r0, [pc, #152]	; (2002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
  200210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
  200214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
  200218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
  20021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
  20021c:	f380 8814 	msr	CONTROL, r0
                isb
  200220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
  200224:	f000 f8cc 	bl	2003c0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
  200228:	f004 faaa 	bl	204780 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
  20022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
  200230:	491e      	ldr	r1, [pc, #120]	; (2002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
  200232:	4a1b      	ldr	r2, [pc, #108]	; (2002a0 <endfiniloop+0x4>)

00200234 <msloop>:
msloop:
                cmp     r1, r2
  200234:	4291      	cmp	r1, r2
                itt     lo
  200236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
  20023c:	e7fa      	bcc.n	200234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
  20023e:	491c      	ldr	r1, [pc, #112]	; (2002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
  200240:	4a18      	ldr	r2, [pc, #96]	; (2002a4 <endfiniloop+0x8>)

00200242 <psloop>:
psloop:
                cmp     r1, r2
  200242:	4291      	cmp	r1, r2
                itt     lo
  200244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
  20024a:	e7fa      	bcc.n	200242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
  20024c:	4919      	ldr	r1, [pc, #100]	; (2002b4 <endfiniloop+0x18>)
                ldr     r2, =_data_start
  20024e:	4a1a      	ldr	r2, [pc, #104]	; (2002b8 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
  200250:	4b1a      	ldr	r3, [pc, #104]	; (2002bc <endfiniloop+0x20>)

00200252 <dloop>:
dloop:
                cmp     r2, r3
  200252:	429a      	cmp	r2, r3
                ittt    lo
  200254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
  200256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
  20025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
  20025e:	e7f8      	bcc.n	200252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
  200260:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
  200262:	4917      	ldr	r1, [pc, #92]	; (2002c0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
  200264:	4a17      	ldr	r2, [pc, #92]	; (2002c4 <endfiniloop+0x28>)

00200266 <bloop>:
bloop:
                cmp     r1, r2
  200266:	4291      	cmp	r1, r2
                itt     lo
  200268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  20026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
  20026e:	e7fa      	bcc.n	200266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
  200270:	f000 f8be 	bl	2003f0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
  200274:	f000 f8ac 	bl	2003d0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
  200278:	4c13      	ldr	r4, [pc, #76]	; (2002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
  20027a:	4d14      	ldr	r5, [pc, #80]	; (2002cc <endfiniloop+0x30>)

0020027c <initloop>:
initloop:
                cmp     r4, r5
  20027c:	42ac      	cmp	r4, r5
                bge     endinitloop
  20027e:	da03      	bge.n	200288 <endinitloop>
                ldr     r1, [r4], #4
  200280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200284:	4788      	blx	r1
                b       initloop
  200286:	e7f9      	b.n	20027c <initloop>

00200288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
  200288:	f004 fad2 	bl	204830 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
  20028c:	4c10      	ldr	r4, [pc, #64]	; (2002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
  20028e:	4d11      	ldr	r5, [pc, #68]	; (2002d4 <endfiniloop+0x38>)

00200290 <finiloop>:
finiloop:
                cmp     r4, r5
  200290:	42ac      	cmp	r4, r5
                bge     endfiniloop
  200292:	da03      	bge.n	20029c <endfiniloop>
                ldr     r1, [r4], #4
  200294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200298:	4788      	blx	r1
                b       finiloop
  20029a:	e7f9      	b.n	200290 <finiloop>

0020029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
  20029c:	f000 b8a0 	b.w	2003e0 <__default_exit>
                ldr     r0, =__main_stack_end__
  2002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
  2002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
  2002a8:	00200000 	.word	0x00200000
                ldr     r1, =__main_stack_base__
  2002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
  2002b0:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
  2002b4:	08004ee4 	.word	0x08004ee4
                ldr     r2, =_data_start
  2002b8:	20010000 	.word	0x20010000
                ldr     r3, =_data_end
  2002bc:	20010060 	.word	0x20010060
                ldr     r1, =_bss_start
  2002c0:	20000800 	.word	0x20000800
                ldr     r2, =_bss_end
  2002c4:	2000125c 	.word	0x2000125c
                ldr     r4, =__init_array_start
  2002c8:	00200200 	.word	0x00200200
                ldr     r5, =__init_array_end
  2002cc:	00200200 	.word	0x00200200
                ldr     r4, =__fini_array_start
  2002d0:	00200200 	.word	0x00200200
                ldr     r5, =__fini_array_end
  2002d4:	00200200 	.word	0x00200200

002002d8 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
  2002d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
  2002dc:	f8c1 d00c 	str.w	sp, [r1, #12]
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
                mov     sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
  2002e0:	f8d0 d00c 	ldr.w	sp, [r0, #12]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  2002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e8 <_port_thread_start>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_thread_start
_port_thread_start:
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
  2002e8:	f000 fae2 	bl	2008b0 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
  2002ec:	2300      	movs	r3, #0
                msr     BASEPRI, r3
  2002ee:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
  2002f2:	4628      	mov	r0, r5
                blx     r4
  2002f4:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
  2002f6:	2000      	movs	r0, #0
                bl      chThdExit
  2002f8:	f001 fb62 	bl	2019c0 <chThdExit>

002002fc <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
  2002fc:	f000 fac0 	bl	200880 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
  200300:	f001 f8ee 	bl	2014e0 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
  200304:	f000 fad4 	bl	2008b0 <_dbg_check_unlock>

00200308 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
  200308:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
  20030a:	e7fe      	b.n	20030a <_port_exit_from_isr+0x2>
  20030c:	0000      	movs	r0, r0
	...

00200310 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  200310:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  200314:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  200318:	4b07      	ldr	r3, [pc, #28]	; (200338 <SCB_EnableICache+0x28>)
  20031a:	2200      	movs	r2, #0
  20031c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  200320:	4b05      	ldr	r3, [pc, #20]	; (200338 <SCB_EnableICache+0x28>)
  200322:	695b      	ldr	r3, [r3, #20]
  200324:	4a04      	ldr	r2, [pc, #16]	; (200338 <SCB_EnableICache+0x28>)
  200326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20032a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  20032c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  200330:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  200334:	4770      	bx	lr
  200336:	bf00      	nop
  200338:	e000ed00 	.word	0xe000ed00
  20033c:	00000000 	.word	0x00000000

00200340 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
  200340:	b084      	sub	sp, #16
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  200342:	4b1b      	ldr	r3, [pc, #108]	; (2003b0 <SCB_EnableDCache+0x70>)
  200344:	2200      	movs	r2, #0
  200346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  20034a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  20034e:	4b18      	ldr	r3, [pc, #96]	; (2003b0 <SCB_EnableDCache+0x70>)
  200350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  200354:	9301      	str	r3, [sp, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  200356:	9b01      	ldr	r3, [sp, #4]
  200358:	0b5b      	lsrs	r3, r3, #13
  20035a:	f3c3 030e 	ubfx	r3, r3, #0, #15
  20035e:	9303      	str	r3, [sp, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  200360:	9b01      	ldr	r3, [sp, #4]
  200362:	08db      	lsrs	r3, r3, #3
  200364:	f3c3 0309 	ubfx	r3, r3, #0, #10
  200368:	9302      	str	r3, [sp, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  20036a:	9b03      	ldr	r3, [sp, #12]
  20036c:	015a      	lsls	r2, r3, #5
  20036e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
  200372:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
  200374:	9a02      	ldr	r2, [sp, #8]
  200376:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  200378:	490d      	ldr	r1, [pc, #52]	; (2003b0 <SCB_EnableDCache+0x70>)
  20037a:	4313      	orrs	r3, r2
  20037c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  200380:	9b02      	ldr	r3, [sp, #8]
  200382:	1e5a      	subs	r2, r3, #1
  200384:	9202      	str	r2, [sp, #8]
  200386:	2b00      	cmp	r3, #0
  200388:	d1ef      	bne.n	20036a <SCB_EnableDCache+0x2a>
    } while(sets--);
  20038a:	9b03      	ldr	r3, [sp, #12]
  20038c:	1e5a      	subs	r2, r3, #1
  20038e:	9203      	str	r2, [sp, #12]
  200390:	2b00      	cmp	r3, #0
  200392:	d1e5      	bne.n	200360 <SCB_EnableDCache+0x20>
  200394:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  200398:	4b05      	ldr	r3, [pc, #20]	; (2003b0 <SCB_EnableDCache+0x70>)
  20039a:	695b      	ldr	r3, [r3, #20]
  20039c:	4a04      	ldr	r2, [pc, #16]	; (2003b0 <SCB_EnableDCache+0x70>)
  20039e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2003a2:	6153      	str	r3, [r2, #20]
  2003a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2003a8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  2003ac:	b004      	add	sp, #16
  2003ae:	4770      	bx	lr
  2003b0:	e000ed00 	.word	0xe000ed00
	...

002003c0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
  2003c0:	b508      	push	{r3, lr}

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  2003c2:	f7ff ffa5 	bl	200310 <SCB_EnableICache>
  SCB_EnableDCache();
  2003c6:	f7ff ffbb 	bl	200340 <SCB_EnableDCache>
#endif
}
  2003ca:	bd08      	pop	{r3, pc}
  2003cc:	0000      	movs	r0, r0
	...

002003d0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
  2003d0:	4770      	bx	lr
  2003d2:	bf00      	nop
	...

002003e0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
  2003e0:	e7fe      	b.n	2003e0 <__default_exit>
  2003e2:	bf00      	nop
	...

002003f0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  2003f0:	b084      	sub	sp, #16
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  2003f2:	4b16      	ldr	r3, [pc, #88]	; (20044c <__init_ram_areas+0x5c>)
  2003f4:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
  2003f6:	9b03      	ldr	r3, [sp, #12]
  2003f8:	681b      	ldr	r3, [r3, #0]
  2003fa:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
  2003fc:	9b03      	ldr	r3, [sp, #12]
  2003fe:	685b      	ldr	r3, [r3, #4]
  200400:	9301      	str	r3, [sp, #4]
  200402:	e009      	b.n	200418 <__init_ram_areas+0x28>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
  200404:	9b02      	ldr	r3, [sp, #8]
  200406:	681a      	ldr	r2, [r3, #0]
  200408:	9b01      	ldr	r3, [sp, #4]
  20040a:	601a      	str	r2, [r3, #0]
      p++;
  20040c:	9b01      	ldr	r3, [sp, #4]
  20040e:	3304      	adds	r3, #4
  200410:	9301      	str	r3, [sp, #4]
      tp++;
  200412:	9b02      	ldr	r3, [sp, #8]
  200414:	3304      	adds	r3, #4
  200416:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
  200418:	9b03      	ldr	r3, [sp, #12]
  20041a:	689b      	ldr	r3, [r3, #8]
  20041c:	9a01      	ldr	r2, [sp, #4]
  20041e:	429a      	cmp	r2, r3
  200420:	d3f0      	bcc.n	200404 <__init_ram_areas+0x14>
  200422:	e005      	b.n	200430 <__init_ram_areas+0x40>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  200424:	9b01      	ldr	r3, [sp, #4]
  200426:	2200      	movs	r2, #0
  200428:	601a      	str	r2, [r3, #0]
      p++;
  20042a:	9b01      	ldr	r3, [sp, #4]
  20042c:	3304      	adds	r3, #4
  20042e:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
  200430:	9b03      	ldr	r3, [sp, #12]
  200432:	68db      	ldr	r3, [r3, #12]
  200434:	9a01      	ldr	r2, [sp, #4]
  200436:	429a      	cmp	r2, r3
  200438:	d3f4      	bcc.n	200424 <__init_ram_areas+0x34>
    }
    rap++;
  20043a:	9b03      	ldr	r3, [sp, #12]
  20043c:	3310      	adds	r3, #16
  20043e:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  200440:	9b03      	ldr	r3, [sp, #12]
  200442:	4a03      	ldr	r2, [pc, #12]	; (200450 <__init_ram_areas+0x60>)
  200444:	4293      	cmp	r3, r2
  200446:	d3d6      	bcc.n	2003f6 <__init_ram_areas+0x6>
#endif
}
  200448:	b004      	add	sp, #16
  20044a:	4770      	bx	lr
  20044c:	08004940 	.word	0x08004940
  200450:	080049c0 	.word	0x080049c0
	...

00200460 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  200460:	e7fe      	b.n	200460 <BusFault_Handler>
  200462:	bf00      	nop
	...

00200470 <NVIC_SetPriorityGrouping>:
{
  200470:	b084      	sub	sp, #16
  200472:	9001      	str	r0, [sp, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
  200474:	9b01      	ldr	r3, [sp, #4]
  200476:	f003 0307 	and.w	r3, r3, #7
  20047a:	9303      	str	r3, [sp, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  20047c:	4b09      	ldr	r3, [pc, #36]	; (2004a4 <NVIC_SetPriorityGrouping+0x34>)
  20047e:	68db      	ldr	r3, [r3, #12]
  200480:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200482:	9a02      	ldr	r2, [sp, #8]
  200484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
  200488:	4013      	ands	r3, r2
  20048a:	9302      	str	r3, [sp, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  20048c:	9b03      	ldr	r3, [sp, #12]
  20048e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
  200490:	9b02      	ldr	r3, [sp, #8]
  200492:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
  200494:	4b04      	ldr	r3, [pc, #16]	; (2004a8 <NVIC_SetPriorityGrouping+0x38>)
  200496:	4313      	orrs	r3, r2
  200498:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
  20049a:	4a02      	ldr	r2, [pc, #8]	; (2004a4 <NVIC_SetPriorityGrouping+0x34>)
  20049c:	9b02      	ldr	r3, [sp, #8]
  20049e:	60d3      	str	r3, [r2, #12]
}
  2004a0:	b004      	add	sp, #16
  2004a2:	4770      	bx	lr
  2004a4:	e000ed00 	.word	0xe000ed00
  2004a8:	05fa0000 	.word	0x05fa0000
  2004ac:	00000000 	.word	0x00000000

002004b0 <NVIC_SetPriority>:
{
  2004b0:	b082      	sub	sp, #8
  2004b2:	4603      	mov	r3, r0
  2004b4:	9100      	str	r1, [sp, #0]
  2004b6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
  2004ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
  2004be:	2b00      	cmp	r3, #0
  2004c0:	da0c      	bge.n	2004dc <NVIC_SetPriority+0x2c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  2004c2:	9b00      	ldr	r3, [sp, #0]
  2004c4:	b2da      	uxtb	r2, r3
  2004c6:	490b      	ldr	r1, [pc, #44]	; (2004f4 <NVIC_SetPriority+0x44>)
  2004c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  2004cc:	f003 030f 	and.w	r3, r3, #15
  2004d0:	3b04      	subs	r3, #4
  2004d2:	0112      	lsls	r2, r2, #4
  2004d4:	b2d2      	uxtb	r2, r2
  2004d6:	440b      	add	r3, r1
  2004d8:	761a      	strb	r2, [r3, #24]
  2004da:	e009      	b.n	2004f0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  2004dc:	9b00      	ldr	r3, [sp, #0]
  2004de:	b2da      	uxtb	r2, r3
  2004e0:	4905      	ldr	r1, [pc, #20]	; (2004f8 <NVIC_SetPriority+0x48>)
  2004e2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
  2004e6:	0112      	lsls	r2, r2, #4
  2004e8:	b2d2      	uxtb	r2, r2
  2004ea:	440b      	add	r3, r1
  2004ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  2004f0:	b002      	add	sp, #8
  2004f2:	4770      	bx	lr
  2004f4:	e000ed00 	.word	0xe000ed00
  2004f8:	e000e100 	.word	0xe000e100
  2004fc:	00000000 	.word	0x00000000

00200500 <port_init>:
/*===========================================================================*/

/**
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {
  200500:	b508      	push	{r3, lr}

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
  200502:	2003      	movs	r0, #3
  200504:	f7ff ffb4 	bl	200470 <NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200508:	4b0d      	ldr	r3, [pc, #52]	; (200540 <port_init+0x40>)
  20050a:	68db      	ldr	r3, [r3, #12]
  20050c:	4a0c      	ldr	r2, [pc, #48]	; (200540 <port_init+0x40>)
  20050e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  200512:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
  200514:	4b0b      	ldr	r3, [pc, #44]	; (200544 <port_init+0x44>)
  200516:	4a0c      	ldr	r2, [pc, #48]	; (200548 <port_init+0x48>)
  200518:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  20051c:	4b09      	ldr	r3, [pc, #36]	; (200544 <port_init+0x44>)
  20051e:	681b      	ldr	r3, [r3, #0]
  200520:	4a08      	ldr	r2, [pc, #32]	; (200544 <port_init+0x44>)
  200522:	f043 0301 	orr.w	r3, r3, #1
  200526:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
  200528:	2101      	movs	r1, #1
  20052a:	f06f 0004 	mvn.w	r0, #4
  20052e:	f7ff ffbf 	bl	2004b0 <NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
  200532:	2102      	movs	r1, #2
  200534:	f06f 0001 	mvn.w	r0, #1
  200538:	f7ff ffba 	bl	2004b0 <NVIC_SetPriority>

    /* MPU is enabled.*/
    mpuEnable(MPU_CTRL_PRIVDEFENA);
  }
#endif
}
  20053c:	bd08      	pop	{r3, pc}
  20053e:	bf00      	nop
  200540:	e000edf0 	.word	0xe000edf0
  200544:	e0001000 	.word	0xe0001000
  200548:	c5acce55 	.word	0xc5acce55
  20054c:	00000000 	.word	0x00000000

00200550 <port_lock.lto_priv.54>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
  200550:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  200552:	b672      	cpsid	i
  200554:	2320      	movs	r3, #32
  200556:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200558:	9b01      	ldr	r3, [sp, #4]
  20055a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  20055e:	b662      	cpsie	i
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
  200560:	b002      	add	sp, #8
  200562:	4770      	bx	lr
	...

00200570 <port_unlock.lto_priv.30>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
  200570:	b082      	sub	sp, #8
  200572:	2300      	movs	r3, #0
  200574:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200576:	9b01      	ldr	r3, [sp, #4]
  200578:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
  20057c:	b002      	add	sp, #8
  20057e:	4770      	bx	lr

00200580 <port_lock_from_isr.lto_priv.23>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
  200580:	b508      	push	{r3, lr}

  port_lock();
  200582:	f7ff ffe5 	bl	200550 <port_lock.lto_priv.54>
}
  200586:	bd08      	pop	{r3, pc}
	...

00200590 <port_unlock_from_isr.lto_priv.16>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
  200590:	b508      	push	{r3, lr}

  port_unlock();
  200592:	f7ff ffed 	bl	200570 <port_unlock.lto_priv.30>
}
  200596:	bd08      	pop	{r3, pc}
	...

002005a0 <port_disable>:
  __ASM volatile ("cpsid i" : : : "memory");
  2005a0:	b672      	cpsid	i
 *          the priority mask to level 0.
 */
static inline void port_disable(void) {

  __disable_irq();
}
  2005a2:	4770      	bx	lr
	...

002005b0 <port_enable>:

/**
 * @brief   Enables all the interrupt sources.
 * @note    In this port it lowers the base priority to user level.
 */
static inline void port_enable(void) {
  2005b0:	b082      	sub	sp, #8
  2005b2:	2300      	movs	r3, #0
  2005b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2005b6:	9b01      	ldr	r3, [sp, #4]
  2005b8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  2005bc:	b662      	cpsie	i

#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#endif
  __enable_irq();
}
  2005be:	b002      	add	sp, #8
  2005c0:	4770      	bx	lr
  2005c2:	bf00      	nop
	...

002005d0 <port_wait_for_interrupt>:
static inline void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
  2005d0:	4770      	bx	lr
  2005d2:	bf00      	nop
	...

002005e0 <st_lld_get_counter.lto_priv.185>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
  2005e0:	4b01      	ldr	r3, [pc, #4]	; (2005e8 <st_lld_get_counter.lto_priv.185+0x8>)
  2005e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  2005e4:	4618      	mov	r0, r3
  2005e6:	4770      	bx	lr
  2005e8:	40000c00 	.word	0x40000c00
  2005ec:	00000000 	.word	0x00000000

002005f0 <port_timer_stop_alarm.lto_priv.253>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
  2005f0:	b508      	push	{r3, lr}

  stStopAlarm();
  2005f2:	f002 f8dd 	bl	2027b0 <stStopAlarm>
}
  2005f6:	bd08      	pop	{r3, pc}
	...

00200600 <port_timer_set_alarm.lto_priv.251>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
  200600:	b500      	push	{lr}
  200602:	b083      	sub	sp, #12
  200604:	9001      	str	r0, [sp, #4]

  stSetAlarm(time);
  200606:	9801      	ldr	r0, [sp, #4]
  200608:	f002 f8da 	bl	2027c0 <stSetAlarm>
}
  20060c:	b003      	add	sp, #12
  20060e:	f85d fb04 	ldr.w	pc, [sp], #4
  200612:	bf00      	nop
	...

00200620 <port_timer_get_time.lto_priv.180>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
  200620:	b508      	push	{r3, lr}

  return stGetCounter();
  200622:	f7ff ffdd 	bl	2005e0 <st_lld_get_counter.lto_priv.185>
  200626:	4603      	mov	r3, r0
}
  200628:	4618      	mov	r0, r3
  20062a:	bd08      	pop	{r3, pc}
  20062c:	0000      	movs	r0, r0
	...

00200630 <chSysEnable>:
 * @note    This API is no replacement for @p chSysUnlock(), the
 *          @p chSysUnlock() could do more than just enable the interrupts.
 *
 * @special
 */
static inline void chSysEnable(void) {
  200630:	b508      	push	{r3, lr}

  _dbg_check_enable();
  200632:	f000 f90d 	bl	200850 <_dbg_check_enable>
  port_enable();
  200636:	f7ff ffbb 	bl	2005b0 <port_enable>
}
  20063a:	bd08      	pop	{r3, pc}
  20063c:	0000      	movs	r0, r0
	...

00200640 <chSysLockFromISR.lto_priv.12>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
  200640:	b508      	push	{r3, lr}

  port_lock_from_isr();
  200642:	f7ff ff9d 	bl	200580 <port_lock_from_isr.lto_priv.23>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
  200646:	f000 f94b 	bl	2008e0 <_dbg_check_lock_from_isr>
}
  20064a:	bd08      	pop	{r3, pc}
  20064c:	0000      	movs	r0, r0
	...

00200650 <chSysUnlockFromISR.lto_priv.8>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
  200650:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  200652:	f000 f95d 	bl	200910 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
  200656:	f7ff ff9b 	bl	200590 <port_unlock_from_isr.lto_priv.16>
}
  20065a:	bd08      	pop	{r3, pc}
  20065c:	0000      	movs	r0, r0
	...

00200660 <chVTGetSystemTimeX.lto_priv.167>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
  200660:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
  200662:	f7ff ffdd 	bl	200620 <port_timer_get_time.lto_priv.180>
  200666:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  200668:	4618      	mov	r0, r3
  20066a:	bd08      	pop	{r3, pc}
  20066c:	0000      	movs	r0, r0
	...

00200670 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
  200670:	b500      	push	{lr}
  200672:	b085      	sub	sp, #20

  chDbgCheckClassI();
  200674:	f000 f9a4 	bl	2009c0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
  200678:	4b32      	ldr	r3, [pc, #200]	; (200744 <chVTDoTickI+0xd4>)
  20067a:	69db      	ldr	r3, [r3, #28]
  20067c:	9303      	str	r3, [sp, #12]
  now = chVTGetSystemTimeX();
  20067e:	f7ff ffef 	bl	200660 <chVTGetSystemTimeX.lto_priv.167>
  200682:	9002      	str	r0, [sp, #8]
  200684:	e02a      	b.n	2006dc <chVTDoTickI+0x6c>
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
  200686:	4b2f      	ldr	r3, [pc, #188]	; (200744 <chVTDoTickI+0xd4>)
  200688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  20068a:	9b03      	ldr	r3, [sp, #12]
  20068c:	689b      	ldr	r3, [r3, #8]
  20068e:	4413      	add	r3, r2
  200690:	4a2c      	ldr	r2, [pc, #176]	; (200744 <chVTDoTickI+0xd4>)
  200692:	6293      	str	r3, [r2, #40]	; 0x28

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200694:	9b03      	ldr	r3, [sp, #12]
  200696:	681b      	ldr	r3, [r3, #0]
  200698:	4a2b      	ldr	r2, [pc, #172]	; (200748 <chVTDoTickI+0xd8>)
  20069a:	605a      	str	r2, [r3, #4]
    ch.vtlist.next = vtp->next;
  20069c:	9b03      	ldr	r3, [sp, #12]
  20069e:	681b      	ldr	r3, [r3, #0]
  2006a0:	4a28      	ldr	r2, [pc, #160]	; (200744 <chVTDoTickI+0xd4>)
  2006a2:	61d3      	str	r3, [r2, #28]
    fn = vtp->func;
  2006a4:	9b03      	ldr	r3, [sp, #12]
  2006a6:	68db      	ldr	r3, [r3, #12]
  2006a8:	9300      	str	r3, [sp, #0]
    vtp->func = NULL;
  2006aa:	9b03      	ldr	r3, [sp, #12]
  2006ac:	2200      	movs	r2, #0
  2006ae:	60da      	str	r2, [r3, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  2006b0:	4b24      	ldr	r3, [pc, #144]	; (200744 <chVTDoTickI+0xd4>)
  2006b2:	69db      	ldr	r3, [r3, #28]
  2006b4:	4a24      	ldr	r2, [pc, #144]	; (200748 <chVTDoTickI+0xd8>)
  2006b6:	4293      	cmp	r3, r2
  2006b8:	d101      	bne.n	2006be <chVTDoTickI+0x4e>
      port_timer_stop_alarm();
  2006ba:	f7ff ff99 	bl	2005f0 <port_timer_stop_alarm.lto_priv.253>
    }

    /* Leaving the system critical zone in order to execute the callback
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();
  2006be:	f7ff ffc7 	bl	200650 <chSysUnlockFromISR.lto_priv.8>

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
  2006c2:	9b03      	ldr	r3, [sp, #12]
  2006c4:	691a      	ldr	r2, [r3, #16]
  2006c6:	9b00      	ldr	r3, [sp, #0]
  2006c8:	4610      	mov	r0, r2
  2006ca:	4798      	blx	r3

    /* Re-entering the critical zone in order to continue the exploration
       of the list.*/
    chSysLockFromISR();
  2006cc:	f7ff ffb8 	bl	200640 <chSysLockFromISR.lto_priv.12>

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
  2006d0:	4b1c      	ldr	r3, [pc, #112]	; (200744 <chVTDoTickI+0xd4>)
  2006d2:	69db      	ldr	r3, [r3, #28]
  2006d4:	9303      	str	r3, [sp, #12]
    now = chVTGetSystemTimeX();
  2006d6:	f7ff ffc3 	bl	200660 <chVTGetSystemTimeX.lto_priv.167>
  2006da:	9002      	str	r0, [sp, #8]
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
  2006dc:	9b03      	ldr	r3, [sp, #12]
  2006de:	689a      	ldr	r2, [r3, #8]
  2006e0:	4b18      	ldr	r3, [pc, #96]	; (200744 <chVTDoTickI+0xd4>)
  2006e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2006e4:	9902      	ldr	r1, [sp, #8]
  2006e6:	1acb      	subs	r3, r1, r3
  2006e8:	429a      	cmp	r2, r3
  2006ea:	d9cc      	bls.n	200686 <chVTDoTickI+0x16>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  2006ec:	4b15      	ldr	r3, [pc, #84]	; (200744 <chVTDoTickI+0xd4>)
  2006ee:	69db      	ldr	r3, [r3, #28]
  2006f0:	4a15      	ldr	r2, [pc, #84]	; (200748 <chVTDoTickI+0xd8>)
  2006f2:	4293      	cmp	r3, r2
  2006f4:	d023      	beq.n	20073e <chVTDoTickI+0xce>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
  2006f6:	4b13      	ldr	r3, [pc, #76]	; (200744 <chVTDoTickI+0xd4>)
  2006f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  2006fa:	9b03      	ldr	r3, [sp, #12]
  2006fc:	689b      	ldr	r3, [r3, #8]
  2006fe:	441a      	add	r2, r3
  200700:	9b02      	ldr	r3, [sp, #8]
  200702:	1ad3      	subs	r3, r2, r3
  200704:	9301      	str	r3, [sp, #4]
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
  200706:	9b01      	ldr	r3, [sp, #4]
  200708:	2b01      	cmp	r3, #1
  20070a:	d801      	bhi.n	200710 <chVTDoTickI+0xa0>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  20070c:	2302      	movs	r3, #2
  20070e:	9301      	str	r3, [sp, #4]
  }
  port_timer_set_alarm(now + delta);
  200710:	9a02      	ldr	r2, [sp, #8]
  200712:	9b01      	ldr	r3, [sp, #4]
  200714:	4413      	add	r3, r2
  200716:	4618      	mov	r0, r3
  200718:	f7ff ff72 	bl	200600 <port_timer_set_alarm.lto_priv.251>

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.lasttime) <=
  20071c:	f7ff ffa0 	bl	200660 <chVTGetSystemTimeX.lto_priv.167>
  200720:	4602      	mov	r2, r0
  200722:	4b08      	ldr	r3, [pc, #32]	; (200744 <chVTDoTickI+0xd4>)
  200724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  200726:	1ad2      	subs	r2, r2, r3
  200728:	9902      	ldr	r1, [sp, #8]
  20072a:	9b01      	ldr	r3, [sp, #4]
  20072c:	4419      	add	r1, r3
  20072e:	4b05      	ldr	r3, [pc, #20]	; (200744 <chVTDoTickI+0xd4>)
  200730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  200732:	1acb      	subs	r3, r1, r3
  200734:	429a      	cmp	r2, r3
  200736:	d902      	bls.n	20073e <chVTDoTickI+0xce>
  200738:	4804      	ldr	r0, [pc, #16]	; (20074c <chVTDoTickI+0xdc>)
  20073a:	f000 f849 	bl	2007d0 <chSysHalt>
              (now + delta - ch.vtlist.lasttime),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  20073e:	b005      	add	sp, #20
  200740:	f85d fb04 	ldr.w	pc, [sp], #4
  200744:	200008d8 	.word	0x200008d8
  200748:	200008f4 	.word	0x200008f4
  20074c:	080049e0 	.word	0x080049e0

00200750 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  200750:	b500      	push	{lr}
  200752:	b083      	sub	sp, #12
  200754:	9001      	str	r0, [sp, #4]
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
  200756:	f7ff ff3b 	bl	2005d0 <port_wait_for_interrupt>
  20075a:	e7fc      	b.n	200756 <_idle_thread+0x6>
  20075c:	0000      	movs	r0, r0
	...

00200760 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
  200760:	b508      	push	{r3, lr}

  _scheduler_init();
  200762:	f000 fcc5 	bl	2010f0 <_scheduler_init>
  _vt_init();
  200766:	f000 fadb 	bl	200d20 <_vt_init>
  _trace_init();
  20076a:	f000 f9c9 	bl	200b00 <_trace_init>

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
  20076e:	4b12      	ldr	r3, [pc, #72]	; (2007b8 <chSysInit+0x58>)
  200770:	2200      	movs	r2, #0
  200772:	631a      	str	r2, [r3, #48]	; 0x30
  ch.dbg.lock_cnt = (cnt_t)0;
  200774:	4b10      	ldr	r3, [pc, #64]	; (2007b8 <chSysInit+0x58>)
  200776:	2200      	movs	r2, #0
  200778:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if CH_CFG_USE_TM == TRUE
  _tm_init();
  20077a:	f001 fa01 	bl	201b80 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
  20077e:	f001 fda7 	bl	2022d0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
  200782:	f001 fe15 	bl	2023b0 <_heap_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  200786:	2280      	movs	r2, #128	; 0x80
  200788:	490c      	ldr	r1, [pc, #48]	; (2007bc <chSysInit+0x5c>)
  20078a:	480d      	ldr	r0, [pc, #52]	; (2007c0 <chSysInit+0x60>)
  20078c:	f000 ffe0 	bl	201750 <_thread_init>
  200790:	4602      	mov	r2, r0
  200792:	4b09      	ldr	r3, [pc, #36]	; (2007b8 <chSysInit+0x58>)
  200794:	619a      	str	r2, [r3, #24]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  {
    /* Setting up the base address of the static main thread stack, the
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  200796:	4b08      	ldr	r3, [pc, #32]	; (2007b8 <chSysInit+0x58>)
  200798:	699b      	ldr	r3, [r3, #24]
  20079a:	4a0a      	ldr	r2, [pc, #40]	; (2007c4 <chSysInit+0x64>)
  20079c:	61da      	str	r2, [r3, #28]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  20079e:	4b06      	ldr	r3, [pc, #24]	; (2007b8 <chSysInit+0x58>)
  2007a0:	699b      	ldr	r3, [r3, #24]
  2007a2:	2201      	movs	r2, #1
  2007a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Port layer initialization last because it depend on some of the
     initializations performed before.*/
  port_init();
  2007a8:	f7ff feaa 	bl	200500 <port_init>
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->stats);
#endif

  /* It is alive now.*/
  chSysEnable();
  2007ac:	f7ff ff40 	bl	200630 <chSysEnable>
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
  2007b0:	4805      	ldr	r0, [pc, #20]	; (2007c8 <chSysInit+0x68>)
  2007b2:	f001 f885 	bl	2018c0 <chThdCreate>
  }
#endif
}
  2007b6:	bd08      	pop	{r3, pc}
  2007b8:	200008d8 	.word	0x200008d8
  2007bc:	08004afc 	.word	0x08004afc
  2007c0:	20001118 	.word	0x20001118
  2007c4:	20000400 	.word	0x20000400
  2007c8:	080049c8 	.word	0x080049c8
  2007cc:	00000000 	.word	0x00000000

002007d0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
  2007d0:	b500      	push	{lr}
  2007d2:	b083      	sub	sp, #12
  2007d4:	9001      	str	r0, [sp, #4]

  port_disable();
  2007d6:	f7ff fee3 	bl	2005a0 <port_disable>

  /* Logging the event.*/
  _trace_halt(reason);
  2007da:	9801      	ldr	r0, [sp, #4]
  2007dc:	f000 fa38 	bl	200c50 <_trace_halt>

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
  2007e0:	4a01      	ldr	r2, [pc, #4]	; (2007e8 <chSysHalt+0x18>)
  2007e2:	9b01      	ldr	r3, [sp, #4]
  2007e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  2007e6:	e7fe      	b.n	2007e6 <chSysHalt+0x16>
  2007e8:	200008d8 	.word	0x200008d8
  2007ec:	00000000 	.word	0x00000000

002007f0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
  2007f0:	b508      	push	{r3, lr}

  chDbgCheckClassI();
  2007f2:	f000 f8e5 	bl	2009c0 <chDbgCheckClassI>
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  2007f6:	f7ff ff3b 	bl	200670 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
  2007fa:	bd08      	pop	{r3, pc}
  2007fc:	0000      	movs	r0, r0
	...

00200800 <port_lock.lto_priv.55>:
static inline void port_lock(void) {
  200800:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  200802:	b672      	cpsid	i
  200804:	2320      	movs	r3, #32
  200806:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200808:	9b01      	ldr	r3, [sp, #4]
  20080a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  20080e:	b662      	cpsie	i
}
  200810:	b002      	add	sp, #8
  200812:	4770      	bx	lr
	...

00200820 <port_unlock.lto_priv.31>:
static inline void port_unlock(void) {
  200820:	b082      	sub	sp, #8
  200822:	2300      	movs	r3, #0
  200824:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200826:	9b01      	ldr	r3, [sp, #4]
  200828:	f383 8811 	msr	BASEPRI, r3
}
  20082c:	b002      	add	sp, #8
  20082e:	4770      	bx	lr

00200830 <port_lock_from_isr.lto_priv.24>:
static inline void port_lock_from_isr(void) {
  200830:	b508      	push	{r3, lr}
  port_lock();
  200832:	f7ff ffe5 	bl	200800 <port_lock.lto_priv.55>
}
  200836:	bd08      	pop	{r3, pc}
	...

00200840 <port_unlock_from_isr.lto_priv.17>:
static inline void port_unlock_from_isr(void) {
  200840:	b508      	push	{r3, lr}
  port_unlock();
  200842:	f7ff ffed 	bl	200820 <port_unlock.lto_priv.31>
}
  200846:	bd08      	pop	{r3, pc}
	...

00200850 <_dbg_check_enable>:
/**
 * @brief   Guard code for @p chSysEnable().
 *
 * @notapi
 */
void _dbg_check_enable(void) {
  200850:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
  200852:	4b06      	ldr	r3, [pc, #24]	; (20086c <_dbg_check_enable+0x1c>)
  200854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  200856:	2b00      	cmp	r3, #0
  200858:	d103      	bne.n	200862 <_dbg_check_enable+0x12>
  20085a:	4b04      	ldr	r3, [pc, #16]	; (20086c <_dbg_check_enable+0x1c>)
  20085c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  20085e:	2b00      	cmp	r3, #0
  200860:	d002      	beq.n	200868 <_dbg_check_enable+0x18>
    chSysHalt("SV#3");
  200862:	4803      	ldr	r0, [pc, #12]	; (200870 <_dbg_check_enable+0x20>)
  200864:	f7ff ffb4 	bl	2007d0 <chSysHalt>
  }
}
  200868:	bd08      	pop	{r3, pc}
  20086a:	bf00      	nop
  20086c:	200008d8 	.word	0x200008d8
  200870:	080049ec 	.word	0x080049ec
	...

00200880 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
  200880:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
  200882:	4b07      	ldr	r3, [pc, #28]	; (2008a0 <_dbg_check_lock+0x20>)
  200884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  200886:	2b00      	cmp	r3, #0
  200888:	d103      	bne.n	200892 <_dbg_check_lock+0x12>
  20088a:	4b05      	ldr	r3, [pc, #20]	; (2008a0 <_dbg_check_lock+0x20>)
  20088c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  20088e:	2b00      	cmp	r3, #0
  200890:	d002      	beq.n	200898 <_dbg_check_lock+0x18>
    chSysHalt("SV#4");
  200892:	4804      	ldr	r0, [pc, #16]	; (2008a4 <_dbg_check_lock+0x24>)
  200894:	f7ff ff9c 	bl	2007d0 <chSysHalt>
  }
  _dbg_enter_lock();
  200898:	4b01      	ldr	r3, [pc, #4]	; (2008a0 <_dbg_check_lock+0x20>)
  20089a:	2201      	movs	r2, #1
  20089c:	635a      	str	r2, [r3, #52]	; 0x34
}
  20089e:	bd08      	pop	{r3, pc}
  2008a0:	200008d8 	.word	0x200008d8
  2008a4:	080049f4 	.word	0x080049f4
	...

002008b0 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
  2008b0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
  2008b2:	4b07      	ldr	r3, [pc, #28]	; (2008d0 <_dbg_check_unlock+0x20>)
  2008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  2008b6:	2b00      	cmp	r3, #0
  2008b8:	d103      	bne.n	2008c2 <_dbg_check_unlock+0x12>
  2008ba:	4b05      	ldr	r3, [pc, #20]	; (2008d0 <_dbg_check_unlock+0x20>)
  2008bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  2008be:	2b00      	cmp	r3, #0
  2008c0:	dc02      	bgt.n	2008c8 <_dbg_check_unlock+0x18>
    chSysHalt("SV#5");
  2008c2:	4804      	ldr	r0, [pc, #16]	; (2008d4 <_dbg_check_unlock+0x24>)
  2008c4:	f7ff ff84 	bl	2007d0 <chSysHalt>
  }
  _dbg_leave_lock();
  2008c8:	4b01      	ldr	r3, [pc, #4]	; (2008d0 <_dbg_check_unlock+0x20>)
  2008ca:	2200      	movs	r2, #0
  2008cc:	635a      	str	r2, [r3, #52]	; 0x34
}
  2008ce:	bd08      	pop	{r3, pc}
  2008d0:	200008d8 	.word	0x200008d8
  2008d4:	080049fc 	.word	0x080049fc
	...

002008e0 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
  2008e0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
  2008e2:	4b07      	ldr	r3, [pc, #28]	; (200900 <_dbg_check_lock_from_isr+0x20>)
  2008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  2008e6:	2b00      	cmp	r3, #0
  2008e8:	dd03      	ble.n	2008f2 <_dbg_check_lock_from_isr+0x12>
  2008ea:	4b05      	ldr	r3, [pc, #20]	; (200900 <_dbg_check_lock_from_isr+0x20>)
  2008ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  2008ee:	2b00      	cmp	r3, #0
  2008f0:	d002      	beq.n	2008f8 <_dbg_check_lock_from_isr+0x18>
    chSysHalt("SV#6");
  2008f2:	4804      	ldr	r0, [pc, #16]	; (200904 <_dbg_check_lock_from_isr+0x24>)
  2008f4:	f7ff ff6c 	bl	2007d0 <chSysHalt>
  }
  _dbg_enter_lock();
  2008f8:	4b01      	ldr	r3, [pc, #4]	; (200900 <_dbg_check_lock_from_isr+0x20>)
  2008fa:	2201      	movs	r2, #1
  2008fc:	635a      	str	r2, [r3, #52]	; 0x34
}
  2008fe:	bd08      	pop	{r3, pc}
  200900:	200008d8 	.word	0x200008d8
  200904:	08004a04 	.word	0x08004a04
	...

00200910 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
  200910:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
  200912:	4b07      	ldr	r3, [pc, #28]	; (200930 <_dbg_check_unlock_from_isr+0x20>)
  200914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  200916:	2b00      	cmp	r3, #0
  200918:	dd03      	ble.n	200922 <_dbg_check_unlock_from_isr+0x12>
  20091a:	4b05      	ldr	r3, [pc, #20]	; (200930 <_dbg_check_unlock_from_isr+0x20>)
  20091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  20091e:	2b00      	cmp	r3, #0
  200920:	dc02      	bgt.n	200928 <_dbg_check_unlock_from_isr+0x18>
    chSysHalt("SV#7");
  200922:	4804      	ldr	r0, [pc, #16]	; (200934 <_dbg_check_unlock_from_isr+0x24>)
  200924:	f7ff ff54 	bl	2007d0 <chSysHalt>
  }
  _dbg_leave_lock();
  200928:	4b01      	ldr	r3, [pc, #4]	; (200930 <_dbg_check_unlock_from_isr+0x20>)
  20092a:	2200      	movs	r2, #0
  20092c:	635a      	str	r2, [r3, #52]	; 0x34
}
  20092e:	bd08      	pop	{r3, pc}
  200930:	200008d8 	.word	0x200008d8
  200934:	08004a0c 	.word	0x08004a0c
	...

00200940 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
  200940:	b508      	push	{r3, lr}

  port_lock_from_isr();
  200942:	f7ff ff75 	bl	200830 <port_lock_from_isr.lto_priv.24>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
  200946:	4b09      	ldr	r3, [pc, #36]	; (20096c <_dbg_check_enter_isr+0x2c>)
  200948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  20094a:	2b00      	cmp	r3, #0
  20094c:	db03      	blt.n	200956 <_dbg_check_enter_isr+0x16>
  20094e:	4b07      	ldr	r3, [pc, #28]	; (20096c <_dbg_check_enter_isr+0x2c>)
  200950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  200952:	2b00      	cmp	r3, #0
  200954:	d002      	beq.n	20095c <_dbg_check_enter_isr+0x1c>
    chSysHalt("SV#8");
  200956:	4806      	ldr	r0, [pc, #24]	; (200970 <_dbg_check_enter_isr+0x30>)
  200958:	f7ff ff3a 	bl	2007d0 <chSysHalt>
  }
  ch.dbg.isr_cnt++;
  20095c:	4b03      	ldr	r3, [pc, #12]	; (20096c <_dbg_check_enter_isr+0x2c>)
  20095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  200960:	3301      	adds	r3, #1
  200962:	4a02      	ldr	r2, [pc, #8]	; (20096c <_dbg_check_enter_isr+0x2c>)
  200964:	6313      	str	r3, [r2, #48]	; 0x30
  port_unlock_from_isr();
  200966:	f7ff ff6b 	bl	200840 <port_unlock_from_isr.lto_priv.17>
}
  20096a:	bd08      	pop	{r3, pc}
  20096c:	200008d8 	.word	0x200008d8
  200970:	08004a14 	.word	0x08004a14
	...

00200980 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
  200980:	b508      	push	{r3, lr}

  port_lock_from_isr();
  200982:	f7ff ff55 	bl	200830 <port_lock_from_isr.lto_priv.24>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
  200986:	4b09      	ldr	r3, [pc, #36]	; (2009ac <_dbg_check_leave_isr+0x2c>)
  200988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  20098a:	2b00      	cmp	r3, #0
  20098c:	dd03      	ble.n	200996 <_dbg_check_leave_isr+0x16>
  20098e:	4b07      	ldr	r3, [pc, #28]	; (2009ac <_dbg_check_leave_isr+0x2c>)
  200990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  200992:	2b00      	cmp	r3, #0
  200994:	d002      	beq.n	20099c <_dbg_check_leave_isr+0x1c>
    chSysHalt("SV#9");
  200996:	4806      	ldr	r0, [pc, #24]	; (2009b0 <_dbg_check_leave_isr+0x30>)
  200998:	f7ff ff1a 	bl	2007d0 <chSysHalt>
  }
  ch.dbg.isr_cnt--;
  20099c:	4b03      	ldr	r3, [pc, #12]	; (2009ac <_dbg_check_leave_isr+0x2c>)
  20099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  2009a0:	3b01      	subs	r3, #1
  2009a2:	4a02      	ldr	r2, [pc, #8]	; (2009ac <_dbg_check_leave_isr+0x2c>)
  2009a4:	6313      	str	r3, [r2, #48]	; 0x30
  port_unlock_from_isr();
  2009a6:	f7ff ff4b 	bl	200840 <port_unlock_from_isr.lto_priv.17>
}
  2009aa:	bd08      	pop	{r3, pc}
  2009ac:	200008d8 	.word	0x200008d8
  2009b0:	08004a1c 	.word	0x08004a1c
	...

002009c0 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
  2009c0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
  2009c2:	4b06      	ldr	r3, [pc, #24]	; (2009dc <chDbgCheckClassI+0x1c>)
  2009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  2009c6:	2b00      	cmp	r3, #0
  2009c8:	db03      	blt.n	2009d2 <chDbgCheckClassI+0x12>
  2009ca:	4b04      	ldr	r3, [pc, #16]	; (2009dc <chDbgCheckClassI+0x1c>)
  2009cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  2009ce:	2b00      	cmp	r3, #0
  2009d0:	dc02      	bgt.n	2009d8 <chDbgCheckClassI+0x18>
    chSysHalt("SV#10");
  2009d2:	4803      	ldr	r0, [pc, #12]	; (2009e0 <chDbgCheckClassI+0x20>)
  2009d4:	f7ff fefc 	bl	2007d0 <chSysHalt>
  }
}
  2009d8:	bd08      	pop	{r3, pc}
  2009da:	bf00      	nop
  2009dc:	200008d8 	.word	0x200008d8
  2009e0:	08004a24 	.word	0x08004a24
	...

002009f0 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
  2009f0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
  2009f2:	4b06      	ldr	r3, [pc, #24]	; (200a0c <chDbgCheckClassS+0x1c>)
  2009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  2009f6:	2b00      	cmp	r3, #0
  2009f8:	d103      	bne.n	200a02 <chDbgCheckClassS+0x12>
  2009fa:	4b04      	ldr	r3, [pc, #16]	; (200a0c <chDbgCheckClassS+0x1c>)
  2009fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  2009fe:	2b00      	cmp	r3, #0
  200a00:	dc02      	bgt.n	200a08 <chDbgCheckClassS+0x18>
    chSysHalt("SV#11");
  200a02:	4803      	ldr	r0, [pc, #12]	; (200a10 <chDbgCheckClassS+0x20>)
  200a04:	f7ff fee4 	bl	2007d0 <chSysHalt>
  }
}
  200a08:	bd08      	pop	{r3, pc}
  200a0a:	bf00      	nop
  200a0c:	200008d8 	.word	0x200008d8
  200a10:	08004a2c 	.word	0x08004a2c
	...

00200a20 <port_lock.lto_priv.56>:
static inline void port_lock(void) {
  200a20:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  200a22:	b672      	cpsid	i
  200a24:	2320      	movs	r3, #32
  200a26:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200a28:	9b01      	ldr	r3, [sp, #4]
  200a2a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  200a2e:	b662      	cpsie	i
}
  200a30:	b002      	add	sp, #8
  200a32:	4770      	bx	lr
	...

00200a40 <port_unlock.lto_priv.32>:
static inline void port_unlock(void) {
  200a40:	b082      	sub	sp, #8
  200a42:	2300      	movs	r3, #0
  200a44:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200a46:	9b01      	ldr	r3, [sp, #4]
  200a48:	f383 8811 	msr	BASEPRI, r3
}
  200a4c:	b002      	add	sp, #8
  200a4e:	4770      	bx	lr

00200a50 <port_lock_from_isr.lto_priv.25>:
static inline void port_lock_from_isr(void) {
  200a50:	b508      	push	{r3, lr}
  port_lock();
  200a52:	f7ff ffe5 	bl	200a20 <port_lock.lto_priv.56>
}
  200a56:	bd08      	pop	{r3, pc}
	...

00200a60 <port_unlock_from_isr.lto_priv.18>:
static inline void port_unlock_from_isr(void) {
  200a60:	b508      	push	{r3, lr}
  port_unlock();
  200a62:	f7ff ffed 	bl	200a40 <port_unlock.lto_priv.32>
}
  200a66:	bd08      	pop	{r3, pc}
	...

00200a70 <port_rt_get_counter_value.lto_priv.249>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  200a70:	4b01      	ldr	r3, [pc, #4]	; (200a78 <port_rt_get_counter_value.lto_priv.249+0x8>)
  200a72:	685b      	ldr	r3, [r3, #4]
}
  200a74:	4618      	mov	r0, r3
  200a76:	4770      	bx	lr
  200a78:	e0001000 	.word	0xe0001000
  200a7c:	00000000 	.word	0x00000000

00200a80 <st_lld_get_counter.lto_priv.186>:
  return (systime_t)STM32_ST_TIM->CNT;
  200a80:	4b01      	ldr	r3, [pc, #4]	; (200a88 <st_lld_get_counter.lto_priv.186+0x8>)
  200a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  200a84:	4618      	mov	r0, r3
  200a86:	4770      	bx	lr
  200a88:	40000c00 	.word	0x40000c00
  200a8c:	00000000 	.word	0x00000000

00200a90 <port_timer_get_time.lto_priv.181>:
static inline systime_t port_timer_get_time(void) {
  200a90:	b508      	push	{r3, lr}
  return stGetCounter();
  200a92:	f7ff fff5 	bl	200a80 <st_lld_get_counter.lto_priv.186>
  200a96:	4603      	mov	r3, r0
}
  200a98:	4618      	mov	r0, r3
  200a9a:	bd08      	pop	{r3, pc}
  200a9c:	0000      	movs	r0, r0
	...

00200aa0 <chVTGetSystemTimeX.lto_priv.168>:
static inline systime_t chVTGetSystemTimeX(void) {
  200aa0:	b508      	push	{r3, lr}
  return port_timer_get_time();
  200aa2:	f7ff fff5 	bl	200a90 <port_timer_get_time.lto_priv.181>
  200aa6:	4603      	mov	r3, r0
}
  200aa8:	4618      	mov	r0, r3
  200aaa:	bd08      	pop	{r3, pc}
  200aac:	0000      	movs	r0, r0
	...

00200ab0 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {
  200ab0:	b510      	push	{r4, lr}

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
  200ab2:	4b0f      	ldr	r3, [pc, #60]	; (200af0 <trace_next+0x40>)
  200ab4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  200ab6:	f7ff fff3 	bl	200aa0 <chVTGetSystemTimeX.lto_priv.168>
  200aba:	4603      	mov	r3, r0
  200abc:	6063      	str	r3, [r4, #4]
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
  200abe:	f7ff ffd7 	bl	200a70 <port_rt_get_counter_value.lto_priv.249>
  200ac2:	4601      	mov	r1, r0
  200ac4:	4b0a      	ldr	r3, [pc, #40]	; (200af0 <trace_next+0x40>)
  200ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  200ac8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  200acc:	6813      	ldr	r3, [r2, #0]
  200ace:	f361 231f 	bfi	r3, r1, #8, #24
  200ad2:	6013      	str	r3, [r2, #0]
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
  200ad4:	4b06      	ldr	r3, [pc, #24]	; (200af0 <trace_next+0x40>)
  200ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  200ad8:	3310      	adds	r3, #16
  200ada:	4a05      	ldr	r2, [pc, #20]	; (200af0 <trace_next+0x40>)
  200adc:	63d3      	str	r3, [r2, #60]	; 0x3c
  200ade:	4b04      	ldr	r3, [pc, #16]	; (200af0 <trace_next+0x40>)
  200ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  200ae2:	4a04      	ldr	r2, [pc, #16]	; (200af4 <trace_next+0x44>)
  200ae4:	4293      	cmp	r3, r2
  200ae6:	d302      	bcc.n	200aee <trace_next+0x3e>
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
  200ae8:	4b01      	ldr	r3, [pc, #4]	; (200af0 <trace_next+0x40>)
  200aea:	4a03      	ldr	r2, [pc, #12]	; (200af8 <trace_next+0x48>)
  200aec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
  200aee:	bd10      	pop	{r4, pc}
  200af0:	200008d8 	.word	0x200008d8
  200af4:	20001118 	.word	0x20001118
  200af8:	20000918 	.word	0x20000918
  200afc:	00000000 	.word	0x00000000

00200b00 <_trace_init>:
#if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
/**
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _trace_init(void) {
  200b00:	b082      	sub	sp, #8
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  200b02:	4b10      	ldr	r3, [pc, #64]	; (200b44 <_trace_init+0x44>)
  200b04:	f64f 72f0 	movw	r2, #65520	; 0xfff0
  200b08:	871a      	strh	r2, [r3, #56]	; 0x38
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  200b0a:	4b0e      	ldr	r3, [pc, #56]	; (200b44 <_trace_init+0x44>)
  200b0c:	2280      	movs	r2, #128	; 0x80
  200b0e:	875a      	strh	r2, [r3, #58]	; 0x3a
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
  200b10:	4b0c      	ldr	r3, [pc, #48]	; (200b44 <_trace_init+0x44>)
  200b12:	4a0d      	ldr	r2, [pc, #52]	; (200b48 <_trace_init+0x48>)
  200b14:	63da      	str	r2, [r3, #60]	; 0x3c
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
  200b16:	2300      	movs	r3, #0
  200b18:	9301      	str	r3, [sp, #4]
  200b1a:	e00d      	b.n	200b38 <_trace_init+0x38>
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
  200b1c:	4a09      	ldr	r2, [pc, #36]	; (200b44 <_trace_init+0x44>)
  200b1e:	9b01      	ldr	r3, [sp, #4]
  200b20:	3301      	adds	r3, #1
  200b22:	011b      	lsls	r3, r3, #4
  200b24:	4413      	add	r3, r2
  200b26:	f103 0228 	add.w	r2, r3, #40	; 0x28
  200b2a:	7a13      	ldrb	r3, [r2, #8]
  200b2c:	f36f 0302 	bfc	r3, #0, #3
  200b30:	7213      	strb	r3, [r2, #8]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
  200b32:	9b01      	ldr	r3, [sp, #4]
  200b34:	3301      	adds	r3, #1
  200b36:	9301      	str	r3, [sp, #4]
  200b38:	9b01      	ldr	r3, [sp, #4]
  200b3a:	2b7f      	cmp	r3, #127	; 0x7f
  200b3c:	d9ee      	bls.n	200b1c <_trace_init+0x1c>
  }
}
  200b3e:	b002      	add	sp, #8
  200b40:	4770      	bx	lr
  200b42:	bf00      	nop
  200b44:	200008d8 	.word	0x200008d8
  200b48:	20000918 	.word	0x20000918
  200b4c:	00000000 	.word	0x00000000

00200b50 <_trace_switch>:
 * @param[in] ntp       the thread being switched in
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {
  200b50:	b500      	push	{lr}
  200b52:	b083      	sub	sp, #12
  200b54:	9001      	str	r0, [sp, #4]
  200b56:	9100      	str	r1, [sp, #0]

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
  200b58:	4b14      	ldr	r3, [pc, #80]	; (200bac <_trace_switch+0x5c>)
  200b5a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
  200b5c:	f003 0301 	and.w	r3, r3, #1
  200b60:	2b00      	cmp	r3, #0
  200b62:	d11f      	bne.n	200ba4 <_trace_switch+0x54>
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
  200b64:	4b11      	ldr	r3, [pc, #68]	; (200bac <_trace_switch+0x5c>)
  200b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  200b68:	7813      	ldrb	r3, [r2, #0]
  200b6a:	2101      	movs	r1, #1
  200b6c:	f361 0302 	bfi	r3, r1, #0, #3
  200b70:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
  200b72:	9b00      	ldr	r3, [sp, #0]
  200b74:	f893 1020 	ldrb.w	r1, [r3, #32]
  200b78:	4b0c      	ldr	r3, [pc, #48]	; (200bac <_trace_switch+0x5c>)
  200b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  200b7c:	460b      	mov	r3, r1
  200b7e:	f003 031f 	and.w	r3, r3, #31
  200b82:	b2d9      	uxtb	r1, r3
  200b84:	7813      	ldrb	r3, [r2, #0]
  200b86:	f361 03c7 	bfi	r3, r1, #3, #5
  200b8a:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
  200b8c:	4b07      	ldr	r3, [pc, #28]	; (200bac <_trace_switch+0x5c>)
  200b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  200b90:	4a06      	ldr	r2, [pc, #24]	; (200bac <_trace_switch+0x5c>)
  200b92:	6992      	ldr	r2, [r2, #24]
  200b94:	609a      	str	r2, [r3, #8]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
  200b96:	4b05      	ldr	r3, [pc, #20]	; (200bac <_trace_switch+0x5c>)
  200b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  200b9a:	9a00      	ldr	r2, [sp, #0]
  200b9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
  200b9e:	60da      	str	r2, [r3, #12]
    trace_next();
  200ba0:	f7ff ff86 	bl	200ab0 <trace_next>
  }
}
  200ba4:	b003      	add	sp, #12
  200ba6:	f85d fb04 	ldr.w	pc, [sp], #4
  200baa:	bf00      	nop
  200bac:	200008d8 	.word	0x200008d8

00200bb0 <_trace_isr_enter>:
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void _trace_isr_enter(const char *isr) {
  200bb0:	b500      	push	{lr}
  200bb2:	b083      	sub	sp, #12
  200bb4:	9001      	str	r0, [sp, #4]

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
  200bb6:	4b10      	ldr	r3, [pc, #64]	; (200bf8 <_trace_isr_enter+0x48>)
  200bb8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
  200bba:	f003 0302 	and.w	r3, r3, #2
  200bbe:	2b00      	cmp	r3, #0
  200bc0:	d116      	bne.n	200bf0 <_trace_isr_enter+0x40>
    port_lock_from_isr();
  200bc2:	f7ff ff45 	bl	200a50 <port_lock_from_isr.lto_priv.25>
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
  200bc6:	4b0c      	ldr	r3, [pc, #48]	; (200bf8 <_trace_isr_enter+0x48>)
  200bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  200bca:	7813      	ldrb	r3, [r2, #0]
  200bcc:	2102      	movs	r1, #2
  200bce:	f361 0302 	bfi	r3, r1, #0, #3
  200bd2:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
  200bd4:	4b08      	ldr	r3, [pc, #32]	; (200bf8 <_trace_isr_enter+0x48>)
  200bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  200bd8:	7813      	ldrb	r3, [r2, #0]
  200bda:	f36f 03c7 	bfc	r3, #3, #5
  200bde:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
  200be0:	4b05      	ldr	r3, [pc, #20]	; (200bf8 <_trace_isr_enter+0x48>)
  200be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  200be4:	9a01      	ldr	r2, [sp, #4]
  200be6:	609a      	str	r2, [r3, #8]
    trace_next();
  200be8:	f7ff ff62 	bl	200ab0 <trace_next>
    port_unlock_from_isr();
  200bec:	f7ff ff38 	bl	200a60 <port_unlock_from_isr.lto_priv.18>
  }
}
  200bf0:	b003      	add	sp, #12
  200bf2:	f85d fb04 	ldr.w	pc, [sp], #4
  200bf6:	bf00      	nop
  200bf8:	200008d8 	.word	0x200008d8
  200bfc:	00000000 	.word	0x00000000

00200c00 <_trace_isr_leave>:
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {
  200c00:	b500      	push	{lr}
  200c02:	b083      	sub	sp, #12
  200c04:	9001      	str	r0, [sp, #4]

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
  200c06:	4b10      	ldr	r3, [pc, #64]	; (200c48 <_trace_isr_leave+0x48>)
  200c08:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
  200c0a:	f003 0302 	and.w	r3, r3, #2
  200c0e:	2b00      	cmp	r3, #0
  200c10:	d116      	bne.n	200c40 <_trace_isr_leave+0x40>
    port_lock_from_isr();
  200c12:	f7ff ff1d 	bl	200a50 <port_lock_from_isr.lto_priv.25>
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
  200c16:	4b0c      	ldr	r3, [pc, #48]	; (200c48 <_trace_isr_leave+0x48>)
  200c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  200c1a:	7813      	ldrb	r3, [r2, #0]
  200c1c:	2103      	movs	r1, #3
  200c1e:	f361 0302 	bfi	r3, r1, #0, #3
  200c22:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
  200c24:	4b08      	ldr	r3, [pc, #32]	; (200c48 <_trace_isr_leave+0x48>)
  200c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  200c28:	7813      	ldrb	r3, [r2, #0]
  200c2a:	f36f 03c7 	bfc	r3, #3, #5
  200c2e:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
  200c30:	4b05      	ldr	r3, [pc, #20]	; (200c48 <_trace_isr_leave+0x48>)
  200c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  200c34:	9a01      	ldr	r2, [sp, #4]
  200c36:	609a      	str	r2, [r3, #8]
    trace_next();
  200c38:	f7ff ff3a 	bl	200ab0 <trace_next>
    port_unlock_from_isr();
  200c3c:	f7ff ff10 	bl	200a60 <port_unlock_from_isr.lto_priv.18>
  }
}
  200c40:	b003      	add	sp, #12
  200c42:	f85d fb04 	ldr.w	pc, [sp], #4
  200c46:	bf00      	nop
  200c48:	200008d8 	.word	0x200008d8
  200c4c:	00000000 	.word	0x00000000

00200c50 <_trace_halt>:
 *
 * @param[in] reason    the halt error string
 *
 * @notapi
 */
void _trace_halt(const char *reason) {
  200c50:	b500      	push	{lr}
  200c52:	b083      	sub	sp, #12
  200c54:	9001      	str	r0, [sp, #4]

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
  200c56:	4b0e      	ldr	r3, [pc, #56]	; (200c90 <_trace_halt+0x40>)
  200c58:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
  200c5a:	f003 0304 	and.w	r3, r3, #4
  200c5e:	2b00      	cmp	r3, #0
  200c60:	d112      	bne.n	200c88 <_trace_halt+0x38>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
  200c62:	4b0b      	ldr	r3, [pc, #44]	; (200c90 <_trace_halt+0x40>)
  200c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  200c66:	7813      	ldrb	r3, [r2, #0]
  200c68:	2104      	movs	r1, #4
  200c6a:	f361 0302 	bfi	r3, r1, #0, #3
  200c6e:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state         = 0;
  200c70:	4b07      	ldr	r3, [pc, #28]	; (200c90 <_trace_halt+0x40>)
  200c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  200c74:	7813      	ldrb	r3, [r2, #0]
  200c76:	f36f 03c7 	bfc	r3, #3, #5
  200c7a:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
  200c7c:	4b04      	ldr	r3, [pc, #16]	; (200c90 <_trace_halt+0x40>)
  200c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  200c80:	9a01      	ldr	r2, [sp, #4]
  200c82:	609a      	str	r2, [r3, #8]
    trace_next();
  200c84:	f7ff ff14 	bl	200ab0 <trace_next>
  }
}
  200c88:	b003      	add	sp, #12
  200c8a:	f85d fb04 	ldr.w	pc, [sp], #4
  200c8e:	bf00      	nop
  200c90:	200008d8 	.word	0x200008d8
	...

00200ca0 <st_lld_get_counter.lto_priv.187>:
  return (systime_t)STM32_ST_TIM->CNT;
  200ca0:	4b01      	ldr	r3, [pc, #4]	; (200ca8 <st_lld_get_counter.lto_priv.187+0x8>)
  200ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  200ca4:	4618      	mov	r0, r3
  200ca6:	4770      	bx	lr
  200ca8:	40000c00 	.word	0x40000c00
  200cac:	00000000 	.word	0x00000000

00200cb0 <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
  200cb0:	b500      	push	{lr}
  200cb2:	b083      	sub	sp, #12
  200cb4:	9001      	str	r0, [sp, #4]
  stStartAlarm(time);
  200cb6:	9801      	ldr	r0, [sp, #4]
  200cb8:	f001 fd62 	bl	202780 <stStartAlarm>
}
  200cbc:	b003      	add	sp, #12
  200cbe:	f85d fb04 	ldr.w	pc, [sp], #4
  200cc2:	bf00      	nop
	...

00200cd0 <port_timer_stop_alarm.lto_priv.254>:
static inline void port_timer_stop_alarm(void) {
  200cd0:	b508      	push	{r3, lr}
  stStopAlarm();
  200cd2:	f001 fd6d 	bl	2027b0 <stStopAlarm>
}
  200cd6:	bd08      	pop	{r3, pc}
	...

00200ce0 <port_timer_set_alarm.lto_priv.252>:
static inline void port_timer_set_alarm(systime_t time) {
  200ce0:	b500      	push	{lr}
  200ce2:	b083      	sub	sp, #12
  200ce4:	9001      	str	r0, [sp, #4]
  stSetAlarm(time);
  200ce6:	9801      	ldr	r0, [sp, #4]
  200ce8:	f001 fd6a 	bl	2027c0 <stSetAlarm>
}
  200cec:	b003      	add	sp, #12
  200cee:	f85d fb04 	ldr.w	pc, [sp], #4
  200cf2:	bf00      	nop
	...

00200d00 <port_timer_get_time.lto_priv.182>:
static inline systime_t port_timer_get_time(void) {
  200d00:	b508      	push	{r3, lr}
  return stGetCounter();
  200d02:	f7ff ffcd 	bl	200ca0 <st_lld_get_counter.lto_priv.187>
  200d06:	4603      	mov	r3, r0
}
  200d08:	4618      	mov	r0, r3
  200d0a:	bd08      	pop	{r3, pc}
  200d0c:	0000      	movs	r0, r0
	...

00200d10 <chVTGetSystemTimeX.lto_priv.169>:
static inline systime_t chVTGetSystemTimeX(void) {
  200d10:	b508      	push	{r3, lr}
  return port_timer_get_time();
  200d12:	f7ff fff5 	bl	200d00 <port_timer_get_time.lto_priv.182>
  200d16:	4603      	mov	r3, r0
}
  200d18:	4618      	mov	r0, r3
  200d1a:	bd08      	pop	{r3, pc}
  200d1c:	0000      	movs	r0, r0
	...

00200d20 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200d20:	4b06      	ldr	r3, [pc, #24]	; (200d3c <_vt_init+0x1c>)
  200d22:	4a07      	ldr	r2, [pc, #28]	; (200d40 <_vt_init+0x20>)
  200d24:	61da      	str	r2, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  200d26:	4b05      	ldr	r3, [pc, #20]	; (200d3c <_vt_init+0x1c>)
  200d28:	4a05      	ldr	r2, [pc, #20]	; (200d40 <_vt_init+0x20>)
  200d2a:	621a      	str	r2, [r3, #32]
  ch.vtlist.delta = (systime_t)-1;
  200d2c:	4b03      	ldr	r3, [pc, #12]	; (200d3c <_vt_init+0x1c>)
  200d2e:	f04f 32ff 	mov.w	r2, #4294967295
  200d32:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
  200d34:	4b01      	ldr	r3, [pc, #4]	; (200d3c <_vt_init+0x1c>)
  200d36:	2200      	movs	r2, #0
  200d38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  200d3a:	4770      	bx	lr
  200d3c:	200008d8 	.word	0x200008d8
  200d40:	200008f4 	.word	0x200008f4
	...

00200d50 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
  200d50:	b500      	push	{lr}
  200d52:	b089      	sub	sp, #36	; 0x24
  200d54:	9003      	str	r0, [sp, #12]
  200d56:	9102      	str	r1, [sp, #8]
  200d58:	9201      	str	r2, [sp, #4]
  200d5a:	9300      	str	r3, [sp, #0]
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
  200d5c:	f7ff fe30 	bl	2009c0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
  200d60:	9b03      	ldr	r3, [sp, #12]
  200d62:	2b00      	cmp	r3, #0
  200d64:	d005      	beq.n	200d72 <chVTDoSetI+0x22>
  200d66:	9b01      	ldr	r3, [sp, #4]
  200d68:	2b00      	cmp	r3, #0
  200d6a:	d002      	beq.n	200d72 <chVTDoSetI+0x22>
  200d6c:	9b02      	ldr	r3, [sp, #8]
  200d6e:	2b00      	cmp	r3, #0
  200d70:	d102      	bne.n	200d78 <chVTDoSetI+0x28>
  200d72:	4845      	ldr	r0, [pc, #276]	; (200e88 <chVTDoSetI+0x138>)
  200d74:	f7ff fd2c 	bl	2007d0 <chSysHalt>

  vtp->par = par;
  200d78:	9b03      	ldr	r3, [sp, #12]
  200d7a:	9a00      	ldr	r2, [sp, #0]
  200d7c:	611a      	str	r2, [r3, #16]
  vtp->func = vtfunc;
  200d7e:	9b03      	ldr	r3, [sp, #12]
  200d80:	9a01      	ldr	r2, [sp, #4]
  200d82:	60da      	str	r2, [r3, #12]

#if CH_CFG_ST_TIMEDELTA > 0
  {
    systime_t now = chVTGetSystemTimeX();
  200d84:	f7ff ffc4 	bl	200d10 <chVTGetSystemTimeX.lto_priv.169>
  200d88:	9005      	str	r0, [sp, #20]

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
  200d8a:	9b02      	ldr	r3, [sp, #8]
  200d8c:	2b01      	cmp	r3, #1
  200d8e:	d801      	bhi.n	200d94 <chVTDoSetI+0x44>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
  200d90:	2302      	movs	r3, #2
  200d92:	9302      	str	r3, [sp, #8]
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  200d94:	4b3d      	ldr	r3, [pc, #244]	; (200e8c <chVTDoSetI+0x13c>)
  200d96:	69db      	ldr	r3, [r3, #28]
  200d98:	4a3d      	ldr	r2, [pc, #244]	; (200e90 <chVTDoSetI+0x140>)
  200d9a:	4293      	cmp	r3, r2
  200d9c:	d119      	bne.n	200dd2 <chVTDoSetI+0x82>

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
  200d9e:	4a3b      	ldr	r2, [pc, #236]	; (200e8c <chVTDoSetI+0x13c>)
  200da0:	9b05      	ldr	r3, [sp, #20]
  200da2:	6293      	str	r3, [r2, #40]	; 0x28
      ch.vtlist.next = vtp;
  200da4:	4a39      	ldr	r2, [pc, #228]	; (200e8c <chVTDoSetI+0x13c>)
  200da6:	9b03      	ldr	r3, [sp, #12]
  200da8:	61d3      	str	r3, [r2, #28]
      ch.vtlist.prev = vtp;
  200daa:	4a38      	ldr	r2, [pc, #224]	; (200e8c <chVTDoSetI+0x13c>)
  200dac:	9b03      	ldr	r3, [sp, #12]
  200dae:	6213      	str	r3, [r2, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
  200db0:	9b03      	ldr	r3, [sp, #12]
  200db2:	4a37      	ldr	r2, [pc, #220]	; (200e90 <chVTDoSetI+0x140>)
  200db4:	601a      	str	r2, [r3, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
  200db6:	9b03      	ldr	r3, [sp, #12]
  200db8:	4a35      	ldr	r2, [pc, #212]	; (200e90 <chVTDoSetI+0x140>)
  200dba:	605a      	str	r2, [r3, #4]
      vtp->delta = delay;
  200dbc:	9b03      	ldr	r3, [sp, #12]
  200dbe:	9a02      	ldr	r2, [sp, #8]
  200dc0:	609a      	str	r2, [r3, #8]

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
  200dc2:	4b32      	ldr	r3, [pc, #200]	; (200e8c <chVTDoSetI+0x13c>)
  200dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  200dc6:	9b02      	ldr	r3, [sp, #8]
  200dc8:	4413      	add	r3, r2
  200dca:	4618      	mov	r0, r3
  200dcc:	f7ff ff70 	bl	200cb0 <port_timer_start_alarm>
  200dd0:	e056      	b.n	200e80 <chVTDoSetI+0x130>

      return;
    }

    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;
  200dd2:	4b2e      	ldr	r3, [pc, #184]	; (200e8c <chVTDoSetI+0x13c>)
  200dd4:	69db      	ldr	r3, [r3, #28]
  200dd6:	9307      	str	r3, [sp, #28]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
  200dd8:	4b2c      	ldr	r3, [pc, #176]	; (200e8c <chVTDoSetI+0x13c>)
  200dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  200ddc:	9a05      	ldr	r2, [sp, #20]
  200dde:	1ad3      	subs	r3, r2, r3
  200de0:	9a02      	ldr	r2, [sp, #8]
  200de2:	4413      	add	r3, r2
  200de4:	9306      	str	r3, [sp, #24]

    if (delta < now - ch.vtlist.lasttime) {
  200de6:	4b29      	ldr	r3, [pc, #164]	; (200e8c <chVTDoSetI+0x13c>)
  200de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  200dea:	9a05      	ldr	r2, [sp, #20]
  200dec:	1ad3      	subs	r3, r2, r3
  200dee:	9a06      	ldr	r2, [sp, #24]
  200df0:	429a      	cmp	r2, r3
  200df2:	d208      	bcs.n	200e06 <chVTDoSetI+0xb6>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
  200df4:	9b07      	ldr	r3, [sp, #28]
  200df6:	689b      	ldr	r3, [r3, #8]
  200df8:	9a06      	ldr	r2, [sp, #24]
  200dfa:	1ad3      	subs	r3, r2, r3
  200dfc:	9306      	str	r3, [sp, #24]
      p = p->next;
  200dfe:	9b07      	ldr	r3, [sp, #28]
  200e00:	681b      	ldr	r3, [r3, #0]
  200e02:	9307      	str	r3, [sp, #28]
  200e04:	e01b      	b.n	200e3e <chVTDoSetI+0xee>
    }
    else if (delta < p->delta) {
  200e06:	9b07      	ldr	r3, [sp, #28]
  200e08:	689b      	ldr	r3, [r3, #8]
  200e0a:	9a06      	ldr	r2, [sp, #24]
  200e0c:	429a      	cmp	r2, r3
  200e0e:	d216      	bcs.n	200e3e <chVTDoSetI+0xee>
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
  200e10:	4b1e      	ldr	r3, [pc, #120]	; (200e8c <chVTDoSetI+0x13c>)
  200e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  200e14:	9b06      	ldr	r3, [sp, #24]
  200e16:	4413      	add	r3, r2
  200e18:	4618      	mov	r0, r3
  200e1a:	f7ff ff61 	bl	200ce0 <port_timer_set_alarm.lto_priv.252>
  200e1e:	e00e      	b.n	200e3e <chVTDoSetI+0xee>

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
  200e20:	9a07      	ldr	r2, [sp, #28]
  200e22:	9b03      	ldr	r3, [sp, #12]
  200e24:	429a      	cmp	r2, r3
  200e26:	d102      	bne.n	200e2e <chVTDoSetI+0xde>
  200e28:	4817      	ldr	r0, [pc, #92]	; (200e88 <chVTDoSetI+0x138>)
  200e2a:	f7ff fcd1 	bl	2007d0 <chSysHalt>

    delta -= p->delta;
  200e2e:	9b07      	ldr	r3, [sp, #28]
  200e30:	689b      	ldr	r3, [r3, #8]
  200e32:	9a06      	ldr	r2, [sp, #24]
  200e34:	1ad3      	subs	r3, r2, r3
  200e36:	9306      	str	r3, [sp, #24]
    p = p->next;
  200e38:	9b07      	ldr	r3, [sp, #28]
  200e3a:	681b      	ldr	r3, [r3, #0]
  200e3c:	9307      	str	r3, [sp, #28]
  while (p->delta < delta) {
  200e3e:	9b07      	ldr	r3, [sp, #28]
  200e40:	689b      	ldr	r3, [r3, #8]
  200e42:	9a06      	ldr	r2, [sp, #24]
  200e44:	429a      	cmp	r2, r3
  200e46:	d8eb      	bhi.n	200e20 <chVTDoSetI+0xd0>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  200e48:	9b03      	ldr	r3, [sp, #12]
  200e4a:	9a07      	ldr	r2, [sp, #28]
  200e4c:	601a      	str	r2, [r3, #0]
  vtp->prev = vtp->next->prev;
  200e4e:	9b03      	ldr	r3, [sp, #12]
  200e50:	681b      	ldr	r3, [r3, #0]
  200e52:	685a      	ldr	r2, [r3, #4]
  200e54:	9b03      	ldr	r3, [sp, #12]
  200e56:	605a      	str	r2, [r3, #4]
  vtp->prev->next = vtp;
  200e58:	9b03      	ldr	r3, [sp, #12]
  200e5a:	685b      	ldr	r3, [r3, #4]
  200e5c:	9a03      	ldr	r2, [sp, #12]
  200e5e:	601a      	str	r2, [r3, #0]
  p->prev = vtp;
  200e60:	9b07      	ldr	r3, [sp, #28]
  200e62:	9a03      	ldr	r2, [sp, #12]
  200e64:	605a      	str	r2, [r3, #4]
  vtp->delta = delta;
  200e66:	9b03      	ldr	r3, [sp, #12]
  200e68:	9a06      	ldr	r2, [sp, #24]
  200e6a:	609a      	str	r2, [r3, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
  200e6c:	9b07      	ldr	r3, [sp, #28]
  200e6e:	689a      	ldr	r2, [r3, #8]
  200e70:	9b06      	ldr	r3, [sp, #24]
  200e72:	1ad2      	subs	r2, r2, r3
  200e74:	9b07      	ldr	r3, [sp, #28]
  200e76:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (systime_t)-1;
  200e78:	4b04      	ldr	r3, [pc, #16]	; (200e8c <chVTDoSetI+0x13c>)
  200e7a:	f04f 32ff 	mov.w	r2, #4294967295
  200e7e:	625a      	str	r2, [r3, #36]	; 0x24
}
  200e80:	b009      	add	sp, #36	; 0x24
  200e82:	f85d fb04 	ldr.w	pc, [sp], #4
  200e86:	bf00      	nop
  200e88:	08004a34 	.word	0x08004a34
  200e8c:	200008d8 	.word	0x200008d8
  200e90:	200008f4 	.word	0x200008f4
	...

00200ea0 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
  200ea0:	b500      	push	{lr}
  200ea2:	b085      	sub	sp, #20
  200ea4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
  200ea6:	f7ff fd8b 	bl	2009c0 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
  200eaa:	9b01      	ldr	r3, [sp, #4]
  200eac:	2b00      	cmp	r3, #0
  200eae:	d102      	bne.n	200eb6 <chVTDoResetI+0x16>
  200eb0:	4836      	ldr	r0, [pc, #216]	; (200f8c <chVTDoResetI+0xec>)
  200eb2:	f7ff fc8d 	bl	2007d0 <chSysHalt>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
  200eb6:	9b01      	ldr	r3, [sp, #4]
  200eb8:	68db      	ldr	r3, [r3, #12]
  200eba:	2b00      	cmp	r3, #0
  200ebc:	d102      	bne.n	200ec4 <chVTDoResetI+0x24>
  200ebe:	4833      	ldr	r0, [pc, #204]	; (200f8c <chVTDoResetI+0xec>)
  200ec0:	f7ff fc86 	bl	2007d0 <chSysHalt>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
  200ec4:	4b32      	ldr	r3, [pc, #200]	; (200f90 <chVTDoResetI+0xf0>)
  200ec6:	69db      	ldr	r3, [r3, #28]
  200ec8:	9a01      	ldr	r2, [sp, #4]
  200eca:	429a      	cmp	r2, r3
  200ecc:	d01b      	beq.n	200f06 <chVTDoResetI+0x66>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
  200ece:	9b01      	ldr	r3, [sp, #4]
  200ed0:	685b      	ldr	r3, [r3, #4]
  200ed2:	9a01      	ldr	r2, [sp, #4]
  200ed4:	6812      	ldr	r2, [r2, #0]
  200ed6:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
  200ed8:	9b01      	ldr	r3, [sp, #4]
  200eda:	681b      	ldr	r3, [r3, #0]
  200edc:	9a01      	ldr	r2, [sp, #4]
  200ede:	6852      	ldr	r2, [r2, #4]
  200ee0:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
  200ee2:	9b01      	ldr	r3, [sp, #4]
  200ee4:	2200      	movs	r2, #0
  200ee6:	60da      	str	r2, [r3, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  200ee8:	9b01      	ldr	r3, [sp, #4]
  200eea:	681b      	ldr	r3, [r3, #0]
  200eec:	4a29      	ldr	r2, [pc, #164]	; (200f94 <chVTDoResetI+0xf4>)
  200eee:	4293      	cmp	r3, r2
  200ef0:	d047      	beq.n	200f82 <chVTDoResetI+0xe2>
      vtp->next->delta += vtp->delta;
  200ef2:	9b01      	ldr	r3, [sp, #4]
  200ef4:	681b      	ldr	r3, [r3, #0]
  200ef6:	6899      	ldr	r1, [r3, #8]
  200ef8:	9b01      	ldr	r3, [sp, #4]
  200efa:	689a      	ldr	r2, [r3, #8]
  200efc:	9b01      	ldr	r3, [sp, #4]
  200efe:	681b      	ldr	r3, [r3, #0]
  200f00:	440a      	add	r2, r1
  200f02:	609a      	str	r2, [r3, #8]
  200f04:	e03e      	b.n	200f84 <chVTDoResetI+0xe4>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  200f06:	9b01      	ldr	r3, [sp, #4]
  200f08:	681b      	ldr	r3, [r3, #0]
  200f0a:	4a21      	ldr	r2, [pc, #132]	; (200f90 <chVTDoResetI+0xf0>)
  200f0c:	61d3      	str	r3, [r2, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  200f0e:	4b20      	ldr	r3, [pc, #128]	; (200f90 <chVTDoResetI+0xf0>)
  200f10:	69db      	ldr	r3, [r3, #28]
  200f12:	4a20      	ldr	r2, [pc, #128]	; (200f94 <chVTDoResetI+0xf4>)
  200f14:	605a      	str	r2, [r3, #4]
  vtp->func = NULL;
  200f16:	9b01      	ldr	r3, [sp, #4]
  200f18:	2200      	movs	r2, #0
  200f1a:	60da      	str	r2, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  200f1c:	4b1c      	ldr	r3, [pc, #112]	; (200f90 <chVTDoResetI+0xf0>)
  200f1e:	69db      	ldr	r3, [r3, #28]
  200f20:	4a1c      	ldr	r2, [pc, #112]	; (200f94 <chVTDoResetI+0xf4>)
  200f22:	4293      	cmp	r3, r2
  200f24:	d102      	bne.n	200f2c <chVTDoResetI+0x8c>
    port_timer_stop_alarm();
  200f26:	f7ff fed3 	bl	200cd0 <port_timer_stop_alarm.lto_priv.254>
  200f2a:	e02b      	b.n	200f84 <chVTDoResetI+0xe4>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
  200f2c:	4b18      	ldr	r3, [pc, #96]	; (200f90 <chVTDoResetI+0xf0>)
  200f2e:	69db      	ldr	r3, [r3, #28]
  200f30:	6899      	ldr	r1, [r3, #8]
  200f32:	9b01      	ldr	r3, [sp, #4]
  200f34:	689a      	ldr	r2, [r3, #8]
  200f36:	4b16      	ldr	r3, [pc, #88]	; (200f90 <chVTDoResetI+0xf0>)
  200f38:	69db      	ldr	r3, [r3, #28]
  200f3a:	440a      	add	r2, r1
  200f3c:	609a      	str	r2, [r3, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
  200f3e:	f7ff fee7 	bl	200d10 <chVTGetSystemTimeX.lto_priv.169>
  200f42:	4602      	mov	r2, r0
  200f44:	4b12      	ldr	r3, [pc, #72]	; (200f90 <chVTDoResetI+0xf0>)
  200f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  200f48:	1ad3      	subs	r3, r2, r3
  200f4a:	9302      	str	r3, [sp, #8]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
  200f4c:	4b10      	ldr	r3, [pc, #64]	; (200f90 <chVTDoResetI+0xf0>)
  200f4e:	69db      	ldr	r3, [r3, #28]
  200f50:	689b      	ldr	r3, [r3, #8]
  200f52:	9a02      	ldr	r2, [sp, #8]
  200f54:	429a      	cmp	r2, r3
  200f56:	d215      	bcs.n	200f84 <chVTDoResetI+0xe4>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
  200f58:	4b0d      	ldr	r3, [pc, #52]	; (200f90 <chVTDoResetI+0xf0>)
  200f5a:	69db      	ldr	r3, [r3, #28]
  200f5c:	689a      	ldr	r2, [r3, #8]
  200f5e:	9b02      	ldr	r3, [sp, #8]
  200f60:	1ad3      	subs	r3, r2, r3
  200f62:	9303      	str	r3, [sp, #12]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
  200f64:	9b03      	ldr	r3, [sp, #12]
  200f66:	2b01      	cmp	r3, #1
  200f68:	d801      	bhi.n	200f6e <chVTDoResetI+0xce>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  200f6a:	2302      	movs	r3, #2
  200f6c:	9303      	str	r3, [sp, #12]
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
  200f6e:	4b08      	ldr	r3, [pc, #32]	; (200f90 <chVTDoResetI+0xf0>)
  200f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  200f72:	9b02      	ldr	r3, [sp, #8]
  200f74:	441a      	add	r2, r3
  200f76:	9b03      	ldr	r3, [sp, #12]
  200f78:	4413      	add	r3, r2
  200f7a:	4618      	mov	r0, r3
  200f7c:	f7ff feb0 	bl	200ce0 <port_timer_set_alarm.lto_priv.252>
  200f80:	e000      	b.n	200f84 <chVTDoResetI+0xe4>
      vtp->next->delta += vtp->delta;
  200f82:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  200f84:	b005      	add	sp, #20
  200f86:	f85d fb04 	ldr.w	pc, [sp], #4
  200f8a:	bf00      	nop
  200f8c:	08004a40 	.word	0x08004a40
  200f90:	200008d8 	.word	0x200008d8
  200f94:	200008f4 	.word	0x200008f4
	...

00200fa0 <port_lock.lto_priv.57>:
static inline void port_lock(void) {
  200fa0:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  200fa2:	b672      	cpsid	i
  200fa4:	2320      	movs	r3, #32
  200fa6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200fa8:	9b01      	ldr	r3, [sp, #4]
  200faa:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  200fae:	b662      	cpsie	i
}
  200fb0:	b002      	add	sp, #8
  200fb2:	4770      	bx	lr
	...

00200fc0 <port_unlock.lto_priv.33>:
static inline void port_unlock(void) {
  200fc0:	b082      	sub	sp, #8
  200fc2:	2300      	movs	r3, #0
  200fc4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200fc6:	9b01      	ldr	r3, [sp, #4]
  200fc8:	f383 8811 	msr	BASEPRI, r3
}
  200fcc:	b002      	add	sp, #8
  200fce:	4770      	bx	lr

00200fd0 <port_lock_from_isr.lto_priv.26>:
static inline void port_lock_from_isr(void) {
  200fd0:	b508      	push	{r3, lr}
  port_lock();
  200fd2:	f7ff ffe5 	bl	200fa0 <port_lock.lto_priv.57>
}
  200fd6:	bd08      	pop	{r3, pc}
	...

00200fe0 <port_unlock_from_isr.lto_priv.19>:
static inline void port_unlock_from_isr(void) {
  200fe0:	b508      	push	{r3, lr}
  port_unlock();
  200fe2:	f7ff ffed 	bl	200fc0 <port_unlock.lto_priv.33>
}
  200fe6:	bd08      	pop	{r3, pc}
	...

00200ff0 <queue_init.lto_priv.172>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
  200ff0:	b082      	sub	sp, #8
  200ff2:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
  200ff4:	9b01      	ldr	r3, [sp, #4]
  200ff6:	9a01      	ldr	r2, [sp, #4]
  200ff8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  200ffa:	9b01      	ldr	r3, [sp, #4]
  200ffc:	9a01      	ldr	r2, [sp, #4]
  200ffe:	605a      	str	r2, [r3, #4]
}
  201000:	b002      	add	sp, #8
  201002:	4770      	bx	lr
	...

00201010 <queue_fifo_remove.lto_priv.221>:
  tp->queue.prev             = tqp->prev;
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  201010:	b084      	sub	sp, #16
  201012:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
  201014:	9b01      	ldr	r3, [sp, #4]
  201016:	681b      	ldr	r3, [r3, #0]
  201018:	9303      	str	r3, [sp, #12]

  tqp->next             = tp->queue.next;
  20101a:	9b03      	ldr	r3, [sp, #12]
  20101c:	681a      	ldr	r2, [r3, #0]
  20101e:	9b01      	ldr	r3, [sp, #4]
  201020:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201022:	9b01      	ldr	r3, [sp, #4]
  201024:	681b      	ldr	r3, [r3, #0]
  201026:	9a01      	ldr	r2, [sp, #4]
  201028:	605a      	str	r2, [r3, #4]

  return tp;
  20102a:	9b03      	ldr	r3, [sp, #12]
}
  20102c:	4618      	mov	r0, r3
  20102e:	b004      	add	sp, #16
  201030:	4770      	bx	lr
  201032:	bf00      	nop
	...

00201040 <queue_dequeue.lto_priv.242>:
  tqp->prev->queue.next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
  201040:	b082      	sub	sp, #8
  201042:	9001      	str	r0, [sp, #4]

  tp->queue.prev->queue.next = tp->queue.next;
  201044:	9b01      	ldr	r3, [sp, #4]
  201046:	685b      	ldr	r3, [r3, #4]
  201048:	9a01      	ldr	r2, [sp, #4]
  20104a:	6812      	ldr	r2, [r2, #0]
  20104c:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  20104e:	9b01      	ldr	r3, [sp, #4]
  201050:	681b      	ldr	r3, [r3, #0]
  201052:	9a01      	ldr	r2, [sp, #4]
  201054:	6852      	ldr	r2, [r2, #4]
  201056:	605a      	str	r2, [r3, #4]

  return tp;
  201058:	9b01      	ldr	r3, [sp, #4]
}
  20105a:	4618      	mov	r0, r3
  20105c:	b002      	add	sp, #8
  20105e:	4770      	bx	lr

00201060 <chSchIsRescRequiredI>:
 * @retval false        if rescheduling is not necessary.
 * @retval true         if there is a ready thread at higher priority.
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {
  201060:	b508      	push	{r3, lr}

  chDbgCheckClassI();
  201062:	f7ff fcad 	bl	2009c0 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
  201066:	4b06      	ldr	r3, [pc, #24]	; (201080 <chSchIsRescRequiredI+0x20>)
  201068:	681b      	ldr	r3, [r3, #0]
  20106a:	689a      	ldr	r2, [r3, #8]
  20106c:	4b04      	ldr	r3, [pc, #16]	; (201080 <chSchIsRescRequiredI+0x20>)
  20106e:	699b      	ldr	r3, [r3, #24]
  201070:	689b      	ldr	r3, [r3, #8]
  201072:	429a      	cmp	r2, r3
  201074:	bf8c      	ite	hi
  201076:	2301      	movhi	r3, #1
  201078:	2300      	movls	r3, #0
  20107a:	b2db      	uxtb	r3, r3
}
  20107c:	4618      	mov	r0, r3
  20107e:	bd08      	pop	{r3, pc}
  201080:	200008d8 	.word	0x200008d8
	...

00201090 <chSysLockFromISR.lto_priv.13>:
static inline void chSysLockFromISR(void) {
  201090:	b508      	push	{r3, lr}
  port_lock_from_isr();
  201092:	f7ff ff9d 	bl	200fd0 <port_lock_from_isr.lto_priv.26>
  _dbg_check_lock_from_isr();
  201096:	f7ff fc23 	bl	2008e0 <_dbg_check_lock_from_isr>
}
  20109a:	bd08      	pop	{r3, pc}
  20109c:	0000      	movs	r0, r0
	...

002010a0 <chSysUnlockFromISR.lto_priv.9>:
static inline void chSysUnlockFromISR(void) {
  2010a0:	b508      	push	{r3, lr}
  _dbg_check_unlock_from_isr();
  2010a2:	f7ff fc35 	bl	200910 <_dbg_check_unlock_from_isr>
  port_unlock_from_isr();
  2010a6:	f7ff ff9b 	bl	200fe0 <port_unlock_from_isr.lto_priv.19>
}
  2010aa:	bd08      	pop	{r3, pc}
  2010ac:	0000      	movs	r0, r0
	...

002010b0 <chVTIsArmedI>:
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {
  2010b0:	b500      	push	{lr}
  2010b2:	b083      	sub	sp, #12
  2010b4:	9001      	str	r0, [sp, #4]
  chDbgCheckClassI();
  2010b6:	f7ff fc83 	bl	2009c0 <chDbgCheckClassI>
  return (bool)(vtp->func != NULL);
  2010ba:	9b01      	ldr	r3, [sp, #4]
  2010bc:	68db      	ldr	r3, [r3, #12]
  2010be:	2b00      	cmp	r3, #0
  2010c0:	bf14      	ite	ne
  2010c2:	2301      	movne	r3, #1
  2010c4:	2300      	moveq	r3, #0
  2010c6:	b2db      	uxtb	r3, r3
}
  2010c8:	4618      	mov	r0, r3
  2010ca:	b003      	add	sp, #12
  2010cc:	f85d fb04 	ldr.w	pc, [sp], #4

002010d0 <chSemFastSignalI>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
  2010d0:	b500      	push	{lr}
  2010d2:	b083      	sub	sp, #12
  2010d4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
  2010d6:	f7ff fc73 	bl	2009c0 <chDbgCheckClassI>

  sp->cnt++;
  2010da:	9b01      	ldr	r3, [sp, #4]
  2010dc:	689b      	ldr	r3, [r3, #8]
  2010de:	1c5a      	adds	r2, r3, #1
  2010e0:	9b01      	ldr	r3, [sp, #4]
  2010e2:	609a      	str	r2, [r3, #8]
}
  2010e4:	b003      	add	sp, #12
  2010e6:	f85d fb04 	ldr.w	pc, [sp], #4
  2010ea:	bf00      	nop
  2010ec:	0000      	movs	r0, r0
	...

002010f0 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
  2010f0:	b508      	push	{r3, lr}

  queue_init(&ch.rlist.queue);
  2010f2:	4806      	ldr	r0, [pc, #24]	; (20110c <_scheduler_init+0x1c>)
  2010f4:	f7ff ff7c 	bl	200ff0 <queue_init.lto_priv.172>
  ch.rlist.prio = NOPRIO;
  2010f8:	4b04      	ldr	r3, [pc, #16]	; (20110c <_scheduler_init+0x1c>)
  2010fa:	2200      	movs	r2, #0
  2010fc:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
  2010fe:	4b03      	ldr	r3, [pc, #12]	; (20110c <_scheduler_init+0x1c>)
  201100:	4a02      	ldr	r2, [pc, #8]	; (20110c <_scheduler_init+0x1c>)
  201102:	611a      	str	r2, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  201104:	4b01      	ldr	r3, [pc, #4]	; (20110c <_scheduler_init+0x1c>)
  201106:	4a01      	ldr	r2, [pc, #4]	; (20110c <_scheduler_init+0x1c>)
  201108:	615a      	str	r2, [r3, #20]
#endif
}
  20110a:	bd08      	pop	{r3, pc}
  20110c:	200008d8 	.word	0x200008d8

00201110 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
  201110:	b500      	push	{lr}
  201112:	b085      	sub	sp, #20
  201114:	9001      	str	r0, [sp, #4]
  thread_t *cp;

  chDbgCheckClassI();
  201116:	f7ff fc53 	bl	2009c0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
  20111a:	9b01      	ldr	r3, [sp, #4]
  20111c:	2b00      	cmp	r3, #0
  20111e:	d102      	bne.n	201126 <chSchReadyI+0x16>
  201120:	4818      	ldr	r0, [pc, #96]	; (201184 <chSchReadyI+0x74>)
  201122:	f7ff fb55 	bl	2007d0 <chSysHalt>
  chDbgAssert((tp->state != CH_STATE_READY) &&
  201126:	9b01      	ldr	r3, [sp, #4]
  201128:	f893 3020 	ldrb.w	r3, [r3, #32]
  20112c:	2b00      	cmp	r3, #0
  20112e:	d004      	beq.n	20113a <chSchReadyI+0x2a>
  201130:	9b01      	ldr	r3, [sp, #4]
  201132:	f893 3020 	ldrb.w	r3, [r3, #32]
  201136:	2b0f      	cmp	r3, #15
  201138:	d102      	bne.n	201140 <chSchReadyI+0x30>
  20113a:	4812      	ldr	r0, [pc, #72]	; (201184 <chSchReadyI+0x74>)
  20113c:	f7ff fb48 	bl	2007d0 <chSysHalt>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
  201140:	9b01      	ldr	r3, [sp, #4]
  201142:	2200      	movs	r2, #0
  201144:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
  201148:	4b0f      	ldr	r3, [pc, #60]	; (201188 <chSchReadyI+0x78>)
  20114a:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
  20114c:	9b03      	ldr	r3, [sp, #12]
  20114e:	681b      	ldr	r3, [r3, #0]
  201150:	9303      	str	r3, [sp, #12]
  } while (cp->prio >= tp->prio);
  201152:	9b03      	ldr	r3, [sp, #12]
  201154:	689a      	ldr	r2, [r3, #8]
  201156:	9b01      	ldr	r3, [sp, #4]
  201158:	689b      	ldr	r3, [r3, #8]
  20115a:	429a      	cmp	r2, r3
  20115c:	d2f6      	bcs.n	20114c <chSchReadyI+0x3c>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  20115e:	9b01      	ldr	r3, [sp, #4]
  201160:	9a03      	ldr	r2, [sp, #12]
  201162:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
  201164:	9b03      	ldr	r3, [sp, #12]
  201166:	685a      	ldr	r2, [r3, #4]
  201168:	9b01      	ldr	r3, [sp, #4]
  20116a:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  20116c:	9b01      	ldr	r3, [sp, #4]
  20116e:	685b      	ldr	r3, [r3, #4]
  201170:	9a01      	ldr	r2, [sp, #4]
  201172:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
  201174:	9b03      	ldr	r3, [sp, #12]
  201176:	9a01      	ldr	r2, [sp, #4]
  201178:	605a      	str	r2, [r3, #4]

  return tp;
  20117a:	9b01      	ldr	r3, [sp, #4]
}
  20117c:	4618      	mov	r0, r3
  20117e:	b005      	add	sp, #20
  201180:	f85d fb04 	ldr.w	pc, [sp], #4
  201184:	08004a60 	.word	0x08004a60
  201188:	200008d8 	.word	0x200008d8
  20118c:	00000000 	.word	0x00000000

00201190 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
  201190:	b500      	push	{lr}
  201192:	b085      	sub	sp, #20
  201194:	9001      	str	r0, [sp, #4]
  thread_t *cp;

  chDbgCheckClassI();
  201196:	f7ff fc13 	bl	2009c0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
  20119a:	9b01      	ldr	r3, [sp, #4]
  20119c:	2b00      	cmp	r3, #0
  20119e:	d102      	bne.n	2011a6 <chSchReadyAheadI+0x16>
  2011a0:	4818      	ldr	r0, [pc, #96]	; (201204 <chSchReadyAheadI+0x74>)
  2011a2:	f7ff fb15 	bl	2007d0 <chSysHalt>
  chDbgAssert((tp->state != CH_STATE_READY) &&
  2011a6:	9b01      	ldr	r3, [sp, #4]
  2011a8:	f893 3020 	ldrb.w	r3, [r3, #32]
  2011ac:	2b00      	cmp	r3, #0
  2011ae:	d004      	beq.n	2011ba <chSchReadyAheadI+0x2a>
  2011b0:	9b01      	ldr	r3, [sp, #4]
  2011b2:	f893 3020 	ldrb.w	r3, [r3, #32]
  2011b6:	2b0f      	cmp	r3, #15
  2011b8:	d102      	bne.n	2011c0 <chSchReadyAheadI+0x30>
  2011ba:	4812      	ldr	r0, [pc, #72]	; (201204 <chSchReadyAheadI+0x74>)
  2011bc:	f7ff fb08 	bl	2007d0 <chSysHalt>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
  2011c0:	9b01      	ldr	r3, [sp, #4]
  2011c2:	2200      	movs	r2, #0
  2011c4:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
  2011c8:	4b0f      	ldr	r3, [pc, #60]	; (201208 <chSchReadyAheadI+0x78>)
  2011ca:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
  2011cc:	9b03      	ldr	r3, [sp, #12]
  2011ce:	681b      	ldr	r3, [r3, #0]
  2011d0:	9303      	str	r3, [sp, #12]
  } while (cp->prio > tp->prio);
  2011d2:	9b03      	ldr	r3, [sp, #12]
  2011d4:	689a      	ldr	r2, [r3, #8]
  2011d6:	9b01      	ldr	r3, [sp, #4]
  2011d8:	689b      	ldr	r3, [r3, #8]
  2011da:	429a      	cmp	r2, r3
  2011dc:	d8f6      	bhi.n	2011cc <chSchReadyAheadI+0x3c>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  2011de:	9b01      	ldr	r3, [sp, #4]
  2011e0:	9a03      	ldr	r2, [sp, #12]
  2011e2:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
  2011e4:	9b03      	ldr	r3, [sp, #12]
  2011e6:	685a      	ldr	r2, [r3, #4]
  2011e8:	9b01      	ldr	r3, [sp, #4]
  2011ea:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  2011ec:	9b01      	ldr	r3, [sp, #4]
  2011ee:	685b      	ldr	r3, [r3, #4]
  2011f0:	9a01      	ldr	r2, [sp, #4]
  2011f2:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
  2011f4:	9b03      	ldr	r3, [sp, #12]
  2011f6:	9a01      	ldr	r2, [sp, #4]
  2011f8:	605a      	str	r2, [r3, #4]

  return tp;
  2011fa:	9b01      	ldr	r3, [sp, #4]
}
  2011fc:	4618      	mov	r0, r3
  2011fe:	b005      	add	sp, #20
  201200:	f85d fb04 	ldr.w	pc, [sp], #4
  201204:	08004a6c 	.word	0x08004a6c
  201208:	200008d8 	.word	0x200008d8
  20120c:	00000000 	.word	0x00000000

00201210 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  201210:	b510      	push	{r4, lr}
  201212:	b084      	sub	sp, #16
  201214:	4603      	mov	r3, r0
  201216:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *otp = currp;
  20121a:	4b19      	ldr	r3, [pc, #100]	; (201280 <chSchGoSleepS+0x70>)
  20121c:	699b      	ldr	r3, [r3, #24]
  20121e:	9303      	str	r3, [sp, #12]

  chDbgCheckClassS();
  201220:	f7ff fbe6 	bl	2009f0 <chDbgCheckClassS>

  /* New state.*/
  otp->state = newstate;
  201224:	9b03      	ldr	r3, [sp, #12]
  201226:	f89d 2007 	ldrb.w	r2, [sp, #7]
  20122a:	f883 2020 	strb.w	r2, [r3, #32]
     time quantum when it will wakeup.*/
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  20122e:	4814      	ldr	r0, [pc, #80]	; (201280 <chSchGoSleepS+0x70>)
  201230:	f7ff feee 	bl	201010 <queue_fifo_remove.lto_priv.221>
  201234:	4602      	mov	r2, r0
  201236:	4b12      	ldr	r3, [pc, #72]	; (201280 <chSchGoSleepS+0x70>)
  201238:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
  20123a:	4b11      	ldr	r3, [pc, #68]	; (201280 <chSchGoSleepS+0x70>)
  20123c:	699b      	ldr	r3, [r3, #24]
  20123e:	2201      	movs	r2, #1
  201240:	f883 2020 	strb.w	r2, [r3, #32]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  201244:	4b0e      	ldr	r3, [pc, #56]	; (201280 <chSchGoSleepS+0x70>)
  201246:	699b      	ldr	r3, [r3, #24]
  201248:	9903      	ldr	r1, [sp, #12]
  20124a:	4618      	mov	r0, r3
  20124c:	f7ff fc80 	bl	200b50 <_trace_switch>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  201250:	f3ef 8309 	mrs	r3, PSP
  201254:	461c      	mov	r4, r3
  return(result);
  201256:	4623      	mov	r3, r4
  201258:	9302      	str	r3, [sp, #8]
  20125a:	9b02      	ldr	r3, [sp, #8]
  20125c:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  201260:	9b03      	ldr	r3, [sp, #12]
  201262:	69db      	ldr	r3, [r3, #28]
  201264:	429a      	cmp	r2, r3
  201266:	d202      	bcs.n	20126e <chSchGoSleepS+0x5e>
  201268:	4806      	ldr	r0, [pc, #24]	; (201284 <chSchGoSleepS+0x74>)
  20126a:	f7ff fab1 	bl	2007d0 <chSysHalt>
  20126e:	4b04      	ldr	r3, [pc, #16]	; (201280 <chSchGoSleepS+0x70>)
  201270:	699b      	ldr	r3, [r3, #24]
  201272:	9903      	ldr	r1, [sp, #12]
  201274:	4618      	mov	r0, r3
  201276:	f7ff f82f 	bl	2002d8 <_port_switch>
}
  20127a:	b004      	add	sp, #16
  20127c:	bd10      	pop	{r4, pc}
  20127e:	bf00      	nop
  201280:	200008d8 	.word	0x200008d8
  201284:	08004a50 	.word	0x08004a50
	...

00201290 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
  201290:	b500      	push	{lr}
  201292:	b085      	sub	sp, #20
  201294:	9001      	str	r0, [sp, #4]
  thread_t *tp = (thread_t *)p;
  201296:	9b01      	ldr	r3, [sp, #4]
  201298:	9303      	str	r3, [sp, #12]

  chSysLockFromISR();
  20129a:	f7ff fef9 	bl	201090 <chSysLockFromISR.lto_priv.13>
  switch (tp->state) {
  20129e:	9b03      	ldr	r3, [sp, #12]
  2012a0:	f893 3020 	ldrb.w	r3, [r3, #32]
  2012a4:	2b07      	cmp	r3, #7
  2012a6:	d823      	bhi.n	2012f0 <wakeup+0x60>
  2012a8:	a201      	add	r2, pc, #4	; (adr r2, 2012b0 <wakeup+0x20>)
  2012aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  2012ae:	bf00      	nop
  2012b0:	002012d1 	.word	0x002012d1
  2012b4:	002012f1 	.word	0x002012f1
  2012b8:	002012f1 	.word	0x002012f1
  2012bc:	002012d7 	.word	0x002012d7
  2012c0:	002012eb 	.word	0x002012eb
  2012c4:	002012e1 	.word	0x002012e1
  2012c8:	002012f1 	.word	0x002012f1
  2012cc:	002012eb 	.word	0x002012eb
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
  2012d0:	f7ff fee6 	bl	2010a0 <chSysUnlockFromISR.lto_priv.9>
  2012d4:	e015      	b.n	201302 <wakeup+0x72>
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
  2012d6:	9b03      	ldr	r3, [sp, #12]
  2012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  2012da:	2200      	movs	r2, #0
  2012dc:	601a      	str	r2, [r3, #0]
  2012de:	e007      	b.n	2012f0 <wakeup+0x60>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
  2012e0:	9b03      	ldr	r3, [sp, #12]
  2012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  2012e4:	4618      	mov	r0, r3
  2012e6:	f7ff fef3 	bl	2010d0 <chSemFastSignalI>
    /* Falls through.*/
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
  2012ea:	9803      	ldr	r0, [sp, #12]
  2012ec:	f7ff fea8 	bl	201040 <queue_dequeue.lto_priv.242>
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  2012f0:	9b03      	ldr	r3, [sp, #12]
  2012f2:	f04f 32ff 	mov.w	r2, #4294967295
  2012f6:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2012f8:	9803      	ldr	r0, [sp, #12]
  2012fa:	f7ff ff09 	bl	201110 <chSchReadyI>
  chSysUnlockFromISR();
  2012fe:	f7ff fecf 	bl	2010a0 <chSysUnlockFromISR.lto_priv.9>
}
  201302:	b005      	add	sp, #20
  201304:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201310 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201310:	b500      	push	{lr}
  201312:	b089      	sub	sp, #36	; 0x24
  201314:	4603      	mov	r3, r0
  201316:	9100      	str	r1, [sp, #0]
  201318:	f88d 3007 	strb.w	r3, [sp, #7]

  chDbgCheckClassS();
  20131c:	f7ff fb68 	bl	2009f0 <chDbgCheckClassS>

  if (TIME_INFINITE != time) {
  201320:	9b00      	ldr	r3, [sp, #0]
  201322:	f1b3 3fff 	cmp.w	r3, #4294967295
  201326:	d017      	beq.n	201358 <chSchGoSleepTimeoutS+0x48>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
  201328:	4b11      	ldr	r3, [pc, #68]	; (201370 <chSchGoSleepTimeoutS+0x60>)
  20132a:	699b      	ldr	r3, [r3, #24]
  20132c:	a803      	add	r0, sp, #12
  20132e:	4a11      	ldr	r2, [pc, #68]	; (201374 <chSchGoSleepTimeoutS+0x64>)
  201330:	9900      	ldr	r1, [sp, #0]
  201332:	f7ff fd0d 	bl	200d50 <chVTDoSetI>
    chSchGoSleepS(newstate);
  201336:	f89d 3007 	ldrb.w	r3, [sp, #7]
  20133a:	4618      	mov	r0, r3
  20133c:	f7ff ff68 	bl	201210 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  201340:	ab03      	add	r3, sp, #12
  201342:	4618      	mov	r0, r3
  201344:	f7ff feb4 	bl	2010b0 <chVTIsArmedI>
  201348:	4603      	mov	r3, r0
  20134a:	2b00      	cmp	r3, #0
  20134c:	d009      	beq.n	201362 <chSchGoSleepTimeoutS+0x52>
      chVTDoResetI(&vt);
  20134e:	ab03      	add	r3, sp, #12
  201350:	4618      	mov	r0, r3
  201352:	f7ff fda5 	bl	200ea0 <chVTDoResetI>
  201356:	e004      	b.n	201362 <chSchGoSleepTimeoutS+0x52>
    }
  }
  else {
    chSchGoSleepS(newstate);
  201358:	f89d 3007 	ldrb.w	r3, [sp, #7]
  20135c:	4618      	mov	r0, r3
  20135e:	f7ff ff57 	bl	201210 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
  201362:	4b03      	ldr	r3, [pc, #12]	; (201370 <chSchGoSleepTimeoutS+0x60>)
  201364:	699b      	ldr	r3, [r3, #24]
  201366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  201368:	4618      	mov	r0, r3
  20136a:	b009      	add	sp, #36	; 0x24
  20136c:	f85d fb04 	ldr.w	pc, [sp], #4
  201370:	200008d8 	.word	0x200008d8
  201374:	00201291 	.word	0x00201291
	...

00201380 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  201380:	b510      	push	{r4, lr}
  201382:	b084      	sub	sp, #16
  201384:	9001      	str	r0, [sp, #4]
  201386:	9100      	str	r1, [sp, #0]
  thread_t *otp = currp;
  201388:	4b22      	ldr	r3, [pc, #136]	; (201414 <chSchWakeupS+0x94>)
  20138a:	699b      	ldr	r3, [r3, #24]
  20138c:	9303      	str	r3, [sp, #12]

  chDbgCheckClassS();
  20138e:	f7ff fb2f 	bl	2009f0 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
  201392:	4b20      	ldr	r3, [pc, #128]	; (201414 <chSchWakeupS+0x94>)
  201394:	681b      	ldr	r3, [r3, #0]
  201396:	4a1f      	ldr	r2, [pc, #124]	; (201414 <chSchWakeupS+0x94>)
  201398:	4293      	cmp	r3, r2
  20139a:	d00a      	beq.n	2013b2 <chSchWakeupS+0x32>
  20139c:	4b1d      	ldr	r3, [pc, #116]	; (201414 <chSchWakeupS+0x94>)
  20139e:	699b      	ldr	r3, [r3, #24]
  2013a0:	689a      	ldr	r2, [r3, #8]
  2013a2:	4b1c      	ldr	r3, [pc, #112]	; (201414 <chSchWakeupS+0x94>)
  2013a4:	681b      	ldr	r3, [r3, #0]
  2013a6:	689b      	ldr	r3, [r3, #8]
  2013a8:	429a      	cmp	r2, r3
  2013aa:	d202      	bcs.n	2013b2 <chSchWakeupS+0x32>
  2013ac:	481a      	ldr	r0, [pc, #104]	; (201418 <chSchWakeupS+0x98>)
  2013ae:	f7ff fa0f 	bl	2007d0 <chSysHalt>
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
  2013b2:	9b01      	ldr	r3, [sp, #4]
  2013b4:	9a00      	ldr	r2, [sp, #0]
  2013b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
  2013b8:	9b01      	ldr	r3, [sp, #4]
  2013ba:	689a      	ldr	r2, [r3, #8]
  2013bc:	9b03      	ldr	r3, [sp, #12]
  2013be:	689b      	ldr	r3, [r3, #8]
  2013c0:	429a      	cmp	r2, r3
  2013c2:	d803      	bhi.n	2013cc <chSchWakeupS+0x4c>
    (void) chSchReadyI(ntp);
  2013c4:	9801      	ldr	r0, [sp, #4]
  2013c6:	f7ff fea3 	bl	201110 <chSchReadyI>
  2013ca:	e021      	b.n	201410 <chSchWakeupS+0x90>
  }
  else {
    otp = chSchReadyI(otp);
  2013cc:	9803      	ldr	r0, [sp, #12]
  2013ce:	f7ff fe9f 	bl	201110 <chSchReadyI>
  2013d2:	9003      	str	r0, [sp, #12]
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
  2013d4:	4a0f      	ldr	r2, [pc, #60]	; (201414 <chSchWakeupS+0x94>)
  2013d6:	9b01      	ldr	r3, [sp, #4]
  2013d8:	6193      	str	r3, [r2, #24]
    ntp->state = CH_STATE_CURRENT;
  2013da:	9b01      	ldr	r3, [sp, #4]
  2013dc:	2201      	movs	r2, #1
  2013de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  2013e2:	9903      	ldr	r1, [sp, #12]
  2013e4:	9801      	ldr	r0, [sp, #4]
  2013e6:	f7ff fbb3 	bl	200b50 <_trace_switch>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2013ea:	f3ef 8309 	mrs	r3, PSP
  2013ee:	461c      	mov	r4, r3
  return(result);
  2013f0:	4623      	mov	r3, r4
  2013f2:	9302      	str	r3, [sp, #8]
  2013f4:	9b02      	ldr	r3, [sp, #8]
  2013f6:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  2013fa:	9b03      	ldr	r3, [sp, #12]
  2013fc:	69db      	ldr	r3, [r3, #28]
  2013fe:	429a      	cmp	r2, r3
  201400:	d202      	bcs.n	201408 <chSchWakeupS+0x88>
  201402:	4806      	ldr	r0, [pc, #24]	; (20141c <chSchWakeupS+0x9c>)
  201404:	f7ff f9e4 	bl	2007d0 <chSysHalt>
  201408:	9903      	ldr	r1, [sp, #12]
  20140a:	9801      	ldr	r0, [sp, #4]
  20140c:	f7fe ff64 	bl	2002d8 <_port_switch>
  }
}
  201410:	b004      	add	sp, #16
  201412:	bd10      	pop	{r4, pc}
  201414:	200008d8 	.word	0x200008d8
  201418:	08004a80 	.word	0x08004a80
  20141c:	08004a50 	.word	0x08004a50

00201420 <chSchRescheduleS>:
 * @details If a thread with a higher priority than the current thread is in
 *          the ready list then make the higher priority thread running.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
  201420:	b508      	push	{r3, lr}

  chDbgCheckClassS();
  201422:	f7ff fae5 	bl	2009f0 <chDbgCheckClassS>

  if (chSchIsRescRequiredI()) {
  201426:	f7ff fe1b 	bl	201060 <chSchIsRescRequiredI>
  20142a:	4603      	mov	r3, r0
  20142c:	2b00      	cmp	r3, #0
  20142e:	d001      	beq.n	201434 <chSchRescheduleS+0x14>
    chSchDoRescheduleAhead();
  201430:	f000 f81e 	bl	201470 <chSchDoRescheduleAhead>
  }
}
  201434:	bd08      	pop	{r3, pc}
  201436:	bf00      	nop
	...

00201440 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  201440:	b082      	sub	sp, #8
  tprio_t p1 = firstprio(&ch.rlist.queue);
  201442:	4b09      	ldr	r3, [pc, #36]	; (201468 <chSchIsPreemptionRequired+0x28>)
  201444:	681b      	ldr	r3, [r3, #0]
  201446:	689b      	ldr	r3, [r3, #8]
  201448:	9301      	str	r3, [sp, #4]
  tprio_t p2 = currp->prio;
  20144a:	4b07      	ldr	r3, [pc, #28]	; (201468 <chSchIsPreemptionRequired+0x28>)
  20144c:	699b      	ldr	r3, [r3, #24]
  20144e:	689b      	ldr	r3, [r3, #8]
  201450:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
  201452:	9a01      	ldr	r2, [sp, #4]
  201454:	9b00      	ldr	r3, [sp, #0]
  201456:	429a      	cmp	r2, r3
  201458:	bf8c      	ite	hi
  20145a:	2301      	movhi	r3, #1
  20145c:	2300      	movls	r3, #0
  20145e:	b2db      	uxtb	r3, r3
#endif
}
  201460:	4618      	mov	r0, r3
  201462:	b002      	add	sp, #8
  201464:	4770      	bx	lr
  201466:	bf00      	nop
  201468:	200008d8 	.word	0x200008d8
  20146c:	00000000 	.word	0x00000000

00201470 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  201470:	b510      	push	{r4, lr}
  201472:	b082      	sub	sp, #8
  thread_t *otp = currp;
  201474:	4b17      	ldr	r3, [pc, #92]	; (2014d4 <chSchDoRescheduleAhead+0x64>)
  201476:	699b      	ldr	r3, [r3, #24]
  201478:	9301      	str	r3, [sp, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  20147a:	4816      	ldr	r0, [pc, #88]	; (2014d4 <chSchDoRescheduleAhead+0x64>)
  20147c:	f7ff fdc8 	bl	201010 <queue_fifo_remove.lto_priv.221>
  201480:	4602      	mov	r2, r0
  201482:	4b14      	ldr	r3, [pc, #80]	; (2014d4 <chSchDoRescheduleAhead+0x64>)
  201484:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
  201486:	4b13      	ldr	r3, [pc, #76]	; (2014d4 <chSchDoRescheduleAhead+0x64>)
  201488:	699b      	ldr	r3, [r3, #24]
  20148a:	2201      	movs	r2, #1
  20148c:	f883 2020 	strb.w	r2, [r3, #32]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
  201490:	9801      	ldr	r0, [sp, #4]
  201492:	f7ff fe7d 	bl	201190 <chSchReadyAheadI>
  201496:	9001      	str	r0, [sp, #4]

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  201498:	4b0e      	ldr	r3, [pc, #56]	; (2014d4 <chSchDoRescheduleAhead+0x64>)
  20149a:	699b      	ldr	r3, [r3, #24]
  20149c:	9901      	ldr	r1, [sp, #4]
  20149e:	4618      	mov	r0, r3
  2014a0:	f7ff fb56 	bl	200b50 <_trace_switch>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2014a4:	f3ef 8309 	mrs	r3, PSP
  2014a8:	461c      	mov	r4, r3
  return(result);
  2014aa:	4623      	mov	r3, r4
  2014ac:	9300      	str	r3, [sp, #0]
  2014ae:	9b00      	ldr	r3, [sp, #0]
  2014b0:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  2014b4:	9b01      	ldr	r3, [sp, #4]
  2014b6:	69db      	ldr	r3, [r3, #28]
  2014b8:	429a      	cmp	r2, r3
  2014ba:	d202      	bcs.n	2014c2 <chSchDoRescheduleAhead+0x52>
  2014bc:	4806      	ldr	r0, [pc, #24]	; (2014d8 <chSchDoRescheduleAhead+0x68>)
  2014be:	f7ff f987 	bl	2007d0 <chSysHalt>
  2014c2:	4b04      	ldr	r3, [pc, #16]	; (2014d4 <chSchDoRescheduleAhead+0x64>)
  2014c4:	699b      	ldr	r3, [r3, #24]
  2014c6:	9901      	ldr	r1, [sp, #4]
  2014c8:	4618      	mov	r0, r3
  2014ca:	f7fe ff05 	bl	2002d8 <_port_switch>
}
  2014ce:	b002      	add	sp, #8
  2014d0:	bd10      	pop	{r4, pc}
  2014d2:	bf00      	nop
  2014d4:	200008d8 	.word	0x200008d8
  2014d8:	08004a50 	.word	0x08004a50
  2014dc:	00000000 	.word	0x00000000

002014e0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  2014e0:	b510      	push	{r4, lr}
  2014e2:	b082      	sub	sp, #8
  thread_t *otp = currp;
  2014e4:	4b17      	ldr	r3, [pc, #92]	; (201544 <chSchDoReschedule+0x64>)
  2014e6:	699b      	ldr	r3, [r3, #24]
  2014e8:	9301      	str	r3, [sp, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  2014ea:	4816      	ldr	r0, [pc, #88]	; (201544 <chSchDoReschedule+0x64>)
  2014ec:	f7ff fd90 	bl	201010 <queue_fifo_remove.lto_priv.221>
  2014f0:	4602      	mov	r2, r0
  2014f2:	4b14      	ldr	r3, [pc, #80]	; (201544 <chSchDoReschedule+0x64>)
  2014f4:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
  2014f6:	4b13      	ldr	r3, [pc, #76]	; (201544 <chSchDoReschedule+0x64>)
  2014f8:	699b      	ldr	r3, [r3, #24]
  2014fa:	2201      	movs	r2, #1
  2014fc:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
  201500:	9801      	ldr	r0, [sp, #4]
  201502:	f7ff fe45 	bl	201190 <chSchReadyAheadI>
  201506:	9001      	str	r0, [sp, #4]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  201508:	4b0e      	ldr	r3, [pc, #56]	; (201544 <chSchDoReschedule+0x64>)
  20150a:	699b      	ldr	r3, [r3, #24]
  20150c:	9901      	ldr	r1, [sp, #4]
  20150e:	4618      	mov	r0, r3
  201510:	f7ff fb1e 	bl	200b50 <_trace_switch>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  201514:	f3ef 8309 	mrs	r3, PSP
  201518:	461c      	mov	r4, r3
  return(result);
  20151a:	4623      	mov	r3, r4
  20151c:	9300      	str	r3, [sp, #0]
  20151e:	9b00      	ldr	r3, [sp, #0]
  201520:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  201524:	9b01      	ldr	r3, [sp, #4]
  201526:	69db      	ldr	r3, [r3, #28]
  201528:	429a      	cmp	r2, r3
  20152a:	d202      	bcs.n	201532 <chSchDoReschedule+0x52>
  20152c:	4806      	ldr	r0, [pc, #24]	; (201548 <chSchDoReschedule+0x68>)
  20152e:	f7ff f94f 	bl	2007d0 <chSysHalt>
  201532:	4b04      	ldr	r3, [pc, #16]	; (201544 <chSchDoReschedule+0x64>)
  201534:	699b      	ldr	r3, [r3, #24]
  201536:	9901      	ldr	r1, [sp, #4]
  201538:	4618      	mov	r0, r3
  20153a:	f7fe fecd 	bl	2002d8 <_port_switch>
}
  20153e:	b002      	add	sp, #8
  201540:	bd10      	pop	{r4, pc}
  201542:	bf00      	nop
  201544:	200008d8 	.word	0x200008d8
  201548:	08004a50 	.word	0x08004a50
  20154c:	00000000 	.word	0x00000000

00201550 <port_lock.lto_priv.58>:
static inline void port_lock(void) {
  201550:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  201552:	b672      	cpsid	i
  201554:	2320      	movs	r3, #32
  201556:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201558:	9b01      	ldr	r3, [sp, #4]
  20155a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  20155e:	b662      	cpsie	i
}
  201560:	b002      	add	sp, #8
  201562:	4770      	bx	lr
	...

00201570 <port_unlock.lto_priv.34>:
static inline void port_unlock(void) {
  201570:	b082      	sub	sp, #8
  201572:	2300      	movs	r3, #0
  201574:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201576:	9b01      	ldr	r3, [sp, #4]
  201578:	f383 8811 	msr	BASEPRI, r3
}
  20157c:	b002      	add	sp, #8
  20157e:	4770      	bx	lr

00201580 <list_init>:
static inline void list_init(threads_list_t *tlp) {
  201580:	b082      	sub	sp, #8
  201582:	9001      	str	r0, [sp, #4]
  tlp->next = (thread_t *)tlp;
  201584:	9b01      	ldr	r3, [sp, #4]
  201586:	9a01      	ldr	r2, [sp, #4]
  201588:	601a      	str	r2, [r3, #0]
}
  20158a:	b002      	add	sp, #8
  20158c:	4770      	bx	lr
  20158e:	bf00      	nop

00201590 <list_notempty>:
static inline bool list_notempty(threads_list_t *tlp) {
  201590:	b082      	sub	sp, #8
  201592:	9001      	str	r0, [sp, #4]
  return (bool)(tlp->next != (thread_t *)tlp);
  201594:	9b01      	ldr	r3, [sp, #4]
  201596:	681b      	ldr	r3, [r3, #0]
  201598:	9a01      	ldr	r2, [sp, #4]
  20159a:	429a      	cmp	r2, r3
  20159c:	bf14      	ite	ne
  20159e:	2301      	movne	r3, #1
  2015a0:	2300      	moveq	r3, #0
  2015a2:	b2db      	uxtb	r3, r3
}
  2015a4:	4618      	mov	r0, r3
  2015a6:	b002      	add	sp, #8
  2015a8:	4770      	bx	lr
  2015aa:	bf00      	nop
  2015ac:	0000      	movs	r0, r0
	...

002015b0 <queue_init.lto_priv.173>:
static inline void queue_init(threads_queue_t *tqp) {
  2015b0:	b082      	sub	sp, #8
  2015b2:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
  2015b4:	9b01      	ldr	r3, [sp, #4]
  2015b6:	9a01      	ldr	r2, [sp, #4]
  2015b8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  2015ba:	9b01      	ldr	r3, [sp, #4]
  2015bc:	9a01      	ldr	r2, [sp, #4]
  2015be:	605a      	str	r2, [r3, #4]
}
  2015c0:	b002      	add	sp, #8
  2015c2:	4770      	bx	lr
	...

002015d0 <queue_notempty.lto_priv.238>:
static inline bool queue_notempty(const threads_queue_t *tqp) {
  2015d0:	b082      	sub	sp, #8
  2015d2:	9001      	str	r0, [sp, #4]
  return (bool)(tqp->next != (const thread_t *)tqp);
  2015d4:	9b01      	ldr	r3, [sp, #4]
  2015d6:	681b      	ldr	r3, [r3, #0]
  2015d8:	9a01      	ldr	r2, [sp, #4]
  2015da:	429a      	cmp	r2, r3
  2015dc:	bf14      	ite	ne
  2015de:	2301      	movne	r3, #1
  2015e0:	2300      	moveq	r3, #0
  2015e2:	b2db      	uxtb	r3, r3
}
  2015e4:	4618      	mov	r0, r3
  2015e6:	b002      	add	sp, #8
  2015e8:	4770      	bx	lr
  2015ea:	bf00      	nop
  2015ec:	0000      	movs	r0, r0
	...

002015f0 <list_remove>:
static inline thread_t *list_remove(threads_list_t *tlp) {
  2015f0:	b084      	sub	sp, #16
  2015f2:	9001      	str	r0, [sp, #4]
  thread_t *tp = tlp->next;
  2015f4:	9b01      	ldr	r3, [sp, #4]
  2015f6:	681b      	ldr	r3, [r3, #0]
  2015f8:	9303      	str	r3, [sp, #12]
  tlp->next = tp->queue.next;
  2015fa:	9b03      	ldr	r3, [sp, #12]
  2015fc:	681a      	ldr	r2, [r3, #0]
  2015fe:	9b01      	ldr	r3, [sp, #4]
  201600:	601a      	str	r2, [r3, #0]
  return tp;
  201602:	9b03      	ldr	r3, [sp, #12]
}
  201604:	4618      	mov	r0, r3
  201606:	b004      	add	sp, #16
  201608:	4770      	bx	lr
  20160a:	bf00      	nop
  20160c:	0000      	movs	r0, r0
	...

00201610 <queue_insert.lto_priv.227>:
static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
  201610:	b082      	sub	sp, #8
  201612:	9001      	str	r0, [sp, #4]
  201614:	9100      	str	r1, [sp, #0]
  tp->queue.next             = (thread_t *)tqp;
  201616:	9b01      	ldr	r3, [sp, #4]
  201618:	9a00      	ldr	r2, [sp, #0]
  20161a:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = tqp->prev;
  20161c:	9b00      	ldr	r3, [sp, #0]
  20161e:	685a      	ldr	r2, [r3, #4]
  201620:	9b01      	ldr	r3, [sp, #4]
  201622:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  201624:	9b01      	ldr	r3, [sp, #4]
  201626:	685b      	ldr	r3, [r3, #4]
  201628:	9a01      	ldr	r2, [sp, #4]
  20162a:	601a      	str	r2, [r3, #0]
  tqp->prev                  = tp;
  20162c:	9b00      	ldr	r3, [sp, #0]
  20162e:	9a01      	ldr	r2, [sp, #4]
  201630:	605a      	str	r2, [r3, #4]
}
  201632:	b002      	add	sp, #8
  201634:	4770      	bx	lr
  201636:	bf00      	nop
	...

00201640 <queue_fifo_remove.lto_priv.222>:
static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  201640:	b084      	sub	sp, #16
  201642:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
  201644:	9b01      	ldr	r3, [sp, #4]
  201646:	681b      	ldr	r3, [r3, #0]
  201648:	9303      	str	r3, [sp, #12]
  tqp->next             = tp->queue.next;
  20164a:	9b03      	ldr	r3, [sp, #12]
  20164c:	681a      	ldr	r2, [r3, #0]
  20164e:	9b01      	ldr	r3, [sp, #4]
  201650:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201652:	9b01      	ldr	r3, [sp, #4]
  201654:	681b      	ldr	r3, [r3, #0]
  201656:	9a01      	ldr	r2, [sp, #4]
  201658:	605a      	str	r2, [r3, #4]
  return tp;
  20165a:	9b03      	ldr	r3, [sp, #12]
}
  20165c:	4618      	mov	r0, r3
  20165e:	b004      	add	sp, #16
  201660:	4770      	bx	lr
  201662:	bf00      	nop
	...

00201670 <chSysLock.lto_priv.133>:
static inline void chSysLock(void) {
  201670:	b508      	push	{r3, lr}
  port_lock();
  201672:	f7ff ff6d 	bl	201550 <port_lock.lto_priv.58>
  _dbg_check_lock();
  201676:	f7ff f903 	bl	200880 <_dbg_check_lock>
}
  20167a:	bd08      	pop	{r3, pc}
  20167c:	0000      	movs	r0, r0
	...

00201680 <chSysUnlock.lto_priv.97>:
static inline void chSysUnlock(void) {
  201680:	b508      	push	{r3, lr}
  _dbg_check_unlock();
  201682:	f7ff f915 	bl	2008b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
  201686:	4b09      	ldr	r3, [pc, #36]	; (2016ac <chSysUnlock.lto_priv.97+0x2c>)
  201688:	681b      	ldr	r3, [r3, #0]
  20168a:	4a08      	ldr	r2, [pc, #32]	; (2016ac <chSysUnlock.lto_priv.97+0x2c>)
  20168c:	4293      	cmp	r3, r2
  20168e:	d00a      	beq.n	2016a6 <chSysUnlock.lto_priv.97+0x26>
  201690:	4b06      	ldr	r3, [pc, #24]	; (2016ac <chSysUnlock.lto_priv.97+0x2c>)
  201692:	699b      	ldr	r3, [r3, #24]
  201694:	689a      	ldr	r2, [r3, #8]
  201696:	4b05      	ldr	r3, [pc, #20]	; (2016ac <chSysUnlock.lto_priv.97+0x2c>)
  201698:	681b      	ldr	r3, [r3, #0]
  20169a:	689b      	ldr	r3, [r3, #8]
  20169c:	429a      	cmp	r2, r3
  20169e:	d202      	bcs.n	2016a6 <chSysUnlock.lto_priv.97+0x26>
  2016a0:	4803      	ldr	r0, [pc, #12]	; (2016b0 <chSysUnlock.lto_priv.97+0x30>)
  2016a2:	f7ff f895 	bl	2007d0 <chSysHalt>
  port_unlock();
  2016a6:	f7ff ff63 	bl	201570 <port_unlock.lto_priv.34>
}
  2016aa:	bd08      	pop	{r3, pc}
  2016ac:	200008d8 	.word	0x200008d8
  2016b0:	08004aa8 	.word	0x08004aa8
	...

002016c0 <chThdGetWorkingAreaX.lto_priv.246>:
 * @param[in] tp        pointer to the thread
 * @return              The working area base pointer.
 *
 * @xclass
 */
static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
  2016c0:	b082      	sub	sp, #8
  2016c2:	9001      	str	r0, [sp, #4]

  return tp->wabase;
  2016c4:	9b01      	ldr	r3, [sp, #4]
  2016c6:	69db      	ldr	r3, [r3, #28]
}
  2016c8:	4618      	mov	r0, r3
  2016ca:	b002      	add	sp, #8
  2016cc:	4770      	bx	lr
  2016ce:	bf00      	nop

002016d0 <chThdSleepS>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {
  2016d0:	b500      	push	{lr}
  2016d2:	b083      	sub	sp, #12
  2016d4:	9001      	str	r0, [sp, #4]

  chDbgCheck(time != TIME_IMMEDIATE);
  2016d6:	9b01      	ldr	r3, [sp, #4]
  2016d8:	2b00      	cmp	r3, #0
  2016da:	d102      	bne.n	2016e2 <chThdSleepS+0x12>
  2016dc:	4804      	ldr	r0, [pc, #16]	; (2016f0 <chThdSleepS+0x20>)
  2016de:	f7ff f877 	bl	2007d0 <chSysHalt>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  2016e2:	9901      	ldr	r1, [sp, #4]
  2016e4:	2008      	movs	r0, #8
  2016e6:	f7ff fe13 	bl	201310 <chSchGoSleepTimeoutS>
}
  2016ea:	b003      	add	sp, #12
  2016ec:	f85d fb04 	ldr.w	pc, [sp], #4
  2016f0:	08004adc 	.word	0x08004adc
	...

00201700 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  201700:	b500      	push	{lr}
  201702:	b085      	sub	sp, #20
  201704:	9001      	str	r0, [sp, #4]
  201706:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");
  201708:	9801      	ldr	r0, [sp, #4]
  20170a:	f7ff ff61 	bl	2015d0 <queue_notempty.lto_priv.238>
  20170e:	4603      	mov	r3, r0
  201710:	f083 0301 	eor.w	r3, r3, #1
  201714:	b2db      	uxtb	r3, r3
  201716:	2b00      	cmp	r3, #0
  201718:	d002      	beq.n	201720 <chThdDoDequeueNextI+0x20>
  20171a:	480c      	ldr	r0, [pc, #48]	; (20174c <chThdDoDequeueNextI+0x4c>)
  20171c:	f7ff f858 	bl	2007d0 <chSysHalt>

  tp = queue_fifo_remove(tqp);
  201720:	9801      	ldr	r0, [sp, #4]
  201722:	f7ff ff8d 	bl	201640 <queue_fifo_remove.lto_priv.222>
  201726:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
  201728:	9b03      	ldr	r3, [sp, #12]
  20172a:	f893 3020 	ldrb.w	r3, [r3, #32]
  20172e:	2b04      	cmp	r3, #4
  201730:	d002      	beq.n	201738 <chThdDoDequeueNextI+0x38>
  201732:	4806      	ldr	r0, [pc, #24]	; (20174c <chThdDoDequeueNextI+0x4c>)
  201734:	f7ff f84c 	bl	2007d0 <chSysHalt>

  tp->u.rdymsg = msg;
  201738:	9b03      	ldr	r3, [sp, #12]
  20173a:	9a00      	ldr	r2, [sp, #0]
  20173c:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  20173e:	9803      	ldr	r0, [sp, #12]
  201740:	f7ff fce6 	bl	201110 <chSchReadyI>
}
  201744:	b005      	add	sp, #20
  201746:	f85d fb04 	ldr.w	pc, [sp], #4
  20174a:	bf00      	nop
  20174c:	08004ae8 	.word	0x08004ae8

00201750 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
  201750:	b500      	push	{lr}
  201752:	b085      	sub	sp, #20
  201754:	9003      	str	r0, [sp, #12]
  201756:	9102      	str	r1, [sp, #8]
  201758:	9201      	str	r2, [sp, #4]

  tp->prio      = prio;
  20175a:	9b03      	ldr	r3, [sp, #12]
  20175c:	9a01      	ldr	r2, [sp, #4]
  20175e:	609a      	str	r2, [r3, #8]
  tp->state     = CH_STATE_WTSTART;
  201760:	9b03      	ldr	r3, [sp, #12]
  201762:	2202      	movs	r2, #2
  201764:	f883 2020 	strb.w	r2, [r3, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
  201768:	9b03      	ldr	r3, [sp, #12]
  20176a:	2200      	movs	r2, #0
  20176c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  201770:	9b03      	ldr	r3, [sp, #12]
  201772:	9a01      	ldr	r2, [sp, #4]
  201774:	63da      	str	r2, [r3, #60]	; 0x3c
  tp->mtxlist   = NULL;
  201776:	9b03      	ldr	r3, [sp, #12]
  201778:	2200      	movs	r2, #0
  20177a:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
  20177c:	9b03      	ldr	r3, [sp, #12]
  20177e:	2200      	movs	r2, #0
  201780:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  201782:	9b03      	ldr	r3, [sp, #12]
  201784:	2201      	movs	r2, #1
  201786:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  tp->name      = name;
  20178a:	9b03      	ldr	r3, [sp, #12]
  20178c:	9a02      	ldr	r2, [sp, #8]
  20178e:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
  201790:	9b03      	ldr	r3, [sp, #12]
  201792:	4a0e      	ldr	r2, [pc, #56]	; (2017cc <_thread_init+0x7c>)
  201794:	611a      	str	r2, [r3, #16]
  201796:	4b0d      	ldr	r3, [pc, #52]	; (2017cc <_thread_init+0x7c>)
  201798:	695a      	ldr	r2, [r3, #20]
  20179a:	9b03      	ldr	r3, [sp, #12]
  20179c:	615a      	str	r2, [r3, #20]
  20179e:	9b03      	ldr	r3, [sp, #12]
  2017a0:	695b      	ldr	r3, [r3, #20]
  2017a2:	9a03      	ldr	r2, [sp, #12]
  2017a4:	611a      	str	r2, [r3, #16]
  2017a6:	4a09      	ldr	r2, [pc, #36]	; (2017cc <_thread_init+0x7c>)
  2017a8:	9b03      	ldr	r3, [sp, #12]
  2017aa:	6153      	str	r3, [r2, #20]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
  2017ac:	9b03      	ldr	r3, [sp, #12]
  2017ae:	3328      	adds	r3, #40	; 0x28
  2017b0:	4618      	mov	r0, r3
  2017b2:	f7ff fee5 	bl	201580 <list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
  2017b6:	9b03      	ldr	r3, [sp, #12]
  2017b8:	332c      	adds	r3, #44	; 0x2c
  2017ba:	4618      	mov	r0, r3
  2017bc:	f7ff fef8 	bl	2015b0 <queue_init.lto_priv.173>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
  2017c0:	9b03      	ldr	r3, [sp, #12]
}
  2017c2:	4618      	mov	r0, r3
  2017c4:	b005      	add	sp, #20
  2017c6:	f85d fb04 	ldr.w	pc, [sp], #4
  2017ca:	bf00      	nop
  2017cc:	200008d8 	.word	0x200008d8

002017d0 <_thread_memfill>:
 * @param[in] endp      last address to fill +1
 * @param[in] v         filler value
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {
  2017d0:	b084      	sub	sp, #16
  2017d2:	9003      	str	r0, [sp, #12]
  2017d4:	9102      	str	r1, [sp, #8]
  2017d6:	4613      	mov	r3, r2
  2017d8:	f88d 3007 	strb.w	r3, [sp, #7]
  2017dc:	e005      	b.n	2017ea <_thread_memfill+0x1a>

  while (startp < endp) {
    *startp++ = v;
  2017de:	9b03      	ldr	r3, [sp, #12]
  2017e0:	1c5a      	adds	r2, r3, #1
  2017e2:	9203      	str	r2, [sp, #12]
  2017e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
  2017e8:	701a      	strb	r2, [r3, #0]
  while (startp < endp) {
  2017ea:	9a03      	ldr	r2, [sp, #12]
  2017ec:	9b02      	ldr	r3, [sp, #8]
  2017ee:	429a      	cmp	r2, r3
  2017f0:	d3f5      	bcc.n	2017de <_thread_memfill+0xe>
  }
}
  2017f2:	b004      	add	sp, #16
  2017f4:	4770      	bx	lr
  2017f6:	bf00      	nop
	...

00201800 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
  201800:	b500      	push	{lr}
  201802:	b085      	sub	sp, #20
  201804:	9001      	str	r0, [sp, #4]
  thread_t *tp;

  chDbgCheckClassI();
  201806:	f7ff f8db 	bl	2009c0 <chDbgCheckClassI>
  chDbgCheck(tdp != NULL);
  20180a:	9b01      	ldr	r3, [sp, #4]
  20180c:	2b00      	cmp	r3, #0
  20180e:	d102      	bne.n	201816 <chThdCreateSuspendedI+0x16>
  201810:	4829      	ldr	r0, [pc, #164]	; (2018b8 <chThdCreateSuspendedI+0xb8>)
  201812:	f7fe ffdd 	bl	2007d0 <chSysHalt>
  chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
  201816:	9b01      	ldr	r3, [sp, #4]
  201818:	685b      	ldr	r3, [r3, #4]
  20181a:	f003 0307 	and.w	r3, r3, #7
  20181e:	2b00      	cmp	r3, #0
  201820:	d113      	bne.n	20184a <chThdCreateSuspendedI+0x4a>
  201822:	9b01      	ldr	r3, [sp, #4]
  201824:	689b      	ldr	r3, [r3, #8]
  201826:	f003 0307 	and.w	r3, r3, #7
  20182a:	2b00      	cmp	r3, #0
  20182c:	d10d      	bne.n	20184a <chThdCreateSuspendedI+0x4a>
  20182e:	9b01      	ldr	r3, [sp, #4]
  201830:	689a      	ldr	r2, [r3, #8]
  201832:	9b01      	ldr	r3, [sp, #4]
  201834:	685b      	ldr	r3, [r3, #4]
  201836:	429a      	cmp	r2, r3
  201838:	d907      	bls.n	20184a <chThdCreateSuspendedI+0x4a>
  20183a:	9b01      	ldr	r3, [sp, #4]
  20183c:	689b      	ldr	r3, [r3, #8]
  20183e:	461a      	mov	r2, r3
  201840:	9b01      	ldr	r3, [sp, #4]
  201842:	685b      	ldr	r3, [r3, #4]
  201844:	1ad3      	subs	r3, r2, r3
  201846:	2bc7      	cmp	r3, #199	; 0xc7
  201848:	d802      	bhi.n	201850 <chThdCreateSuspendedI+0x50>
  20184a:	481b      	ldr	r0, [pc, #108]	; (2018b8 <chThdCreateSuspendedI+0xb8>)
  20184c:	f7fe ffc0 	bl	2007d0 <chSysHalt>
             MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
             (tdp->wend > tdp->wbase) &&
             (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
  201850:	9b01      	ldr	r3, [sp, #4]
  201852:	68db      	ldr	r3, [r3, #12]
  201854:	2bff      	cmp	r3, #255	; 0xff
  201856:	d803      	bhi.n	201860 <chThdCreateSuspendedI+0x60>
  201858:	9b01      	ldr	r3, [sp, #4]
  20185a:	691b      	ldr	r3, [r3, #16]
  20185c:	2b00      	cmp	r3, #0
  20185e:	d102      	bne.n	201866 <chThdCreateSuspendedI+0x66>
  201860:	4815      	ldr	r0, [pc, #84]	; (2018b8 <chThdCreateSuspendedI+0xb8>)
  201862:	f7fe ffb5 	bl	2007d0 <chSysHalt>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
  201866:	9b01      	ldr	r3, [sp, #4]
  201868:	689b      	ldr	r3, [r3, #8]
  20186a:	3b48      	subs	r3, #72	; 0x48
  20186c:	9303      	str	r3, [sp, #12]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
  20186e:	9b01      	ldr	r3, [sp, #4]
  201870:	685a      	ldr	r2, [r3, #4]
  201872:	9b03      	ldr	r3, [sp, #12]
  201874:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201876:	9b03      	ldr	r3, [sp, #12]
  201878:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  20187c:	9b03      	ldr	r3, [sp, #12]
  20187e:	60da      	str	r2, [r3, #12]
  201880:	9b03      	ldr	r3, [sp, #12]
  201882:	68db      	ldr	r3, [r3, #12]
  201884:	9a01      	ldr	r2, [sp, #4]
  201886:	6912      	ldr	r2, [r2, #16]
  201888:	601a      	str	r2, [r3, #0]
  20188a:	9b03      	ldr	r3, [sp, #12]
  20188c:	68db      	ldr	r3, [r3, #12]
  20188e:	9a01      	ldr	r2, [sp, #4]
  201890:	6952      	ldr	r2, [r2, #20]
  201892:	605a      	str	r2, [r3, #4]
  201894:	9b03      	ldr	r3, [sp, #12]
  201896:	68db      	ldr	r3, [r3, #12]
  201898:	4a08      	ldr	r2, [pc, #32]	; (2018bc <chThdCreateSuspendedI+0xbc>)
  20189a:	621a      	str	r2, [r3, #32]

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
  20189c:	9b01      	ldr	r3, [sp, #4]
  20189e:	6819      	ldr	r1, [r3, #0]
  2018a0:	9b01      	ldr	r3, [sp, #4]
  2018a2:	68db      	ldr	r3, [r3, #12]
  2018a4:	461a      	mov	r2, r3
  2018a6:	9803      	ldr	r0, [sp, #12]
  2018a8:	f7ff ff52 	bl	201750 <_thread_init>
  2018ac:	4603      	mov	r3, r0
}
  2018ae:	4618      	mov	r0, r3
  2018b0:	b005      	add	sp, #20
  2018b2:	f85d fb04 	ldr.w	pc, [sp], #4
  2018b6:	bf00      	nop
  2018b8:	08004a90 	.word	0x08004a90
  2018bc:	002002e9 	.word	0x002002e9

002018c0 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
  2018c0:	b500      	push	{lr}
  2018c2:	b085      	sub	sp, #20
  2018c4:	9001      	str	r0, [sp, #4]
  thread_t *tp;

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
  2018c6:	9b01      	ldr	r3, [sp, #4]
  2018c8:	685b      	ldr	r3, [r3, #4]
  2018ca:	4618      	mov	r0, r3
  2018cc:	f000 fa50 	bl	201d70 <chRegFindThreadByWorkingArea>
  2018d0:	4603      	mov	r3, r0
  2018d2:	2b00      	cmp	r3, #0
  2018d4:	d002      	beq.n	2018dc <chThdCreate+0x1c>
  2018d6:	480e      	ldr	r0, [pc, #56]	; (201910 <chThdCreate+0x50>)
  2018d8:	f7fe ff7a 	bl	2007d0 <chSysHalt>
              "working area in use");
#endif

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)tdp->wbase,
  2018dc:	9b01      	ldr	r3, [sp, #4]
  2018de:	6858      	ldr	r0, [r3, #4]
                  (uint8_t *)tdp->wend,
  2018e0:	9b01      	ldr	r3, [sp, #4]
  2018e2:	689b      	ldr	r3, [r3, #8]
  _thread_memfill((uint8_t *)tdp->wbase,
  2018e4:	2255      	movs	r2, #85	; 0x55
  2018e6:	4619      	mov	r1, r3
  2018e8:	f7ff ff72 	bl	2017d0 <_thread_memfill>
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  2018ec:	f7ff fec0 	bl	201670 <chSysLock.lto_priv.133>
  tp = chThdCreateSuspendedI(tdp);
  2018f0:	9801      	ldr	r0, [sp, #4]
  2018f2:	f7ff ff85 	bl	201800 <chThdCreateSuspendedI>
  2018f6:	9003      	str	r0, [sp, #12]
  chSchWakeupS(tp, MSG_OK);
  2018f8:	2100      	movs	r1, #0
  2018fa:	9803      	ldr	r0, [sp, #12]
  2018fc:	f7ff fd40 	bl	201380 <chSchWakeupS>
  chSysUnlock();
  201900:	f7ff febe 	bl	201680 <chSysUnlock.lto_priv.97>

  return tp;
  201904:	9b03      	ldr	r3, [sp, #12]
}
  201906:	4618      	mov	r0, r3
  201908:	b005      	add	sp, #20
  20190a:	f85d fb04 	ldr.w	pc, [sp], #4
  20190e:	bf00      	nop
  201910:	08004ab4 	.word	0x08004ab4
	...

00201920 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
  201920:	b510      	push	{r4, lr}
  201922:	b082      	sub	sp, #8
  201924:	9001      	str	r0, [sp, #4]

  chSysLock();
  201926:	f7ff fea3 	bl	201670 <chSysLock.lto_priv.133>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
  20192a:	9b01      	ldr	r3, [sp, #4]
  20192c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  201930:	2b00      	cmp	r3, #0
  201932:	d102      	bne.n	20193a <chThdRelease+0x1a>
  201934:	4820      	ldr	r0, [pc, #128]	; (2019b8 <chThdRelease+0x98>)
  201936:	f7fe ff4b 	bl	2007d0 <chSysHalt>
  tp->refs--;
  20193a:	9b01      	ldr	r3, [sp, #4]
  20193c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  201940:	3b01      	subs	r3, #1
  201942:	b2da      	uxtb	r2, r3
  201944:	9b01      	ldr	r3, [sp, #4]
  201946:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
  20194a:	9b01      	ldr	r3, [sp, #4]
  20194c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  201950:	2b00      	cmp	r3, #0
  201952:	d12d      	bne.n	2019b0 <chThdRelease+0x90>
  201954:	9b01      	ldr	r3, [sp, #4]
  201956:	f893 3020 	ldrb.w	r3, [r3, #32]
  20195a:	2b0f      	cmp	r3, #15
  20195c:	d128      	bne.n	2019b0 <chThdRelease+0x90>
    REG_REMOVE(tp);
  20195e:	9b01      	ldr	r3, [sp, #4]
  201960:	695b      	ldr	r3, [r3, #20]
  201962:	9a01      	ldr	r2, [sp, #4]
  201964:	6912      	ldr	r2, [r2, #16]
  201966:	611a      	str	r2, [r3, #16]
  201968:	9b01      	ldr	r3, [sp, #4]
  20196a:	691b      	ldr	r3, [r3, #16]
  20196c:	9a01      	ldr	r2, [sp, #4]
  20196e:	6952      	ldr	r2, [r2, #20]
  201970:	615a      	str	r2, [r3, #20]
    chSysUnlock();
  201972:	f7ff fe85 	bl	201680 <chSysUnlock.lto_priv.97>

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
  201976:	9b01      	ldr	r3, [sp, #4]
  201978:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  20197c:	f003 0303 	and.w	r3, r3, #3
  201980:	2b01      	cmp	r3, #1
  201982:	d002      	beq.n	20198a <chThdRelease+0x6a>
  201984:	2b02      	cmp	r3, #2
  201986:	d008      	beq.n	20199a <chThdRelease+0x7a>
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
      break;
#endif
    default:
  201988:	e014      	b.n	2019b4 <chThdRelease+0x94>
      chHeapFree(chThdGetWorkingAreaX(tp));
  20198a:	9801      	ldr	r0, [sp, #4]
  20198c:	f7ff fe98 	bl	2016c0 <chThdGetWorkingAreaX.lto_priv.246>
  201990:	4603      	mov	r3, r0
  201992:	4618      	mov	r0, r3
  201994:	f000 fd24 	bl	2023e0 <chHeapFree>
    default:
  201998:	e00c      	b.n	2019b4 <chThdRelease+0x94>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
  20199a:	9b01      	ldr	r3, [sp, #4]
  20199c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  20199e:	9801      	ldr	r0, [sp, #4]
  2019a0:	f7ff fe8e 	bl	2016c0 <chThdGetWorkingAreaX.lto_priv.246>
  2019a4:	4603      	mov	r3, r0
  2019a6:	4619      	mov	r1, r3
  2019a8:	4620      	mov	r0, r4
  2019aa:	f000 fe01 	bl	2025b0 <chPoolFree>
    default:
  2019ae:	e001      	b.n	2019b4 <chThdRelease+0x94>
      break;
    }
#endif /* CH_CFG_USE_DYNAMIC == TRUE */
    return;
  }
  chSysUnlock();
  2019b0:	f7ff fe66 	bl	201680 <chSysUnlock.lto_priv.97>
}
  2019b4:	b002      	add	sp, #8
  2019b6:	bd10      	pop	{r4, pc}
  2019b8:	08004ac0 	.word	0x08004ac0
  2019bc:	00000000 	.word	0x00000000

002019c0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
  2019c0:	b500      	push	{lr}
  2019c2:	b083      	sub	sp, #12
  2019c4:	9001      	str	r0, [sp, #4]

  chSysLock();
  2019c6:	f7ff fe53 	bl	201670 <chSysLock.lto_priv.133>
  chThdExitS(msg);
  2019ca:	9801      	ldr	r0, [sp, #4]
  2019cc:	f000 f808 	bl	2019e0 <chThdExitS>
  /* The thread never returns here.*/
}
  2019d0:	b003      	add	sp, #12
  2019d2:	f85d fb04 	ldr.w	pc, [sp], #4
  2019d6:	bf00      	nop
	...

002019e0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  2019e0:	b500      	push	{lr}
  2019e2:	b085      	sub	sp, #20
  2019e4:	9001      	str	r0, [sp, #4]
  thread_t *tp = currp;
  2019e6:	4b1b      	ldr	r3, [pc, #108]	; (201a54 <chThdExitS+0x74>)
  2019e8:	699b      	ldr	r3, [r3, #24]
  2019ea:	9303      	str	r3, [sp, #12]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
  2019ec:	9b03      	ldr	r3, [sp, #12]
  2019ee:	9a01      	ldr	r2, [sp, #4]
  2019f0:	625a      	str	r2, [r3, #36]	; 0x24
  2019f2:	e008      	b.n	201a06 <chThdExitS+0x26>
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
    (void) chSchReadyI(list_remove(&tp->waiting));
  2019f4:	9b03      	ldr	r3, [sp, #12]
  2019f6:	3328      	adds	r3, #40	; 0x28
  2019f8:	4618      	mov	r0, r3
  2019fa:	f7ff fdf9 	bl	2015f0 <list_remove>
  2019fe:	4603      	mov	r3, r0
  201a00:	4618      	mov	r0, r3
  201a02:	f7ff fb85 	bl	201110 <chSchReadyI>
  while (list_notempty(&tp->waiting)) {
  201a06:	9b03      	ldr	r3, [sp, #12]
  201a08:	3328      	adds	r3, #40	; 0x28
  201a0a:	4618      	mov	r0, r3
  201a0c:	f7ff fdc0 	bl	201590 <list_notempty>
  201a10:	4603      	mov	r3, r0
  201a12:	2b00      	cmp	r3, #0
  201a14:	d1ee      	bne.n	2019f4 <chThdExitS+0x14>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
  201a16:	9b03      	ldr	r3, [sp, #12]
  201a18:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  201a1c:	2b00      	cmp	r3, #0
  201a1e:	d110      	bne.n	201a42 <chThdExitS+0x62>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
  201a20:	9b03      	ldr	r3, [sp, #12]
  201a22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  201a26:	f003 0303 	and.w	r3, r3, #3
  if ((tp->refs == (trefs_t)0) &&
  201a2a:	2b00      	cmp	r3, #0
  201a2c:	d109      	bne.n	201a42 <chThdExitS+0x62>
    REG_REMOVE(tp);
  201a2e:	9b03      	ldr	r3, [sp, #12]
  201a30:	695b      	ldr	r3, [r3, #20]
  201a32:	9a03      	ldr	r2, [sp, #12]
  201a34:	6912      	ldr	r2, [r2, #16]
  201a36:	611a      	str	r2, [r3, #16]
  201a38:	9b03      	ldr	r3, [sp, #12]
  201a3a:	691b      	ldr	r3, [r3, #16]
  201a3c:	9a03      	ldr	r2, [sp, #12]
  201a3e:	6952      	ldr	r2, [r2, #20]
  201a40:	615a      	str	r2, [r3, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
  201a42:	200f      	movs	r0, #15
  201a44:	f7ff fbe4 	bl	201210 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
  201a48:	4803      	ldr	r0, [pc, #12]	; (201a58 <chThdExitS+0x78>)
  201a4a:	f7fe fec1 	bl	2007d0 <chSysHalt>
}
  201a4e:	b005      	add	sp, #20
  201a50:	f85d fb04 	ldr.w	pc, [sp], #4
  201a54:	200008d8 	.word	0x200008d8
  201a58:	08004ad0 	.word	0x08004ad0
  201a5c:	00000000 	.word	0x00000000

00201a60 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
  201a60:	b500      	push	{lr}
  201a62:	b083      	sub	sp, #12
  201a64:	9001      	str	r0, [sp, #4]

  chSysLock();
  201a66:	f7ff fe03 	bl	201670 <chSysLock.lto_priv.133>
  chThdSleepS(time);
  201a6a:	9801      	ldr	r0, [sp, #4]
  201a6c:	f7ff fe30 	bl	2016d0 <chThdSleepS>
  chSysUnlock();
  201a70:	f7ff fe06 	bl	201680 <chSysUnlock.lto_priv.97>
}
  201a74:	b003      	add	sp, #12
  201a76:	f85d fb04 	ldr.w	pc, [sp], #4
  201a7a:	bf00      	nop
  201a7c:	0000      	movs	r0, r0
	...

00201a80 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  201a80:	b500      	push	{lr}
  201a82:	b083      	sub	sp, #12
  201a84:	9001      	str	r0, [sp, #4]
  201a86:	9100      	str	r1, [sp, #0]

  if (TIME_IMMEDIATE == timeout) {
  201a88:	9b00      	ldr	r3, [sp, #0]
  201a8a:	2b00      	cmp	r3, #0
  201a8c:	d102      	bne.n	201a94 <chThdEnqueueTimeoutS+0x14>
    return MSG_TIMEOUT;
  201a8e:	f04f 33ff 	mov.w	r3, #4294967295
  201a92:	e00a      	b.n	201aaa <chThdEnqueueTimeoutS+0x2a>
  }

  queue_insert(currp, tqp);
  201a94:	4b07      	ldr	r3, [pc, #28]	; (201ab4 <chThdEnqueueTimeoutS+0x34>)
  201a96:	699b      	ldr	r3, [r3, #24]
  201a98:	9901      	ldr	r1, [sp, #4]
  201a9a:	4618      	mov	r0, r3
  201a9c:	f7ff fdb8 	bl	201610 <queue_insert.lto_priv.227>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201aa0:	9900      	ldr	r1, [sp, #0]
  201aa2:	2004      	movs	r0, #4
  201aa4:	f7ff fc34 	bl	201310 <chSchGoSleepTimeoutS>
  201aa8:	4603      	mov	r3, r0
}
  201aaa:	4618      	mov	r0, r3
  201aac:	b003      	add	sp, #12
  201aae:	f85d fb04 	ldr.w	pc, [sp], #4
  201ab2:	bf00      	nop
  201ab4:	200008d8 	.word	0x200008d8
	...

00201ac0 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  201ac0:	b500      	push	{lr}
  201ac2:	b083      	sub	sp, #12
  201ac4:	9001      	str	r0, [sp, #4]
  201ac6:	9100      	str	r1, [sp, #0]

  if (queue_notempty(tqp)) {
  201ac8:	9801      	ldr	r0, [sp, #4]
  201aca:	f7ff fd81 	bl	2015d0 <queue_notempty.lto_priv.238>
  201ace:	4603      	mov	r3, r0
  201ad0:	2b00      	cmp	r3, #0
  201ad2:	d003      	beq.n	201adc <chThdDequeueNextI+0x1c>
    chThdDoDequeueNextI(tqp, msg);
  201ad4:	9900      	ldr	r1, [sp, #0]
  201ad6:	9801      	ldr	r0, [sp, #4]
  201ad8:	f7ff fe12 	bl	201700 <chThdDoDequeueNextI>
  }
}
  201adc:	b003      	add	sp, #12
  201ade:	f85d fb04 	ldr.w	pc, [sp], #4
  201ae2:	bf00      	nop
	...

00201af0 <port_rt_get_counter_value.lto_priv.250>:
  return DWT->CYCCNT;
  201af0:	4b01      	ldr	r3, [pc, #4]	; (201af8 <port_rt_get_counter_value.lto_priv.250+0x8>)
  201af2:	685b      	ldr	r3, [r3, #4]
}
  201af4:	4618      	mov	r0, r3
  201af6:	4770      	bx	lr
  201af8:	e0001000 	.word	0xe0001000
  201afc:	00000000 	.word	0x00000000

00201b00 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
  201b00:	e92d 0810 	stmdb	sp!, {r4, fp}
  201b04:	b084      	sub	sp, #16
  201b06:	9003      	str	r0, [sp, #12]
  201b08:	9102      	str	r1, [sp, #8]
  201b0a:	9201      	str	r2, [sp, #4]

  tmp->n++;
  201b0c:	9b03      	ldr	r3, [sp, #12]
  201b0e:	68db      	ldr	r3, [r3, #12]
  201b10:	1c5a      	adds	r2, r3, #1
  201b12:	9b03      	ldr	r3, [sp, #12]
  201b14:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
  201b16:	9b03      	ldr	r3, [sp, #12]
  201b18:	689b      	ldr	r3, [r3, #8]
  201b1a:	9a02      	ldr	r2, [sp, #8]
  201b1c:	1ad2      	subs	r2, r2, r3
  201b1e:	9b01      	ldr	r3, [sp, #4]
  201b20:	1ad2      	subs	r2, r2, r3
  201b22:	9b03      	ldr	r3, [sp, #12]
  201b24:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  201b26:	9b03      	ldr	r3, [sp, #12]
  201b28:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
  201b2c:	9b03      	ldr	r3, [sp, #12]
  201b2e:	689b      	ldr	r3, [r3, #8]
  201b30:	469b      	mov	fp, r3
  201b32:	f04f 0c00 	mov.w	ip, #0
  201b36:	eb1b 0301 	adds.w	r3, fp, r1
  201b3a:	eb4c 0402 	adc.w	r4, ip, r2
  201b3e:	9a03      	ldr	r2, [sp, #12]
  201b40:	e9c2 3404 	strd	r3, r4, [r2, #16]
  if (tmp->last > tmp->worst) {
  201b44:	9b03      	ldr	r3, [sp, #12]
  201b46:	689a      	ldr	r2, [r3, #8]
  201b48:	9b03      	ldr	r3, [sp, #12]
  201b4a:	685b      	ldr	r3, [r3, #4]
  201b4c:	429a      	cmp	r2, r3
  201b4e:	d903      	bls.n	201b58 <tm_stop+0x58>
    tmp->worst = tmp->last;
  201b50:	9b03      	ldr	r3, [sp, #12]
  201b52:	689a      	ldr	r2, [r3, #8]
  201b54:	9b03      	ldr	r3, [sp, #12]
  201b56:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
  201b58:	9b03      	ldr	r3, [sp, #12]
  201b5a:	689a      	ldr	r2, [r3, #8]
  201b5c:	9b03      	ldr	r3, [sp, #12]
  201b5e:	681b      	ldr	r3, [r3, #0]
  201b60:	429a      	cmp	r2, r3
  201b62:	d203      	bcs.n	201b6c <tm_stop+0x6c>
    tmp->best = tmp->last;
  201b64:	9b03      	ldr	r3, [sp, #12]
  201b66:	689a      	ldr	r2, [r3, #8]
  201b68:	9b03      	ldr	r3, [sp, #12]
  201b6a:	601a      	str	r2, [r3, #0]
  }
}
  201b6c:	b004      	add	sp, #16
  201b6e:	e8bd 0810 	ldmia.w	sp!, {r4, fp}
  201b72:	4770      	bx	lr
	...

00201b80 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
  201b80:	b500      	push	{lr}
  201b82:	b087      	sub	sp, #28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  201b84:	4b0b      	ldr	r3, [pc, #44]	; (201bb4 <_tm_init+0x34>)
  201b86:	2200      	movs	r2, #0
  201b88:	f8c3 2884 	str.w	r2, [r3, #2180]	; 0x884
  chTMObjectInit(&tm);
  201b8c:	466b      	mov	r3, sp
  201b8e:	4618      	mov	r0, r3
  201b90:	f000 f816 	bl	201bc0 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
  201b94:	466b      	mov	r3, sp
  201b96:	4618      	mov	r0, r3
  201b98:	f000 f832 	bl	201c00 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
  201b9c:	466b      	mov	r3, sp
  201b9e:	4618      	mov	r0, r3
  201ba0:	f000 f83e 	bl	201c20 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
  201ba4:	9b02      	ldr	r3, [sp, #8]
  201ba6:	4a03      	ldr	r2, [pc, #12]	; (201bb4 <_tm_init+0x34>)
  201ba8:	f8c2 3884 	str.w	r3, [r2, #2180]	; 0x884
}
  201bac:	b007      	add	sp, #28
  201bae:	f85d fb04 	ldr.w	pc, [sp], #4
  201bb2:	bf00      	nop
  201bb4:	200008d8 	.word	0x200008d8
	...

00201bc0 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
  201bc0:	b410      	push	{r4}
  201bc2:	b083      	sub	sp, #12
  201bc4:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
  201bc6:	9b01      	ldr	r3, [sp, #4]
  201bc8:	f04f 32ff 	mov.w	r2, #4294967295
  201bcc:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
  201bce:	9b01      	ldr	r3, [sp, #4]
  201bd0:	2200      	movs	r2, #0
  201bd2:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
  201bd4:	9b01      	ldr	r3, [sp, #4]
  201bd6:	2200      	movs	r2, #0
  201bd8:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
  201bda:	9b01      	ldr	r3, [sp, #4]
  201bdc:	2200      	movs	r2, #0
  201bde:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
  201be0:	9a01      	ldr	r2, [sp, #4]
  201be2:	f04f 0300 	mov.w	r3, #0
  201be6:	f04f 0400 	mov.w	r4, #0
  201bea:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
  201bee:	b003      	add	sp, #12
  201bf0:	bc10      	pop	{r4}
  201bf2:	4770      	bx	lr
	...

00201c00 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
  201c00:	b500      	push	{lr}
  201c02:	b083      	sub	sp, #12
  201c04:	9001      	str	r0, [sp, #4]

  tmp->last = chSysGetRealtimeCounterX();
  201c06:	f7ff ff73 	bl	201af0 <port_rt_get_counter_value.lto_priv.250>
  201c0a:	4602      	mov	r2, r0
  201c0c:	9b01      	ldr	r3, [sp, #4]
  201c0e:	609a      	str	r2, [r3, #8]
}
  201c10:	b003      	add	sp, #12
  201c12:	f85d fb04 	ldr.w	pc, [sp], #4
  201c16:	bf00      	nop
	...

00201c20 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  201c20:	b500      	push	{lr}
  201c22:	b083      	sub	sp, #12
  201c24:	9001      	str	r0, [sp, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201c26:	f7ff ff63 	bl	201af0 <port_rt_get_counter_value.lto_priv.250>
  201c2a:	4601      	mov	r1, r0
  201c2c:	4b04      	ldr	r3, [pc, #16]	; (201c40 <chTMStopMeasurementX+0x20>)
  201c2e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
  201c32:	461a      	mov	r2, r3
  201c34:	9801      	ldr	r0, [sp, #4]
  201c36:	f7ff ff63 	bl	201b00 <tm_stop>
}
  201c3a:	b003      	add	sp, #12
  201c3c:	f85d fb04 	ldr.w	pc, [sp], #4
  201c40:	200008d8 	.word	0x200008d8
	...

00201c50 <port_lock.lto_priv.59>:
static inline void port_lock(void) {
  201c50:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  201c52:	b672      	cpsid	i
  201c54:	2320      	movs	r3, #32
  201c56:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201c58:	9b01      	ldr	r3, [sp, #4]
  201c5a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  201c5e:	b662      	cpsie	i
}
  201c60:	b002      	add	sp, #8
  201c62:	4770      	bx	lr
	...

00201c70 <port_unlock.lto_priv.35>:
static inline void port_unlock(void) {
  201c70:	b082      	sub	sp, #8
  201c72:	2300      	movs	r3, #0
  201c74:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201c76:	9b01      	ldr	r3, [sp, #4]
  201c78:	f383 8811 	msr	BASEPRI, r3
}
  201c7c:	b002      	add	sp, #8
  201c7e:	4770      	bx	lr

00201c80 <chSysLock.lto_priv.134>:
static inline void chSysLock(void) {
  201c80:	b508      	push	{r3, lr}
  port_lock();
  201c82:	f7ff ffe5 	bl	201c50 <port_lock.lto_priv.59>
  _dbg_check_lock();
  201c86:	f7fe fdfb 	bl	200880 <_dbg_check_lock>
}
  201c8a:	bd08      	pop	{r3, pc}
  201c8c:	0000      	movs	r0, r0
	...

00201c90 <chSysUnlock.lto_priv.98>:
static inline void chSysUnlock(void) {
  201c90:	b508      	push	{r3, lr}
  _dbg_check_unlock();
  201c92:	f7fe fe0d 	bl	2008b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
  201c96:	4b09      	ldr	r3, [pc, #36]	; (201cbc <chSysUnlock.lto_priv.98+0x2c>)
  201c98:	681b      	ldr	r3, [r3, #0]
  201c9a:	4a08      	ldr	r2, [pc, #32]	; (201cbc <chSysUnlock.lto_priv.98+0x2c>)
  201c9c:	4293      	cmp	r3, r2
  201c9e:	d00a      	beq.n	201cb6 <chSysUnlock.lto_priv.98+0x26>
  201ca0:	4b06      	ldr	r3, [pc, #24]	; (201cbc <chSysUnlock.lto_priv.98+0x2c>)
  201ca2:	699b      	ldr	r3, [r3, #24]
  201ca4:	689a      	ldr	r2, [r3, #8]
  201ca6:	4b05      	ldr	r3, [pc, #20]	; (201cbc <chSysUnlock.lto_priv.98+0x2c>)
  201ca8:	681b      	ldr	r3, [r3, #0]
  201caa:	689b      	ldr	r3, [r3, #8]
  201cac:	429a      	cmp	r2, r3
  201cae:	d202      	bcs.n	201cb6 <chSysUnlock.lto_priv.98+0x26>
  201cb0:	4803      	ldr	r0, [pc, #12]	; (201cc0 <chSysUnlock.lto_priv.98+0x30>)
  201cb2:	f7fe fd8d 	bl	2007d0 <chSysHalt>
  port_unlock();
  201cb6:	f7ff ffdb 	bl	201c70 <port_unlock.lto_priv.35>
}
  201cba:	bd08      	pop	{r3, pc}
  201cbc:	200008d8 	.word	0x200008d8
  201cc0:	08004b14 	.word	0x08004b14
	...

00201cd0 <chThdGetWorkingAreaX.lto_priv.247>:
static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
  201cd0:	b082      	sub	sp, #8
  201cd2:	9001      	str	r0, [sp, #4]
  return tp->wabase;
  201cd4:	9b01      	ldr	r3, [sp, #4]
  201cd6:	69db      	ldr	r3, [r3, #28]
}
  201cd8:	4618      	mov	r0, r3
  201cda:	b002      	add	sp, #8
  201cdc:	4770      	bx	lr
  201cde:	bf00      	nop

00201ce0 <chRegFirstThread>:
 *
 * @return              A reference to the most ancient thread.
 *
 * @api
 */
thread_t *chRegFirstThread(void) {
  201ce0:	b500      	push	{lr}
  201ce2:	b083      	sub	sp, #12
  thread_t *tp;

  chSysLock();
  201ce4:	f7ff ffcc 	bl	201c80 <chSysLock.lto_priv.134>
  tp = ch.rlist.newer;
  201ce8:	4b08      	ldr	r3, [pc, #32]	; (201d0c <chRegFirstThread+0x2c>)
  201cea:	691b      	ldr	r3, [r3, #16]
  201cec:	9301      	str	r3, [sp, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
  201cee:	9b01      	ldr	r3, [sp, #4]
  201cf0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  201cf4:	3301      	adds	r3, #1
  201cf6:	b2da      	uxtb	r2, r3
  201cf8:	9b01      	ldr	r3, [sp, #4]
  201cfa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
#endif
  chSysUnlock();
  201cfe:	f7ff ffc7 	bl	201c90 <chSysUnlock.lto_priv.98>

  return tp;
  201d02:	9b01      	ldr	r3, [sp, #4]
}
  201d04:	4618      	mov	r0, r3
  201d06:	b003      	add	sp, #12
  201d08:	f85d fb04 	ldr.w	pc, [sp], #4
  201d0c:	200008d8 	.word	0x200008d8

00201d10 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
  201d10:	b500      	push	{lr}
  201d12:	b085      	sub	sp, #20
  201d14:	9001      	str	r0, [sp, #4]
  thread_t *ntp;

  chSysLock();
  201d16:	f7ff ffb3 	bl	201c80 <chSysLock.lto_priv.134>
  ntp = tp->newer;
  201d1a:	9b01      	ldr	r3, [sp, #4]
  201d1c:	691b      	ldr	r3, [r3, #16]
  201d1e:	9303      	str	r3, [sp, #12]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  201d20:	9b03      	ldr	r3, [sp, #12]
  201d22:	4a10      	ldr	r2, [pc, #64]	; (201d64 <chRegNextThread+0x54>)
  201d24:	4293      	cmp	r3, r2
  201d26:	d102      	bne.n	201d2e <chRegNextThread+0x1e>
  /*lint -restore*/
    ntp = NULL;
  201d28:	2300      	movs	r3, #0
  201d2a:	9303      	str	r3, [sp, #12]
  201d2c:	e00f      	b.n	201d4e <chRegNextThread+0x3e>
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
  201d2e:	9b03      	ldr	r3, [sp, #12]
  201d30:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  201d34:	2bff      	cmp	r3, #255	; 0xff
  201d36:	d102      	bne.n	201d3e <chRegNextThread+0x2e>
  201d38:	480b      	ldr	r0, [pc, #44]	; (201d68 <chRegNextThread+0x58>)
  201d3a:	f7fe fd49 	bl	2007d0 <chSysHalt>
    ntp->refs++;
  201d3e:	9b03      	ldr	r3, [sp, #12]
  201d40:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  201d44:	3301      	adds	r3, #1
  201d46:	b2da      	uxtb	r2, r3
  201d48:	9b03      	ldr	r3, [sp, #12]
  201d4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  }
#endif
  chSysUnlock();
  201d4e:	f7ff ff9f 	bl	201c90 <chSysUnlock.lto_priv.98>
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
  201d52:	9801      	ldr	r0, [sp, #4]
  201d54:	f7ff fde4 	bl	201920 <chThdRelease>
#endif

  return ntp;
  201d58:	9b03      	ldr	r3, [sp, #12]
}
  201d5a:	4618      	mov	r0, r3
  201d5c:	b005      	add	sp, #20
  201d5e:	f85d fb04 	ldr.w	pc, [sp], #4
  201d62:	bf00      	nop
  201d64:	200008d8 	.word	0x200008d8
  201d68:	08004b20 	.word	0x08004b20
  201d6c:	00000000 	.word	0x00000000

00201d70 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
  201d70:	b500      	push	{lr}
  201d72:	b085      	sub	sp, #20
  201d74:	9001      	str	r0, [sp, #4]
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  201d76:	f7ff ffb3 	bl	201ce0 <chRegFirstThread>
  201d7a:	9003      	str	r0, [sp, #12]
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
  201d7c:	9803      	ldr	r0, [sp, #12]
  201d7e:	f7ff ffa7 	bl	201cd0 <chThdGetWorkingAreaX.lto_priv.247>
  201d82:	4602      	mov	r2, r0
  201d84:	9b01      	ldr	r3, [sp, #4]
  201d86:	4293      	cmp	r3, r2
  201d88:	d101      	bne.n	201d8e <chRegFindThreadByWorkingArea+0x1e>
      return ctp;
  201d8a:	9b03      	ldr	r3, [sp, #12]
  201d8c:	e007      	b.n	201d9e <chRegFindThreadByWorkingArea+0x2e>
    }
    ctp = chRegNextThread(ctp);
  201d8e:	9803      	ldr	r0, [sp, #12]
  201d90:	f7ff ffbe 	bl	201d10 <chRegNextThread>
  201d94:	9003      	str	r0, [sp, #12]
  } while (ctp != NULL);
  201d96:	9b03      	ldr	r3, [sp, #12]
  201d98:	2b00      	cmp	r3, #0
  201d9a:	d1ef      	bne.n	201d7c <chRegFindThreadByWorkingArea+0xc>

  return NULL;
  201d9c:	2300      	movs	r3, #0
}
  201d9e:	4618      	mov	r0, r3
  201da0:	b005      	add	sp, #20
  201da2:	f85d fb04 	ldr.w	pc, [sp], #4
  201da6:	bf00      	nop
	...

00201db0 <port_lock.lto_priv.61>:
static inline void port_lock(void) {
  201db0:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  201db2:	b672      	cpsid	i
  201db4:	2320      	movs	r3, #32
  201db6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201db8:	9b01      	ldr	r3, [sp, #4]
  201dba:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  201dbe:	b662      	cpsie	i
}
  201dc0:	b002      	add	sp, #8
  201dc2:	4770      	bx	lr
	...

00201dd0 <port_unlock.lto_priv.37>:
static inline void port_unlock(void) {
  201dd0:	b082      	sub	sp, #8
  201dd2:	2300      	movs	r3, #0
  201dd4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201dd6:	9b01      	ldr	r3, [sp, #4]
  201dd8:	f383 8811 	msr	BASEPRI, r3
}
  201ddc:	b002      	add	sp, #8
  201dde:	4770      	bx	lr

00201de0 <queue_init.lto_priv.175>:
static inline void queue_init(threads_queue_t *tqp) {
  201de0:	b082      	sub	sp, #8
  201de2:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
  201de4:	9b01      	ldr	r3, [sp, #4]
  201de6:	9a01      	ldr	r2, [sp, #4]
  201de8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  201dea:	9b01      	ldr	r3, [sp, #4]
  201dec:	9a01      	ldr	r2, [sp, #4]
  201dee:	605a      	str	r2, [r3, #4]
}
  201df0:	b002      	add	sp, #8
  201df2:	4770      	bx	lr
	...

00201e00 <queue_notempty.lto_priv.240>:
static inline bool queue_notempty(const threads_queue_t *tqp) {
  201e00:	b082      	sub	sp, #8
  201e02:	9001      	str	r0, [sp, #4]
  return (bool)(tqp->next != (const thread_t *)tqp);
  201e04:	9b01      	ldr	r3, [sp, #4]
  201e06:	681b      	ldr	r3, [r3, #0]
  201e08:	9a01      	ldr	r2, [sp, #4]
  201e0a:	429a      	cmp	r2, r3
  201e0c:	bf14      	ite	ne
  201e0e:	2301      	movne	r3, #1
  201e10:	2300      	moveq	r3, #0
  201e12:	b2db      	uxtb	r3, r3
}
  201e14:	4618      	mov	r0, r3
  201e16:	b002      	add	sp, #8
  201e18:	4770      	bx	lr
  201e1a:	bf00      	nop
  201e1c:	0000      	movs	r0, r0
	...

00201e20 <queue_prio_insert.lto_priv.236>:
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
  201e20:	b084      	sub	sp, #16
  201e22:	9001      	str	r0, [sp, #4]
  201e24:	9100      	str	r1, [sp, #0]
  thread_t *cp = (thread_t *)tqp;
  201e26:	9b00      	ldr	r3, [sp, #0]
  201e28:	9303      	str	r3, [sp, #12]
    cp = cp->queue.next;
  201e2a:	9b03      	ldr	r3, [sp, #12]
  201e2c:	681b      	ldr	r3, [r3, #0]
  201e2e:	9303      	str	r3, [sp, #12]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  201e30:	9a03      	ldr	r2, [sp, #12]
  201e32:	9b00      	ldr	r3, [sp, #0]
  201e34:	429a      	cmp	r2, r3
  201e36:	d005      	beq.n	201e44 <queue_prio_insert.lto_priv.236+0x24>
  201e38:	9b03      	ldr	r3, [sp, #12]
  201e3a:	689a      	ldr	r2, [r3, #8]
  201e3c:	9b01      	ldr	r3, [sp, #4]
  201e3e:	689b      	ldr	r3, [r3, #8]
  201e40:	429a      	cmp	r2, r3
  201e42:	d2f2      	bcs.n	201e2a <queue_prio_insert.lto_priv.236+0xa>
  tp->queue.next             = cp;
  201e44:	9b01      	ldr	r3, [sp, #4]
  201e46:	9a03      	ldr	r2, [sp, #12]
  201e48:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
  201e4a:	9b03      	ldr	r3, [sp, #12]
  201e4c:	685a      	ldr	r2, [r3, #4]
  201e4e:	9b01      	ldr	r3, [sp, #4]
  201e50:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  201e52:	9b01      	ldr	r3, [sp, #4]
  201e54:	685b      	ldr	r3, [r3, #4]
  201e56:	9a01      	ldr	r2, [sp, #4]
  201e58:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
  201e5a:	9b03      	ldr	r3, [sp, #12]
  201e5c:	9a01      	ldr	r2, [sp, #4]
  201e5e:	605a      	str	r2, [r3, #4]
}
  201e60:	b004      	add	sp, #16
  201e62:	4770      	bx	lr
	...

00201e70 <queue_fifo_remove.lto_priv.224>:
static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  201e70:	b084      	sub	sp, #16
  201e72:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
  201e74:	9b01      	ldr	r3, [sp, #4]
  201e76:	681b      	ldr	r3, [r3, #0]
  201e78:	9303      	str	r3, [sp, #12]
  tqp->next             = tp->queue.next;
  201e7a:	9b03      	ldr	r3, [sp, #12]
  201e7c:	681a      	ldr	r2, [r3, #0]
  201e7e:	9b01      	ldr	r3, [sp, #4]
  201e80:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201e82:	9b01      	ldr	r3, [sp, #4]
  201e84:	681b      	ldr	r3, [r3, #0]
  201e86:	9a01      	ldr	r2, [sp, #4]
  201e88:	605a      	str	r2, [r3, #4]
  return tp;
  201e8a:	9b03      	ldr	r3, [sp, #12]
}
  201e8c:	4618      	mov	r0, r3
  201e8e:	b004      	add	sp, #16
  201e90:	4770      	bx	lr
  201e92:	bf00      	nop
	...

00201ea0 <queue_dequeue.lto_priv.243>:
static inline thread_t *queue_dequeue(thread_t *tp) {
  201ea0:	b082      	sub	sp, #8
  201ea2:	9001      	str	r0, [sp, #4]
  tp->queue.prev->queue.next = tp->queue.next;
  201ea4:	9b01      	ldr	r3, [sp, #4]
  201ea6:	685b      	ldr	r3, [r3, #4]
  201ea8:	9a01      	ldr	r2, [sp, #4]
  201eaa:	6812      	ldr	r2, [r2, #0]
  201eac:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  201eae:	9b01      	ldr	r3, [sp, #4]
  201eb0:	681b      	ldr	r3, [r3, #0]
  201eb2:	9a01      	ldr	r2, [sp, #4]
  201eb4:	6852      	ldr	r2, [r2, #4]
  201eb6:	605a      	str	r2, [r3, #4]
  return tp;
  201eb8:	9b01      	ldr	r3, [sp, #4]
}
  201eba:	4618      	mov	r0, r3
  201ebc:	b002      	add	sp, #8
  201ebe:	4770      	bx	lr

00201ec0 <chSysLock.lto_priv.136>:
static inline void chSysLock(void) {
  201ec0:	b508      	push	{r3, lr}
  port_lock();
  201ec2:	f7ff ff75 	bl	201db0 <port_lock.lto_priv.61>
  _dbg_check_lock();
  201ec6:	f7fe fcdb 	bl	200880 <_dbg_check_lock>
}
  201eca:	bd08      	pop	{r3, pc}
  201ecc:	0000      	movs	r0, r0
	...

00201ed0 <chSysUnlock.lto_priv.100>:
static inline void chSysUnlock(void) {
  201ed0:	b508      	push	{r3, lr}
  _dbg_check_unlock();
  201ed2:	f7fe fced 	bl	2008b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
  201ed6:	4b09      	ldr	r3, [pc, #36]	; (201efc <chSysUnlock.lto_priv.100+0x2c>)
  201ed8:	681b      	ldr	r3, [r3, #0]
  201eda:	4a08      	ldr	r2, [pc, #32]	; (201efc <chSysUnlock.lto_priv.100+0x2c>)
  201edc:	4293      	cmp	r3, r2
  201ede:	d00a      	beq.n	201ef6 <chSysUnlock.lto_priv.100+0x26>
  201ee0:	4b06      	ldr	r3, [pc, #24]	; (201efc <chSysUnlock.lto_priv.100+0x2c>)
  201ee2:	699b      	ldr	r3, [r3, #24]
  201ee4:	689a      	ldr	r2, [r3, #8]
  201ee6:	4b05      	ldr	r3, [pc, #20]	; (201efc <chSysUnlock.lto_priv.100+0x2c>)
  201ee8:	681b      	ldr	r3, [r3, #0]
  201eea:	689b      	ldr	r3, [r3, #8]
  201eec:	429a      	cmp	r2, r3
  201eee:	d202      	bcs.n	201ef6 <chSysUnlock.lto_priv.100+0x26>
  201ef0:	4803      	ldr	r0, [pc, #12]	; (201f00 <chSysUnlock.lto_priv.100+0x30>)
  201ef2:	f7fe fc6d 	bl	2007d0 <chSysHalt>
  port_unlock();
  201ef6:	f7ff ff6b 	bl	201dd0 <port_unlock.lto_priv.37>
}
  201efa:	bd08      	pop	{r3, pc}
  201efc:	200008d8 	.word	0x200008d8
  201f00:	08004b40 	.word	0x08004b40
	...

00201f10 <chMtxQueueNotEmptyS>:
 * @return              The mutex queue status.
 *
 * @deprecated
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {
  201f10:	b500      	push	{lr}
  201f12:	b083      	sub	sp, #12
  201f14:	9001      	str	r0, [sp, #4]

  chDbgCheckClassS();
  201f16:	f7fe fd6b 	bl	2009f0 <chDbgCheckClassS>

  return queue_notempty(&mp->queue);
  201f1a:	9b01      	ldr	r3, [sp, #4]
  201f1c:	4618      	mov	r0, r3
  201f1e:	f7ff ff6f 	bl	201e00 <queue_notempty.lto_priv.240>
  201f22:	4603      	mov	r3, r0
}
  201f24:	4618      	mov	r0, r3
  201f26:	b003      	add	sp, #12
  201f28:	f85d fb04 	ldr.w	pc, [sp], #4
  201f2c:	0000      	movs	r0, r0
	...

00201f30 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
  201f30:	b500      	push	{lr}
  201f32:	b083      	sub	sp, #12
  201f34:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);
  201f36:	9b01      	ldr	r3, [sp, #4]
  201f38:	2b00      	cmp	r3, #0
  201f3a:	d102      	bne.n	201f42 <chMtxObjectInit+0x12>
  201f3c:	4806      	ldr	r0, [pc, #24]	; (201f58 <chMtxObjectInit+0x28>)
  201f3e:	f7fe fc47 	bl	2007d0 <chSysHalt>

  queue_init(&mp->queue);
  201f42:	9b01      	ldr	r3, [sp, #4]
  201f44:	4618      	mov	r0, r3
  201f46:	f7ff ff4b 	bl	201de0 <queue_init.lto_priv.175>
  mp->owner = NULL;
  201f4a:	9b01      	ldr	r3, [sp, #4]
  201f4c:	2200      	movs	r2, #0
  201f4e:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
  201f50:	b003      	add	sp, #12
  201f52:	f85d fb04 	ldr.w	pc, [sp], #4
  201f56:	bf00      	nop
  201f58:	08004b30 	.word	0x08004b30
  201f5c:	00000000 	.word	0x00000000

00201f60 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
  201f60:	b500      	push	{lr}
  201f62:	b083      	sub	sp, #12
  201f64:	9001      	str	r0, [sp, #4]

  chSysLock();
  201f66:	f7ff ffab 	bl	201ec0 <chSysLock.lto_priv.136>
  chMtxLockS(mp);
  201f6a:	9801      	ldr	r0, [sp, #4]
  201f6c:	f000 f808 	bl	201f80 <chMtxLockS>
  chSysUnlock();
  201f70:	f7ff ffae 	bl	201ed0 <chSysUnlock.lto_priv.100>
}
  201f74:	b003      	add	sp, #12
  201f76:	f85d fb04 	ldr.w	pc, [sp], #4
  201f7a:	bf00      	nop
  201f7c:	0000      	movs	r0, r0
	...

00201f80 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  201f80:	b500      	push	{lr}
  201f82:	b085      	sub	sp, #20
  201f84:	9001      	str	r0, [sp, #4]
  thread_t *ctp = currp;
  201f86:	4b3b      	ldr	r3, [pc, #236]	; (202074 <chMtxLockS+0xf4>)
  201f88:	699b      	ldr	r3, [r3, #24]
  201f8a:	9302      	str	r3, [sp, #8]

  chDbgCheckClassS();
  201f8c:	f7fe fd30 	bl	2009f0 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
  201f90:	9b01      	ldr	r3, [sp, #4]
  201f92:	2b00      	cmp	r3, #0
  201f94:	d102      	bne.n	201f9c <chMtxLockS+0x1c>
  201f96:	4838      	ldr	r0, [pc, #224]	; (202078 <chMtxLockS+0xf8>)
  201f98:	f7fe fc1a 	bl	2007d0 <chSysHalt>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
  201f9c:	9b01      	ldr	r3, [sp, #4]
  201f9e:	689b      	ldr	r3, [r3, #8]
  201fa0:	2b00      	cmp	r3, #0
  201fa2:	d059      	beq.n	202058 <chMtxLockS+0xd8>
    else {
#endif
      /* Priority inheritance protocol; explores the thread-mutex dependencies
         boosting the priority of all the affected threads to equal the
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;
  201fa4:	9b01      	ldr	r3, [sp, #4]
  201fa6:	689b      	ldr	r3, [r3, #8]
  201fa8:	9303      	str	r3, [sp, #12]
  201faa:	e033      	b.n	202014 <chMtxLockS+0x94>

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;
  201fac:	9b02      	ldr	r3, [sp, #8]
  201fae:	689a      	ldr	r2, [r3, #8]
  201fb0:	9b03      	ldr	r3, [sp, #12]
  201fb2:	609a      	str	r2, [r3, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
  201fb4:	9b03      	ldr	r3, [sp, #12]
  201fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
  201fba:	2b06      	cmp	r3, #6
  201fbc:	d004      	beq.n	201fc8 <chMtxLockS+0x48>
  201fbe:	2b07      	cmp	r3, #7
  201fc0:	d011      	beq.n	201fe6 <chMtxLockS+0x66>
  201fc2:	2b00      	cmp	r3, #0
  201fc4:	d01a      	beq.n	201ffc <chMtxLockS+0x7c>
          tp->state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
          break;
        default:
  201fc6:	e02b      	b.n	202020 <chMtxLockS+0xa0>
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
  201fc8:	9803      	ldr	r0, [sp, #12]
  201fca:	f7ff ff69 	bl	201ea0 <queue_dequeue.lto_priv.243>
  201fce:	4602      	mov	r2, r0
  201fd0:	9b03      	ldr	r3, [sp, #12]
  201fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  201fd4:	4619      	mov	r1, r3
  201fd6:	4610      	mov	r0, r2
  201fd8:	f7ff ff22 	bl	201e20 <queue_prio_insert.lto_priv.236>
          tp = tp->u.wtmtxp->owner;
  201fdc:	9b03      	ldr	r3, [sp, #12]
  201fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  201fe0:	689b      	ldr	r3, [r3, #8]
  201fe2:	9303      	str	r3, [sp, #12]
  201fe4:	e016      	b.n	202014 <chMtxLockS+0x94>
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
  201fe6:	9803      	ldr	r0, [sp, #12]
  201fe8:	f7ff ff5a 	bl	201ea0 <queue_dequeue.lto_priv.243>
  201fec:	4602      	mov	r2, r0
  201fee:	9b03      	ldr	r3, [sp, #12]
  201ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  201ff2:	4619      	mov	r1, r3
  201ff4:	4610      	mov	r0, r2
  201ff6:	f7ff ff13 	bl	201e20 <queue_prio_insert.lto_priv.236>
        default:
  201ffa:	e011      	b.n	202020 <chMtxLockS+0xa0>
          tp->state = CH_STATE_CURRENT;
  201ffc:	9b03      	ldr	r3, [sp, #12]
  201ffe:	2201      	movs	r2, #1
  202000:	f883 2020 	strb.w	r2, [r3, #32]
          (void) chSchReadyI(queue_dequeue(tp));
  202004:	9803      	ldr	r0, [sp, #12]
  202006:	f7ff ff4b 	bl	201ea0 <queue_dequeue.lto_priv.243>
  20200a:	4603      	mov	r3, r0
  20200c:	4618      	mov	r0, r3
  20200e:	f7ff f87f 	bl	201110 <chSchReadyI>
        default:
  202012:	e005      	b.n	202020 <chMtxLockS+0xa0>
      while (tp->prio < ctp->prio) {
  202014:	9b03      	ldr	r3, [sp, #12]
  202016:	689a      	ldr	r2, [r3, #8]
  202018:	9b02      	ldr	r3, [sp, #8]
  20201a:	689b      	ldr	r3, [r3, #8]
  20201c:	429a      	cmp	r2, r3
  20201e:	d3c5      	bcc.n	201fac <chMtxLockS+0x2c>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
  202020:	9b01      	ldr	r3, [sp, #4]
  202022:	4619      	mov	r1, r3
  202024:	9802      	ldr	r0, [sp, #8]
  202026:	f7ff fefb 	bl	201e20 <queue_prio_insert.lto_priv.236>
      ctp->u.wtmtxp = mp;
  20202a:	9b02      	ldr	r3, [sp, #8]
  20202c:	9a01      	ldr	r2, [sp, #4]
  20202e:	625a      	str	r2, [r3, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
  202030:	2006      	movs	r0, #6
  202032:	f7ff f8ed 	bl	201210 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
  202036:	9b01      	ldr	r3, [sp, #4]
  202038:	689b      	ldr	r3, [r3, #8]
  20203a:	9a02      	ldr	r2, [sp, #8]
  20203c:	429a      	cmp	r2, r3
  20203e:	d002      	beq.n	202046 <chMtxLockS+0xc6>
  202040:	480d      	ldr	r0, [pc, #52]	; (202078 <chMtxLockS+0xf8>)
  202042:	f7fe fbc5 	bl	2007d0 <chSysHalt>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
  202046:	9b02      	ldr	r3, [sp, #8]
  202048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  20204a:	9a01      	ldr	r2, [sp, #4]
  20204c:	429a      	cmp	r2, r3
  20204e:	d00d      	beq.n	20206c <chMtxLockS+0xec>
  202050:	4809      	ldr	r0, [pc, #36]	; (202078 <chMtxLockS+0xf8>)
  202052:	f7fe fbbd 	bl	2007d0 <chSysHalt>
  202056:	e009      	b.n	20206c <chMtxLockS+0xec>
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
  202058:	9b01      	ldr	r3, [sp, #4]
  20205a:	9a02      	ldr	r2, [sp, #8]
  20205c:	609a      	str	r2, [r3, #8]
    mp->next = ctp->mtxlist;
  20205e:	9b02      	ldr	r3, [sp, #8]
  202060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  202062:	9b01      	ldr	r3, [sp, #4]
  202064:	60da      	str	r2, [r3, #12]
    ctp->mtxlist = mp;
  202066:	9b02      	ldr	r3, [sp, #8]
  202068:	9a01      	ldr	r2, [sp, #4]
  20206a:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
  20206c:	b005      	add	sp, #20
  20206e:	f85d fb04 	ldr.w	pc, [sp], #4
  202072:	bf00      	nop
  202074:	200008d8 	.word	0x200008d8
  202078:	08004b4c 	.word	0x08004b4c
  20207c:	00000000 	.word	0x00000000

00202080 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  202080:	b500      	push	{lr}
  202082:	b087      	sub	sp, #28
  202084:	9001      	str	r0, [sp, #4]
  thread_t *ctp = currp;
  202086:	4b35      	ldr	r3, [pc, #212]	; (20215c <chMtxUnlock+0xdc>)
  202088:	699b      	ldr	r3, [r3, #24]
  20208a:	9303      	str	r3, [sp, #12]
  mutex_t *lmp;

  chDbgCheck(mp != NULL);
  20208c:	9b01      	ldr	r3, [sp, #4]
  20208e:	2b00      	cmp	r3, #0
  202090:	d102      	bne.n	202098 <chMtxUnlock+0x18>
  202092:	4833      	ldr	r0, [pc, #204]	; (202160 <chMtxUnlock+0xe0>)
  202094:	f7fe fb9c 	bl	2007d0 <chSysHalt>

  chSysLock();
  202098:	f7ff ff12 	bl	201ec0 <chSysLock.lto_priv.136>

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
  20209c:	9b03      	ldr	r3, [sp, #12]
  20209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  2020a0:	2b00      	cmp	r3, #0
  2020a2:	d102      	bne.n	2020aa <chMtxUnlock+0x2a>
  2020a4:	482e      	ldr	r0, [pc, #184]	; (202160 <chMtxUnlock+0xe0>)
  2020a6:	f7fe fb93 	bl	2007d0 <chSysHalt>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
  2020aa:	9b03      	ldr	r3, [sp, #12]
  2020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  2020ae:	689b      	ldr	r3, [r3, #8]
  2020b0:	9a03      	ldr	r2, [sp, #12]
  2020b2:	429a      	cmp	r2, r3
  2020b4:	d002      	beq.n	2020bc <chMtxUnlock+0x3c>
  2020b6:	482a      	ldr	r0, [pc, #168]	; (202160 <chMtxUnlock+0xe0>)
  2020b8:	f7fe fb8a 	bl	2007d0 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
  2020bc:	9b03      	ldr	r3, [sp, #12]
  2020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  2020c0:	9a01      	ldr	r2, [sp, #4]
  2020c2:	429a      	cmp	r2, r3
  2020c4:	d002      	beq.n	2020cc <chMtxUnlock+0x4c>
  2020c6:	4826      	ldr	r0, [pc, #152]	; (202160 <chMtxUnlock+0xe0>)
  2020c8:	f7fe fb82 	bl	2007d0 <chSysHalt>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
  2020cc:	9b01      	ldr	r3, [sp, #4]
  2020ce:	68da      	ldr	r2, [r3, #12]
  2020d0:	9b03      	ldr	r3, [sp, #12]
  2020d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
  2020d4:	9801      	ldr	r0, [sp, #4]
  2020d6:	f7ff ff1b 	bl	201f10 <chMtxQueueNotEmptyS>
  2020da:	4603      	mov	r3, r0
  2020dc:	2b00      	cmp	r3, #0
  2020de:	d034      	beq.n	20214a <chMtxUnlock+0xca>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
  2020e0:	9b03      	ldr	r3, [sp, #12]
  2020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  2020e4:	9304      	str	r3, [sp, #16]
      lmp = ctp->mtxlist;
  2020e6:	9b03      	ldr	r3, [sp, #12]
  2020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  2020ea:	9305      	str	r3, [sp, #20]
  2020ec:	e012      	b.n	202114 <chMtxUnlock+0x94>
      while (lmp != NULL) {
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
  2020ee:	9805      	ldr	r0, [sp, #20]
  2020f0:	f7ff ff0e 	bl	201f10 <chMtxQueueNotEmptyS>
  2020f4:	4603      	mov	r3, r0
  2020f6:	2b00      	cmp	r3, #0
  2020f8:	d009      	beq.n	20210e <chMtxUnlock+0x8e>
            (lmp->queue.next->prio > newprio)) {
  2020fa:	9b05      	ldr	r3, [sp, #20]
  2020fc:	681b      	ldr	r3, [r3, #0]
  2020fe:	689b      	ldr	r3, [r3, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
  202100:	9a04      	ldr	r2, [sp, #16]
  202102:	429a      	cmp	r2, r3
  202104:	d203      	bcs.n	20210e <chMtxUnlock+0x8e>
          newprio = lmp->queue.next->prio;
  202106:	9b05      	ldr	r3, [sp, #20]
  202108:	681b      	ldr	r3, [r3, #0]
  20210a:	689b      	ldr	r3, [r3, #8]
  20210c:	9304      	str	r3, [sp, #16]
        }
        lmp = lmp->next;
  20210e:	9b05      	ldr	r3, [sp, #20]
  202110:	68db      	ldr	r3, [r3, #12]
  202112:	9305      	str	r3, [sp, #20]
      while (lmp != NULL) {
  202114:	9b05      	ldr	r3, [sp, #20]
  202116:	2b00      	cmp	r3, #0
  202118:	d1e9      	bne.n	2020ee <chMtxUnlock+0x6e>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
  20211a:	9b03      	ldr	r3, [sp, #12]
  20211c:	9a04      	ldr	r2, [sp, #16]
  20211e:	609a      	str	r2, [r3, #8]
      /* Awakens the highest priority thread waiting for the unlocked mutex and
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
  202120:	9b01      	ldr	r3, [sp, #4]
  202122:	4618      	mov	r0, r3
  202124:	f7ff fea4 	bl	201e70 <queue_fifo_remove.lto_priv.224>
  202128:	9002      	str	r0, [sp, #8]
      mp->owner = tp;
  20212a:	9b01      	ldr	r3, [sp, #4]
  20212c:	9a02      	ldr	r2, [sp, #8]
  20212e:	609a      	str	r2, [r3, #8]
      mp->next = tp->mtxlist;
  202130:	9b02      	ldr	r3, [sp, #8]
  202132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  202134:	9b01      	ldr	r3, [sp, #4]
  202136:	60da      	str	r2, [r3, #12]
      tp->mtxlist = mp;
  202138:	9b02      	ldr	r3, [sp, #8]
  20213a:	9a01      	ldr	r2, [sp, #4]
  20213c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
  20213e:	9802      	ldr	r0, [sp, #8]
  202140:	f7fe ffe6 	bl	201110 <chSchReadyI>
      chSchRescheduleS();
  202144:	f7ff f96c 	bl	201420 <chSchRescheduleS>
  202148:	e002      	b.n	202150 <chMtxUnlock+0xd0>
    }
    else {
      mp->owner = NULL;
  20214a:	9b01      	ldr	r3, [sp, #4]
  20214c:	2200      	movs	r2, #0
  20214e:	609a      	str	r2, [r3, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
  202150:	f7ff febe 	bl	201ed0 <chSysUnlock.lto_priv.100>
}
  202154:	b007      	add	sp, #28
  202156:	f85d fb04 	ldr.w	pc, [sp], #4
  20215a:	bf00      	nop
  20215c:	200008d8 	.word	0x200008d8
  202160:	08004b58 	.word	0x08004b58
	...

00202170 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  202170:	b500      	push	{lr}
  202172:	b085      	sub	sp, #20
  202174:	9001      	str	r0, [sp, #4]
  202176:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  202178:	f7fe fc22 	bl	2009c0 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
  20217c:	9b01      	ldr	r3, [sp, #4]
  20217e:	2b00      	cmp	r3, #0
  202180:	d102      	bne.n	202188 <chEvtBroadcastFlagsI+0x18>
  202182:	4814      	ldr	r0, [pc, #80]	; (2021d4 <chEvtBroadcastFlagsI+0x64>)
  202184:	f7fe fb24 	bl	2007d0 <chSysHalt>

  elp = esp->next;
  202188:	9b01      	ldr	r3, [sp, #4]
  20218a:	681b      	ldr	r3, [r3, #0]
  20218c:	9303      	str	r3, [sp, #12]
  20218e:	e019      	b.n	2021c4 <chEvtBroadcastFlagsI+0x54>
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
  202190:	9b03      	ldr	r3, [sp, #12]
  202192:	68da      	ldr	r2, [r3, #12]
  202194:	9b00      	ldr	r3, [sp, #0]
  202196:	431a      	orrs	r2, r3
  202198:	9b03      	ldr	r3, [sp, #12]
  20219a:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
  20219c:	9b00      	ldr	r3, [sp, #0]
  20219e:	2b00      	cmp	r3, #0
  2021a0:	d005      	beq.n	2021ae <chEvtBroadcastFlagsI+0x3e>
        ((flags & elp->wflags) != (eventflags_t)0)) {
  2021a2:	9b03      	ldr	r3, [sp, #12]
  2021a4:	691a      	ldr	r2, [r3, #16]
  2021a6:	9b00      	ldr	r3, [sp, #0]
  2021a8:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
  2021aa:	2b00      	cmp	r3, #0
  2021ac:	d007      	beq.n	2021be <chEvtBroadcastFlagsI+0x4e>
      chEvtSignalI(elp->listener, elp->events);
  2021ae:	9b03      	ldr	r3, [sp, #12]
  2021b0:	685a      	ldr	r2, [r3, #4]
  2021b2:	9b03      	ldr	r3, [sp, #12]
  2021b4:	689b      	ldr	r3, [r3, #8]
  2021b6:	4619      	mov	r1, r3
  2021b8:	4610      	mov	r0, r2
  2021ba:	f000 f811 	bl	2021e0 <chEvtSignalI>
    }
    elp = elp->next;
  2021be:	9b03      	ldr	r3, [sp, #12]
  2021c0:	681b      	ldr	r3, [r3, #0]
  2021c2:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
  2021c4:	9a03      	ldr	r2, [sp, #12]
  2021c6:	9b01      	ldr	r3, [sp, #4]
  2021c8:	429a      	cmp	r2, r3
  2021ca:	d1e1      	bne.n	202190 <chEvtBroadcastFlagsI+0x20>
  }
}
  2021cc:	b005      	add	sp, #20
  2021ce:	f85d fb04 	ldr.w	pc, [sp], #4
  2021d2:	bf00      	nop
  2021d4:	08004b64 	.word	0x08004b64
	...

002021e0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
  2021e0:	b500      	push	{lr}
  2021e2:	b083      	sub	sp, #12
  2021e4:	9001      	str	r0, [sp, #4]
  2021e6:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  2021e8:	f7fe fbea 	bl	2009c0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
  2021ec:	9b01      	ldr	r3, [sp, #4]
  2021ee:	2b00      	cmp	r3, #0
  2021f0:	d102      	bne.n	2021f8 <chEvtSignalI+0x18>
  2021f2:	4816      	ldr	r0, [pc, #88]	; (20224c <chEvtSignalI+0x6c>)
  2021f4:	f7fe faec 	bl	2007d0 <chSysHalt>

  tp->epending |= events;
  2021f8:	9b01      	ldr	r3, [sp, #4]
  2021fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  2021fc:	9b00      	ldr	r3, [sp, #0]
  2021fe:	431a      	orrs	r2, r3
  202200:	9b01      	ldr	r3, [sp, #4]
  202202:	635a      	str	r2, [r3, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
  202204:	9b01      	ldr	r3, [sp, #4]
  202206:	f893 3020 	ldrb.w	r3, [r3, #32]
  20220a:	2b0a      	cmp	r3, #10
  20220c:	d106      	bne.n	20221c <chEvtSignalI+0x3c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  20220e:	9b01      	ldr	r3, [sp, #4]
  202210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  202212:	9b01      	ldr	r3, [sp, #4]
  202214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  202216:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
  202218:	2b00      	cmp	r3, #0
  20221a:	d10d      	bne.n	202238 <chEvtSignalI+0x58>
      ((tp->state == CH_STATE_WTANDEVT) &&
  20221c:	9b01      	ldr	r3, [sp, #4]
  20221e:	f893 3020 	ldrb.w	r3, [r3, #32]
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  202222:	2b0b      	cmp	r3, #11
  202224:	d10e      	bne.n	202244 <chEvtSignalI+0x64>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  202226:	9b01      	ldr	r3, [sp, #4]
  202228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  20222a:	9b01      	ldr	r3, [sp, #4]
  20222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  20222e:	401a      	ands	r2, r3
  202230:	9b01      	ldr	r3, [sp, #4]
  202232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  202234:	429a      	cmp	r2, r3
  202236:	d105      	bne.n	202244 <chEvtSignalI+0x64>
    tp->u.rdymsg = MSG_OK;
  202238:	9b01      	ldr	r3, [sp, #4]
  20223a:	2200      	movs	r2, #0
  20223c:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  20223e:	9801      	ldr	r0, [sp, #4]
  202240:	f7fe ff66 	bl	201110 <chSchReadyI>
  }
}
  202244:	b003      	add	sp, #12
  202246:	f85d fb04 	ldr.w	pc, [sp], #4
  20224a:	bf00      	nop
  20224c:	08004b7c 	.word	0x08004b7c

00202250 <port_lock.lto_priv.67>:
static inline void port_lock(void) {
  202250:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  202252:	b672      	cpsid	i
  202254:	2320      	movs	r3, #32
  202256:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  202258:	9b01      	ldr	r3, [sp, #4]
  20225a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  20225e:	b662      	cpsie	i
}
  202260:	b002      	add	sp, #8
  202262:	4770      	bx	lr
	...

00202270 <port_unlock.lto_priv.43>:
static inline void port_unlock(void) {
  202270:	b082      	sub	sp, #8
  202272:	2300      	movs	r3, #0
  202274:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  202276:	9b01      	ldr	r3, [sp, #4]
  202278:	f383 8811 	msr	BASEPRI, r3
}
  20227c:	b002      	add	sp, #8
  20227e:	4770      	bx	lr

00202280 <chSysLock.lto_priv.142>:
static inline void chSysLock(void) {
  202280:	b508      	push	{r3, lr}
  port_lock();
  202282:	f7ff ffe5 	bl	202250 <port_lock.lto_priv.67>
  _dbg_check_lock();
  202286:	f7fe fafb 	bl	200880 <_dbg_check_lock>
}
  20228a:	bd08      	pop	{r3, pc}
  20228c:	0000      	movs	r0, r0
	...

00202290 <chSysUnlock.lto_priv.106>:
static inline void chSysUnlock(void) {
  202290:	b508      	push	{r3, lr}
  _dbg_check_unlock();
  202292:	f7fe fb0d 	bl	2008b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
  202296:	4b09      	ldr	r3, [pc, #36]	; (2022bc <chSysUnlock.lto_priv.106+0x2c>)
  202298:	681b      	ldr	r3, [r3, #0]
  20229a:	4a08      	ldr	r2, [pc, #32]	; (2022bc <chSysUnlock.lto_priv.106+0x2c>)
  20229c:	4293      	cmp	r3, r2
  20229e:	d00a      	beq.n	2022b6 <chSysUnlock.lto_priv.106+0x26>
  2022a0:	4b06      	ldr	r3, [pc, #24]	; (2022bc <chSysUnlock.lto_priv.106+0x2c>)
  2022a2:	699b      	ldr	r3, [r3, #24]
  2022a4:	689a      	ldr	r2, [r3, #8]
  2022a6:	4b05      	ldr	r3, [pc, #20]	; (2022bc <chSysUnlock.lto_priv.106+0x2c>)
  2022a8:	681b      	ldr	r3, [r3, #0]
  2022aa:	689b      	ldr	r3, [r3, #8]
  2022ac:	429a      	cmp	r2, r3
  2022ae:	d202      	bcs.n	2022b6 <chSysUnlock.lto_priv.106+0x26>
  2022b0:	4803      	ldr	r0, [pc, #12]	; (2022c0 <chSysUnlock.lto_priv.106+0x30>)
  2022b2:	f7fe fa8d 	bl	2007d0 <chSysHalt>
  port_unlock();
  2022b6:	f7ff ffdb 	bl	202270 <port_unlock.lto_priv.43>
}
  2022ba:	bd08      	pop	{r3, pc}
  2022bc:	200008d8 	.word	0x200008d8
  2022c0:	08004bac 	.word	0x08004bac
	...

002022d0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
  2022d0:	4b03      	ldr	r3, [pc, #12]	; (2022e0 <_core_init+0x10>)
  2022d2:	4a04      	ldr	r2, [pc, #16]	; (2022e4 <_core_init+0x14>)
  2022d4:	601a      	str	r2, [r3, #0]
  ch_memcore.endmem  = __heap_end__;
  2022d6:	4b02      	ldr	r3, [pc, #8]	; (2022e0 <_core_init+0x10>)
  2022d8:	4a03      	ldr	r2, [pc, #12]	; (2022e8 <_core_init+0x18>)
  2022da:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
  2022dc:	4770      	bx	lr
  2022de:	bf00      	nop
  2022e0:	20001160 	.word	0x20001160
  2022e4:	20010060 	.word	0x20010060
  2022e8:	20050000 	.word	0x20050000
  2022ec:	00000000 	.word	0x00000000

002022f0 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
  2022f0:	b500      	push	{lr}
  2022f2:	b087      	sub	sp, #28
  2022f4:	9003      	str	r0, [sp, #12]
  2022f6:	9102      	str	r1, [sp, #8]
  2022f8:	9201      	str	r2, [sp, #4]
  uint8_t *p, *next;

  chDbgCheckClassI();
  2022fa:	f7fe fb61 	bl	2009c0 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
  2022fe:	9b02      	ldr	r3, [sp, #8]
  202300:	2b00      	cmp	r3, #0
  202302:	d005      	beq.n	202310 <chCoreAllocAlignedWithOffsetI+0x20>
  202304:	9b02      	ldr	r3, [sp, #8]
  202306:	1e5a      	subs	r2, r3, #1
  202308:	9b02      	ldr	r3, [sp, #8]
  20230a:	4013      	ands	r3, r2
  20230c:	2b00      	cmp	r3, #0
  20230e:	d002      	beq.n	202316 <chCoreAllocAlignedWithOffsetI+0x26>
  202310:	4817      	ldr	r0, [pc, #92]	; (202370 <chCoreAllocAlignedWithOffsetI+0x80>)
  202312:	f7fe fa5d 	bl	2007d0 <chSysHalt>

  size = MEM_ALIGN_NEXT(size, align);
  202316:	9a02      	ldr	r2, [sp, #8]
  202318:	9b03      	ldr	r3, [sp, #12]
  20231a:	4413      	add	r3, r2
  20231c:	1e5a      	subs	r2, r3, #1
  20231e:	9b02      	ldr	r3, [sp, #8]
  202320:	425b      	negs	r3, r3
  202322:	4013      	ands	r3, r2
  202324:	9303      	str	r3, [sp, #12]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  202326:	4b13      	ldr	r3, [pc, #76]	; (202374 <chCoreAllocAlignedWithOffsetI+0x84>)
  202328:	681a      	ldr	r2, [r3, #0]
  20232a:	9b01      	ldr	r3, [sp, #4]
  20232c:	4413      	add	r3, r2
  20232e:	461a      	mov	r2, r3
  202330:	9b02      	ldr	r3, [sp, #8]
  202332:	4413      	add	r3, r2
  202334:	1e5a      	subs	r2, r3, #1
  202336:	9b02      	ldr	r3, [sp, #8]
  202338:	425b      	negs	r3, r3
  20233a:	4013      	ands	r3, r2
  20233c:	9305      	str	r3, [sp, #20]
  next = p + size;
  20233e:	9a05      	ldr	r2, [sp, #20]
  202340:	9b03      	ldr	r3, [sp, #12]
  202342:	4413      	add	r3, r2
  202344:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  202346:	4b0b      	ldr	r3, [pc, #44]	; (202374 <chCoreAllocAlignedWithOffsetI+0x84>)
  202348:	685b      	ldr	r3, [r3, #4]
  20234a:	9a04      	ldr	r2, [sp, #16]
  20234c:	429a      	cmp	r2, r3
  20234e:	d804      	bhi.n	20235a <chCoreAllocAlignedWithOffsetI+0x6a>
  202350:	4b08      	ldr	r3, [pc, #32]	; (202374 <chCoreAllocAlignedWithOffsetI+0x84>)
  202352:	681b      	ldr	r3, [r3, #0]
  202354:	9a04      	ldr	r2, [sp, #16]
  202356:	429a      	cmp	r2, r3
  202358:	d201      	bcs.n	20235e <chCoreAllocAlignedWithOffsetI+0x6e>
    return NULL;
  20235a:	2300      	movs	r3, #0
  20235c:	e003      	b.n	202366 <chCoreAllocAlignedWithOffsetI+0x76>
  }

  ch_memcore.nextmem = next;
  20235e:	4a05      	ldr	r2, [pc, #20]	; (202374 <chCoreAllocAlignedWithOffsetI+0x84>)
  202360:	9b04      	ldr	r3, [sp, #16]
  202362:	6013      	str	r3, [r2, #0]

  return p;
  202364:	9b05      	ldr	r3, [sp, #20]
}
  202366:	4618      	mov	r0, r3
  202368:	b007      	add	sp, #28
  20236a:	f85d fb04 	ldr.w	pc, [sp], #4
  20236e:	bf00      	nop
  202370:	08004b8c 	.word	0x08004b8c
  202374:	20001160 	.word	0x20001160
	...

00202380 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
  202380:	b500      	push	{lr}
  202382:	b087      	sub	sp, #28
  202384:	9003      	str	r0, [sp, #12]
  202386:	9102      	str	r1, [sp, #8]
  202388:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
  20238a:	f7ff ff79 	bl	202280 <chSysLock.lto_priv.142>
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  20238e:	9a01      	ldr	r2, [sp, #4]
  202390:	9902      	ldr	r1, [sp, #8]
  202392:	9803      	ldr	r0, [sp, #12]
  202394:	f7ff ffac 	bl	2022f0 <chCoreAllocAlignedWithOffsetI>
  202398:	9005      	str	r0, [sp, #20]
  chSysUnlock();
  20239a:	f7ff ff79 	bl	202290 <chSysUnlock.lto_priv.106>

  return p;
  20239e:	9b05      	ldr	r3, [sp, #20]
}
  2023a0:	4618      	mov	r0, r3
  2023a2:	b007      	add	sp, #28
  2023a4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

002023b0 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  2023b0:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
  2023b2:	4b06      	ldr	r3, [pc, #24]	; (2023cc <_heap_init+0x1c>)
  2023b4:	4a06      	ldr	r2, [pc, #24]	; (2023d0 <_heap_init+0x20>)
  2023b6:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
  2023b8:	4b04      	ldr	r3, [pc, #16]	; (2023cc <_heap_init+0x1c>)
  2023ba:	2200      	movs	r2, #0
  2023bc:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
  2023be:	4b03      	ldr	r3, [pc, #12]	; (2023cc <_heap_init+0x1c>)
  2023c0:	2200      	movs	r2, #0
  2023c2:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
  2023c4:	4803      	ldr	r0, [pc, #12]	; (2023d4 <_heap_init+0x24>)
  2023c6:	f7ff fdb3 	bl	201f30 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
  2023ca:	bd08      	pop	{r3, pc}
  2023cc:	20001168 	.word	0x20001168
  2023d0:	00202381 	.word	0x00202381
  2023d4:	20001174 	.word	0x20001174
	...

002023e0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
  2023e0:	b500      	push	{lr}
  2023e2:	b087      	sub	sp, #28
  2023e4:	9001      	str	r0, [sp, #4]
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
  2023e6:	9b01      	ldr	r3, [sp, #4]
  2023e8:	2b00      	cmp	r3, #0
  2023ea:	d004      	beq.n	2023f6 <chHeapFree+0x16>
  2023ec:	9b01      	ldr	r3, [sp, #4]
  2023ee:	f003 0307 	and.w	r3, r3, #7
  2023f2:	2b00      	cmp	r3, #0
  2023f4:	d002      	beq.n	2023fc <chHeapFree+0x1c>
  2023f6:	483d      	ldr	r0, [pc, #244]	; (2024ec <chHeapFree+0x10c>)
  2023f8:	f7fe f9ea 	bl	2007d0 <chSysHalt>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  2023fc:	9b01      	ldr	r3, [sp, #4]
  2023fe:	3b08      	subs	r3, #8
  202400:	9304      	str	r3, [sp, #16]
  /*lint -restore*/
  heapp = H_HEAP(hp);
  202402:	9b04      	ldr	r3, [sp, #16]
  202404:	681b      	ldr	r3, [r3, #0]
  202406:	9303      	str	r3, [sp, #12]
  qp = &heapp->header;
  202408:	9b03      	ldr	r3, [sp, #12]
  20240a:	3304      	adds	r3, #4
  20240c:	9305      	str	r3, [sp, #20]

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
  20240e:	9b04      	ldr	r3, [sp, #16]
  202410:	685b      	ldr	r3, [r3, #4]
  202412:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
  202414:	08da      	lsrs	r2, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
  202416:	9b04      	ldr	r3, [sp, #16]
  202418:	605a      	str	r2, [r3, #4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
  20241a:	9b03      	ldr	r3, [sp, #12]
  20241c:	330c      	adds	r3, #12
  20241e:	4618      	mov	r0, r3
  202420:	f7ff fd9e 	bl	201f60 <chMtxLock>

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
  202424:	9a04      	ldr	r2, [sp, #16]
  202426:	9b05      	ldr	r3, [sp, #20]
  202428:	429a      	cmp	r2, r3
  20242a:	d30b      	bcc.n	202444 <chHeapFree+0x64>
  20242c:	9b05      	ldr	r3, [sp, #20]
  20242e:	685b      	ldr	r3, [r3, #4]
  202430:	3301      	adds	r3, #1
  202432:	00db      	lsls	r3, r3, #3
  202434:	9a05      	ldr	r2, [sp, #20]
  202436:	4413      	add	r3, r2
  202438:	9a04      	ldr	r2, [sp, #16]
  20243a:	429a      	cmp	r2, r3
  20243c:	d202      	bcs.n	202444 <chHeapFree+0x64>
  20243e:	482b      	ldr	r0, [pc, #172]	; (2024ec <chHeapFree+0x10c>)
  202440:	f7fe f9c6 	bl	2007d0 <chSysHalt>

    if (((qp == &heapp->header) || (hp > qp)) &&
  202444:	9b03      	ldr	r3, [sp, #12]
  202446:	3304      	adds	r3, #4
  202448:	9a05      	ldr	r2, [sp, #20]
  20244a:	429a      	cmp	r2, r3
  20244c:	d003      	beq.n	202456 <chHeapFree+0x76>
  20244e:	9a04      	ldr	r2, [sp, #16]
  202450:	9b05      	ldr	r3, [sp, #20]
  202452:	429a      	cmp	r2, r3
  202454:	d942      	bls.n	2024dc <chHeapFree+0xfc>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
  202456:	9b05      	ldr	r3, [sp, #20]
  202458:	681b      	ldr	r3, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
  20245a:	2b00      	cmp	r3, #0
  20245c:	d004      	beq.n	202468 <chHeapFree+0x88>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
  20245e:	9b05      	ldr	r3, [sp, #20]
  202460:	681b      	ldr	r3, [r3, #0]
  202462:	9a04      	ldr	r2, [sp, #16]
  202464:	429a      	cmp	r2, r3
  202466:	d239      	bcs.n	2024dc <chHeapFree+0xfc>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
  202468:	9b05      	ldr	r3, [sp, #20]
  20246a:	681a      	ldr	r2, [r3, #0]
  20246c:	9b04      	ldr	r3, [sp, #16]
  20246e:	601a      	str	r2, [r3, #0]
      H_NEXT(qp) = hp;
  202470:	9b05      	ldr	r3, [sp, #20]
  202472:	9a04      	ldr	r2, [sp, #16]
  202474:	601a      	str	r2, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
  202476:	9b04      	ldr	r3, [sp, #16]
  202478:	685b      	ldr	r3, [r3, #4]
  20247a:	3301      	adds	r3, #1
  20247c:	00db      	lsls	r3, r3, #3
  20247e:	9a04      	ldr	r2, [sp, #16]
  202480:	441a      	add	r2, r3
  202482:	9b04      	ldr	r3, [sp, #16]
  202484:	681b      	ldr	r3, [r3, #0]
  202486:	429a      	cmp	r2, r3
  202488:	d10d      	bne.n	2024a6 <chHeapFree+0xc6>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
  20248a:	9b04      	ldr	r3, [sp, #16]
  20248c:	685a      	ldr	r2, [r3, #4]
  20248e:	9b04      	ldr	r3, [sp, #16]
  202490:	681b      	ldr	r3, [r3, #0]
  202492:	685b      	ldr	r3, [r3, #4]
  202494:	4413      	add	r3, r2
  202496:	1c5a      	adds	r2, r3, #1
  202498:	9b04      	ldr	r3, [sp, #16]
  20249a:	605a      	str	r2, [r3, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
  20249c:	9b04      	ldr	r3, [sp, #16]
  20249e:	681b      	ldr	r3, [r3, #0]
  2024a0:	681a      	ldr	r2, [r3, #0]
  2024a2:	9b04      	ldr	r3, [sp, #16]
  2024a4:	601a      	str	r2, [r3, #0]
      }
      if ((H_LIMIT(qp) == hp)) {
  2024a6:	9b05      	ldr	r3, [sp, #20]
  2024a8:	685b      	ldr	r3, [r3, #4]
  2024aa:	3301      	adds	r3, #1
  2024ac:	00db      	lsls	r3, r3, #3
  2024ae:	9a05      	ldr	r2, [sp, #20]
  2024b0:	4413      	add	r3, r2
  2024b2:	9a04      	ldr	r2, [sp, #16]
  2024b4:	429a      	cmp	r2, r3
  2024b6:	d10b      	bne.n	2024d0 <chHeapFree+0xf0>
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
  2024b8:	9b05      	ldr	r3, [sp, #20]
  2024ba:	685a      	ldr	r2, [r3, #4]
  2024bc:	9b04      	ldr	r3, [sp, #16]
  2024be:	685b      	ldr	r3, [r3, #4]
  2024c0:	4413      	add	r3, r2
  2024c2:	1c5a      	adds	r2, r3, #1
  2024c4:	9b05      	ldr	r3, [sp, #20]
  2024c6:	605a      	str	r2, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
  2024c8:	9b04      	ldr	r3, [sp, #16]
  2024ca:	681a      	ldr	r2, [r3, #0]
  2024cc:	9b05      	ldr	r3, [sp, #20]
  2024ce:	601a      	str	r2, [r3, #0]
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
  2024d0:	9b03      	ldr	r3, [sp, #12]
  2024d2:	330c      	adds	r3, #12
  2024d4:	4618      	mov	r0, r3
  2024d6:	f7ff fdd3 	bl	202080 <chMtxUnlock>
  2024da:	e003      	b.n	2024e4 <chHeapFree+0x104>
    qp = H_NEXT(qp);
  2024dc:	9b05      	ldr	r3, [sp, #20]
  2024de:	681b      	ldr	r3, [r3, #0]
  2024e0:	9305      	str	r3, [sp, #20]
  2024e2:	e79f      	b.n	202424 <chHeapFree+0x44>

  return;
}
  2024e4:	b007      	add	sp, #28
  2024e6:	f85d fb04 	ldr.w	pc, [sp], #4
  2024ea:	bf00      	nop
  2024ec:	08004bb8 	.word	0x08004bb8

002024f0 <port_lock.lto_priv.68>:
static inline void port_lock(void) {
  2024f0:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  2024f2:	b672      	cpsid	i
  2024f4:	2320      	movs	r3, #32
  2024f6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2024f8:	9b01      	ldr	r3, [sp, #4]
  2024fa:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  2024fe:	b662      	cpsie	i
}
  202500:	b002      	add	sp, #8
  202502:	4770      	bx	lr
	...

00202510 <port_unlock.lto_priv.44>:
static inline void port_unlock(void) {
  202510:	b082      	sub	sp, #8
  202512:	2300      	movs	r3, #0
  202514:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  202516:	9b01      	ldr	r3, [sp, #4]
  202518:	f383 8811 	msr	BASEPRI, r3
}
  20251c:	b002      	add	sp, #8
  20251e:	4770      	bx	lr

00202520 <chSysLock.lto_priv.143>:
static inline void chSysLock(void) {
  202520:	b508      	push	{r3, lr}
  port_lock();
  202522:	f7ff ffe5 	bl	2024f0 <port_lock.lto_priv.68>
  _dbg_check_lock();
  202526:	f7fe f9ab 	bl	200880 <_dbg_check_lock>
}
  20252a:	bd08      	pop	{r3, pc}
  20252c:	0000      	movs	r0, r0
	...

00202530 <chSysUnlock.lto_priv.107>:
static inline void chSysUnlock(void) {
  202530:	b508      	push	{r3, lr}
  _dbg_check_unlock();
  202532:	f7fe f9bd 	bl	2008b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
  202536:	4b09      	ldr	r3, [pc, #36]	; (20255c <chSysUnlock.lto_priv.107+0x2c>)
  202538:	681b      	ldr	r3, [r3, #0]
  20253a:	4a08      	ldr	r2, [pc, #32]	; (20255c <chSysUnlock.lto_priv.107+0x2c>)
  20253c:	4293      	cmp	r3, r2
  20253e:	d00a      	beq.n	202556 <chSysUnlock.lto_priv.107+0x26>
  202540:	4b06      	ldr	r3, [pc, #24]	; (20255c <chSysUnlock.lto_priv.107+0x2c>)
  202542:	699b      	ldr	r3, [r3, #24]
  202544:	689a      	ldr	r2, [r3, #8]
  202546:	4b05      	ldr	r3, [pc, #20]	; (20255c <chSysUnlock.lto_priv.107+0x2c>)
  202548:	681b      	ldr	r3, [r3, #0]
  20254a:	689b      	ldr	r3, [r3, #8]
  20254c:	429a      	cmp	r2, r3
  20254e:	d202      	bcs.n	202556 <chSysUnlock.lto_priv.107+0x26>
  202550:	4803      	ldr	r0, [pc, #12]	; (202560 <chSysUnlock.lto_priv.107+0x30>)
  202552:	f7fe f93d 	bl	2007d0 <chSysHalt>
  port_unlock();
  202556:	f7ff ffdb 	bl	202510 <port_unlock.lto_priv.44>
}
  20255a:	bd08      	pop	{r3, pc}
  20255c:	200008d8 	.word	0x200008d8
  202560:	08004bc4 	.word	0x08004bc4
	...

00202570 <chPoolFreeI>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  202570:	b500      	push	{lr}
  202572:	b085      	sub	sp, #20
  202574:	9001      	str	r0, [sp, #4]
  202576:	9100      	str	r1, [sp, #0]
  struct pool_header *php = objp;
  202578:	9b00      	ldr	r3, [sp, #0]
  20257a:	9303      	str	r3, [sp, #12]

  chDbgCheckClassI();
  20257c:	f7fe fa20 	bl	2009c0 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) && (objp != NULL));
  202580:	9b01      	ldr	r3, [sp, #4]
  202582:	2b00      	cmp	r3, #0
  202584:	d002      	beq.n	20258c <chPoolFreeI+0x1c>
  202586:	9b00      	ldr	r3, [sp, #0]
  202588:	2b00      	cmp	r3, #0
  20258a:	d102      	bne.n	202592 <chPoolFreeI+0x22>
  20258c:	4806      	ldr	r0, [pc, #24]	; (2025a8 <chPoolFreeI+0x38>)
  20258e:	f7fe f91f 	bl	2007d0 <chSysHalt>

  php->next = mp->next;
  202592:	9b01      	ldr	r3, [sp, #4]
  202594:	681a      	ldr	r2, [r3, #0]
  202596:	9b03      	ldr	r3, [sp, #12]
  202598:	601a      	str	r2, [r3, #0]
  mp->next = php;
  20259a:	9b01      	ldr	r3, [sp, #4]
  20259c:	9a03      	ldr	r2, [sp, #12]
  20259e:	601a      	str	r2, [r3, #0]
}
  2025a0:	b005      	add	sp, #20
  2025a2:	f85d fb04 	ldr.w	pc, [sp], #4
  2025a6:	bf00      	nop
  2025a8:	08004bd0 	.word	0x08004bd0
  2025ac:	00000000 	.word	0x00000000

002025b0 <chPoolFree>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chPoolFree(memory_pool_t *mp, void *objp) {
  2025b0:	b500      	push	{lr}
  2025b2:	b083      	sub	sp, #12
  2025b4:	9001      	str	r0, [sp, #4]
  2025b6:	9100      	str	r1, [sp, #0]

  chSysLock();
  2025b8:	f7ff ffb2 	bl	202520 <chSysLock.lto_priv.143>
  chPoolFreeI(mp, objp);
  2025bc:	9900      	ldr	r1, [sp, #0]
  2025be:	9801      	ldr	r0, [sp, #4]
  2025c0:	f7ff ffd6 	bl	202570 <chPoolFreeI>
  chSysUnlock();
  2025c4:	f7ff ffb4 	bl	202530 <chSysUnlock.lto_priv.107>
}
  2025c8:	b003      	add	sp, #12
  2025ca:	f85d fb04 	ldr.w	pc, [sp], #4
  2025ce:	bf00      	nop

002025d0 <port_lock.lto_priv.69>:
static inline void port_lock(void) {
  2025d0:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  2025d2:	b672      	cpsid	i
  2025d4:	2320      	movs	r3, #32
  2025d6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2025d8:	9b01      	ldr	r3, [sp, #4]
  2025da:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  2025de:	b662      	cpsie	i
}
  2025e0:	b002      	add	sp, #8
  2025e2:	4770      	bx	lr
	...

002025f0 <port_unlock.lto_priv.45>:
static inline void port_unlock(void) {
  2025f0:	b082      	sub	sp, #8
  2025f2:	2300      	movs	r3, #0
  2025f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2025f6:	9b01      	ldr	r3, [sp, #4]
  2025f8:	f383 8811 	msr	BASEPRI, r3
}
  2025fc:	b002      	add	sp, #8
  2025fe:	4770      	bx	lr

00202600 <port_lock_from_isr.lto_priv.27>:
static inline void port_lock_from_isr(void) {
  202600:	b508      	push	{r3, lr}
  port_lock();
  202602:	f7ff ffe5 	bl	2025d0 <port_lock.lto_priv.69>
}
  202606:	bd08      	pop	{r3, pc}
	...

00202610 <port_unlock_from_isr.lto_priv.20>:
static inline void port_unlock_from_isr(void) {
  202610:	b508      	push	{r3, lr}
  port_unlock();
  202612:	f7ff ffed 	bl	2025f0 <port_unlock.lto_priv.45>
}
  202616:	bd08      	pop	{r3, pc}
	...

00202620 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  202620:	b590      	push	{r4, r7, lr}
  202622:	b083      	sub	sp, #12
  202624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  202626:	f3ef 8309 	mrs	r3, PSP
  20262a:	461c      	mov	r4, r3
  return(result);
  20262c:	4623      	mov	r3, r4
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
#endif

  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();
  20262e:	607b      	str	r3, [r7, #4]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
  202630:	687b      	ldr	r3, [r7, #4]
  202632:	3320      	adds	r3, #32
  202634:	607b      	str	r3, [r7, #4]

  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);
  202636:	687b      	ldr	r3, [r7, #4]
  202638:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20263a:	683b      	ldr	r3, [r7, #0]
  20263c:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
  202640:	f7ff ffe6 	bl	202610 <port_unlock_from_isr.lto_priv.20>
}
  202644:	370c      	adds	r7, #12
  202646:	46bd      	mov	sp, r7
  202648:	bd90      	pop	{r4, r7, pc}
  20264a:	bf00      	nop
  20264c:	0000      	movs	r0, r0
	...

00202650 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
  202650:	b590      	push	{r4, r7, lr}
  202652:	b083      	sub	sp, #12
  202654:	af00      	add	r7, sp, #0

  port_lock_from_isr();
  202656:	f7ff ffd3 	bl	202600 <port_lock_from_isr.lto_priv.27>
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  20265a:	4b14      	ldr	r3, [pc, #80]	; (2026ac <_port_irq_epilogue+0x5c>)
  20265c:	685b      	ldr	r3, [r3, #4]
  20265e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  202662:	2b00      	cmp	r3, #0
  202664:	d01d      	beq.n	2026a2 <_port_irq_epilogue+0x52>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  202666:	f3ef 8309 	mrs	r3, PSP
  20266a:	461c      	mov	r4, r3
  return(result);
  20266c:	4623      	mov	r3, r4
      /* Enforcing a lazy FPU state save by accessing the FPCSR register.*/
      (void) __get_FPSCR();
#endif

    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();
  20266e:	607b      	str	r3, [r7, #4]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
  202670:	687b      	ldr	r3, [r7, #4]
  202672:	3b20      	subs	r3, #32
  202674:	607b      	str	r3, [r7, #4]

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  202676:	687b      	ldr	r3, [r7, #4]
  202678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  20267c:	61da      	str	r2, [r3, #28]
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
#endif

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);
  20267e:	687b      	ldr	r3, [r7, #4]
  202680:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  202682:	683b      	ldr	r3, [r7, #0]
  202684:	f383 8809 	msr	PSP, r3

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  202688:	f7fe feda 	bl	201440 <chSchIsPreemptionRequired>
  20268c:	4603      	mov	r3, r0
  20268e:	2b00      	cmp	r3, #0
  202690:	d003      	beq.n	20269a <_port_irq_epilogue+0x4a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  202692:	687b      	ldr	r3, [r7, #4]
  202694:	4a06      	ldr	r2, [pc, #24]	; (2026b0 <_port_irq_epilogue+0x60>)
  202696:	619a      	str	r2, [r3, #24]
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  202698:	e005      	b.n	2026a6 <_port_irq_epilogue+0x56>
  20269a:	687b      	ldr	r3, [r7, #4]
  20269c:	4a05      	ldr	r2, [pc, #20]	; (2026b4 <_port_irq_epilogue+0x64>)
  20269e:	619a      	str	r2, [r3, #24]
  2026a0:	e001      	b.n	2026a6 <_port_irq_epilogue+0x56>

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
  2026a2:	f7ff ffb5 	bl	202610 <port_unlock_from_isr.lto_priv.20>
}
  2026a6:	370c      	adds	r7, #12
  2026a8:	46bd      	mov	sp, r7
  2026aa:	bd90      	pop	{r4, r7, pc}
  2026ac:	e000ed00 	.word	0xe000ed00
  2026b0:	002002fd 	.word	0x002002fd
  2026b4:	00200308 	.word	0x00200308
	...

002026c0 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
  2026c0:	4770      	bx	lr
  2026c2:	bf00      	nop
	...

002026d0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
  2026d0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
  2026d2:	f7ff fff5 	bl	2026c0 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
  2026d6:	f000 ffab 	bl	203630 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
  2026da:	4807      	ldr	r0, [pc, #28]	; (2026f8 <halInit+0x28>)
  2026dc:	f001 f8a0 	bl	203820 <_pal_lld_init>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
  2026e0:	f000 fbee 	bl	202ec0 <icuInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
  2026e4:	f000 fcc4 	bl	203070 <pwmInit>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
  2026e8:	f000 fef2 	bl	2034d0 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
  2026ec:	f002 f850 	bl	204790 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
  2026f0:	f000 f83e 	bl	202770 <stInit>
#endif
}
  2026f4:	bd08      	pop	{r3, pc}
  2026f6:	bf00      	nop
  2026f8:	08004db0 	.word	0x08004db0
  2026fc:	00000000 	.word	0x00000000

00202700 <st_lld_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {
  202700:	b082      	sub	sp, #8
  202702:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  202704:	4a05      	ldr	r2, [pc, #20]	; (20271c <st_lld_start_alarm+0x1c>)
  202706:	9b01      	ldr	r3, [sp, #4]
  202708:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
  20270a:	4b04      	ldr	r3, [pc, #16]	; (20271c <st_lld_start_alarm+0x1c>)
  20270c:	2200      	movs	r2, #0
  20270e:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  202710:	4b02      	ldr	r3, [pc, #8]	; (20271c <st_lld_start_alarm+0x1c>)
  202712:	2202      	movs	r2, #2
  202714:	60da      	str	r2, [r3, #12]
}
  202716:	b002      	add	sp, #8
  202718:	4770      	bx	lr
  20271a:	bf00      	nop
  20271c:	40000c00 	.word	0x40000c00

00202720 <st_lld_stop_alarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
  202720:	4b01      	ldr	r3, [pc, #4]	; (202728 <st_lld_stop_alarm+0x8>)
  202722:	2200      	movs	r2, #0
  202724:	60da      	str	r2, [r3, #12]
}
  202726:	4770      	bx	lr
  202728:	40000c00 	.word	0x40000c00
  20272c:	00000000 	.word	0x00000000

00202730 <st_lld_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {
  202730:	b082      	sub	sp, #8
  202732:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  202734:	4a02      	ldr	r2, [pc, #8]	; (202740 <st_lld_set_alarm+0x10>)
  202736:	9b01      	ldr	r3, [sp, #4]
  202738:	6353      	str	r3, [r2, #52]	; 0x34
}
  20273a:	b002      	add	sp, #8
  20273c:	4770      	bx	lr
  20273e:	bf00      	nop
  202740:	40000c00 	.word	0x40000c00
	...

00202750 <st_lld_is_alarm_active>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
  202750:	4b05      	ldr	r3, [pc, #20]	; (202768 <st_lld_is_alarm_active+0x18>)
  202752:	68db      	ldr	r3, [r3, #12]
  202754:	f003 0302 	and.w	r3, r3, #2
  202758:	2b00      	cmp	r3, #0
  20275a:	bf14      	ite	ne
  20275c:	2301      	movne	r3, #1
  20275e:	2300      	moveq	r3, #0
  202760:	b2db      	uxtb	r3, r3
}
  202762:	4618      	mov	r0, r3
  202764:	4770      	bx	lr
  202766:	bf00      	nop
  202768:	40000c00 	.word	0x40000c00
  20276c:	00000000 	.word	0x00000000

00202770 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
  202770:	b508      	push	{r3, lr}

  st_lld_init();
  202772:	f001 f9f5 	bl	203b60 <st_lld_init>
}
  202776:	bd08      	pop	{r3, pc}
	...

00202780 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
  202780:	b500      	push	{lr}
  202782:	b083      	sub	sp, #12
  202784:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");
  202786:	f7ff ffe3 	bl	202750 <st_lld_is_alarm_active>
  20278a:	4603      	mov	r3, r0
  20278c:	2b00      	cmp	r3, #0
  20278e:	d002      	beq.n	202796 <stStartAlarm+0x16>
  202790:	4804      	ldr	r0, [pc, #16]	; (2027a4 <stStartAlarm+0x24>)
  202792:	f7fe f81d 	bl	2007d0 <chSysHalt>

  st_lld_start_alarm(abstime);
  202796:	9801      	ldr	r0, [sp, #4]
  202798:	f7ff ffb2 	bl	202700 <st_lld_start_alarm>
}
  20279c:	b003      	add	sp, #12
  20279e:	f85d fb04 	ldr.w	pc, [sp], #4
  2027a2:	bf00      	nop
  2027a4:	08004bdc 	.word	0x08004bdc
	...

002027b0 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
  2027b0:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
  2027b2:	f7ff ffb5 	bl	202720 <st_lld_stop_alarm>
}
  2027b6:	bd08      	pop	{r3, pc}
	...

002027c0 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
  2027c0:	b500      	push	{lr}
  2027c2:	b083      	sub	sp, #12
  2027c4:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
  2027c6:	f7ff ffc3 	bl	202750 <st_lld_is_alarm_active>
  2027ca:	4603      	mov	r3, r0
  2027cc:	f083 0301 	eor.w	r3, r3, #1
  2027d0:	b2db      	uxtb	r3, r3
  2027d2:	2b00      	cmp	r3, #0
  2027d4:	d002      	beq.n	2027dc <stSetAlarm+0x1c>
  2027d6:	4804      	ldr	r0, [pc, #16]	; (2027e8 <stSetAlarm+0x28>)
  2027d8:	f7fd fffa 	bl	2007d0 <chSysHalt>

  st_lld_set_alarm(abstime);
  2027dc:	9801      	ldr	r0, [sp, #4]
  2027de:	f7ff ffa7 	bl	202730 <st_lld_set_alarm>
}
  2027e2:	b003      	add	sp, #12
  2027e4:	f85d fb04 	ldr.w	pc, [sp], #4
  2027e8:	08004bec 	.word	0x08004bec
  2027ec:	00000000 	.word	0x00000000

002027f0 <port_lock.lto_priv.71>:
static inline void port_lock(void) {
  2027f0:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  2027f2:	b672      	cpsid	i
  2027f4:	2320      	movs	r3, #32
  2027f6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2027f8:	9b01      	ldr	r3, [sp, #4]
  2027fa:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  2027fe:	b662      	cpsie	i
}
  202800:	b002      	add	sp, #8
  202802:	4770      	bx	lr
	...

00202810 <port_unlock.lto_priv.47>:
static inline void port_unlock(void) {
  202810:	b082      	sub	sp, #8
  202812:	2300      	movs	r3, #0
  202814:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  202816:	9b01      	ldr	r3, [sp, #4]
  202818:	f383 8811 	msr	BASEPRI, r3
}
  20281c:	b002      	add	sp, #8
  20281e:	4770      	bx	lr

00202820 <st_lld_get_counter.lto_priv.189>:
  return (systime_t)STM32_ST_TIM->CNT;
  202820:	4b01      	ldr	r3, [pc, #4]	; (202828 <st_lld_get_counter.lto_priv.189+0x8>)
  202822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  202824:	4618      	mov	r0, r3
  202826:	4770      	bx	lr
  202828:	40000c00 	.word	0x40000c00
  20282c:	00000000 	.word	0x00000000

00202830 <port_timer_get_time.lto_priv.184>:
static inline systime_t port_timer_get_time(void) {
  202830:	b508      	push	{r3, lr}
  return stGetCounter();
  202832:	f7ff fff5 	bl	202820 <st_lld_get_counter.lto_priv.189>
  202836:	4603      	mov	r3, r0
}
  202838:	4618      	mov	r0, r3
  20283a:	bd08      	pop	{r3, pc}
  20283c:	0000      	movs	r0, r0
	...

00202840 <queue_init.lto_priv.179>:
static inline void queue_init(threads_queue_t *tqp) {
  202840:	b082      	sub	sp, #8
  202842:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
  202844:	9b01      	ldr	r3, [sp, #4]
  202846:	9a01      	ldr	r2, [sp, #4]
  202848:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  20284a:	9b01      	ldr	r3, [sp, #4]
  20284c:	9a01      	ldr	r2, [sp, #4]
  20284e:	605a      	str	r2, [r3, #4]
}
  202850:	b002      	add	sp, #8
  202852:	4770      	bx	lr
	...

00202860 <chSysLock.lto_priv.145>:
static inline void chSysLock(void) {
  202860:	b508      	push	{r3, lr}
  port_lock();
  202862:	f7ff ffc5 	bl	2027f0 <port_lock.lto_priv.71>
  _dbg_check_lock();
  202866:	f7fe f80b 	bl	200880 <_dbg_check_lock>
}
  20286a:	bd08      	pop	{r3, pc}
  20286c:	0000      	movs	r0, r0
	...

00202870 <chSysUnlock.lto_priv.109>:
static inline void chSysUnlock(void) {
  202870:	b508      	push	{r3, lr}
  _dbg_check_unlock();
  202872:	f7fe f81d 	bl	2008b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
  202876:	4b09      	ldr	r3, [pc, #36]	; (20289c <chSysUnlock.lto_priv.109+0x2c>)
  202878:	681b      	ldr	r3, [r3, #0]
  20287a:	4a08      	ldr	r2, [pc, #32]	; (20289c <chSysUnlock.lto_priv.109+0x2c>)
  20287c:	4293      	cmp	r3, r2
  20287e:	d00a      	beq.n	202896 <chSysUnlock.lto_priv.109+0x26>
  202880:	4b06      	ldr	r3, [pc, #24]	; (20289c <chSysUnlock.lto_priv.109+0x2c>)
  202882:	699b      	ldr	r3, [r3, #24]
  202884:	689a      	ldr	r2, [r3, #8]
  202886:	4b05      	ldr	r3, [pc, #20]	; (20289c <chSysUnlock.lto_priv.109+0x2c>)
  202888:	681b      	ldr	r3, [r3, #0]
  20288a:	689b      	ldr	r3, [r3, #8]
  20288c:	429a      	cmp	r2, r3
  20288e:	d202      	bcs.n	202896 <chSysUnlock.lto_priv.109+0x26>
  202890:	4803      	ldr	r0, [pc, #12]	; (2028a0 <chSysUnlock.lto_priv.109+0x30>)
  202892:	f7fd ff9d 	bl	2007d0 <chSysHalt>
  port_unlock();
  202896:	f7ff ffbb 	bl	202810 <port_unlock.lto_priv.47>
}
  20289a:	bd08      	pop	{r3, pc}
  20289c:	200008d8 	.word	0x200008d8
  2028a0:	08004bf8 	.word	0x08004bf8
	...

002028b0 <chVTGetSystemTimeX.lto_priv.171>:
static inline systime_t chVTGetSystemTimeX(void) {
  2028b0:	b508      	push	{r3, lr}
  return port_timer_get_time();
  2028b2:	f7ff ffbd 	bl	202830 <port_timer_get_time.lto_priv.184>
  2028b6:	4603      	mov	r3, r0
}
  2028b8:	4618      	mov	r0, r3
  2028ba:	bd08      	pop	{r3, pc}
  2028bc:	0000      	movs	r0, r0
	...

002028c0 <chThdQueueObjectInit.lto_priv.166>:
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
  2028c0:	b500      	push	{lr}
  2028c2:	b083      	sub	sp, #12
  2028c4:	9001      	str	r0, [sp, #4]
  queue_init(tqp);
  2028c6:	9801      	ldr	r0, [sp, #4]
  2028c8:	f7ff ffba 	bl	202840 <queue_init.lto_priv.179>
}
  2028cc:	b003      	add	sp, #12
  2028ce:	f85d fb04 	ldr.w	pc, [sp], #4
  2028d2:	bf00      	nop
	...

002028e0 <osalSysLock.lto_priv.90>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
  2028e0:	b508      	push	{r3, lr}

  chSysLock();
  2028e2:	f7ff ffbd 	bl	202860 <chSysLock.lto_priv.145>
}
  2028e6:	bd08      	pop	{r3, pc}
	...

002028f0 <osalSysUnlock.lto_priv.84>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
  2028f0:	b508      	push	{r3, lr}

  chSysUnlock();
  2028f2:	f7ff ffbd 	bl	202870 <chSysUnlock.lto_priv.109>
}
  2028f6:	bd08      	pop	{r3, pc}
	...

00202900 <osalOsGetSystemTimeX>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t osalOsGetSystemTimeX(void) {
  202900:	b508      	push	{r3, lr}

  return chVTGetSystemTimeX();
  202902:	f7ff ffd5 	bl	2028b0 <chVTGetSystemTimeX.lto_priv.171>
  202906:	4603      	mov	r3, r0
}
  202908:	4618      	mov	r0, r3
  20290a:	bd08      	pop	{r3, pc}
  20290c:	0000      	movs	r0, r0
	...

00202910 <osalThreadQueueObjectInit.lto_priv.163>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
  202910:	b500      	push	{lr}
  202912:	b083      	sub	sp, #12
  202914:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
  202916:	9801      	ldr	r0, [sp, #4]
  202918:	f7ff ffd2 	bl	2028c0 <chThdQueueObjectInit.lto_priv.166>
}
  20291c:	b003      	add	sp, #12
  20291e:	f85d fb04 	ldr.w	pc, [sp], #4
  202922:	bf00      	nop
	...

00202930 <osalThreadEnqueueTimeoutS.lto_priv.161>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {
  202930:	b500      	push	{lr}
  202932:	b083      	sub	sp, #12
  202934:	9001      	str	r0, [sp, #4]
  202936:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, time);
  202938:	9900      	ldr	r1, [sp, #0]
  20293a:	9801      	ldr	r0, [sp, #4]
  20293c:	f7ff f8a0 	bl	201a80 <chThdEnqueueTimeoutS>
  202940:	4603      	mov	r3, r0
}
  202942:	4618      	mov	r0, r3
  202944:	b003      	add	sp, #12
  202946:	f85d fb04 	ldr.w	pc, [sp], #4
  20294a:	bf00      	nop
  20294c:	0000      	movs	r0, r0
	...

00202950 <osalThreadDequeueNextI.lto_priv.159>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  202950:	b500      	push	{lr}
  202952:	b083      	sub	sp, #12
  202954:	9001      	str	r0, [sp, #4]
  202956:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
  202958:	9900      	ldr	r1, [sp, #0]
  20295a:	9801      	ldr	r0, [sp, #4]
  20295c:	f7ff f8b0 	bl	201ac0 <chThdDequeueNextI>
}
  202960:	b003      	add	sp, #12
  202962:	f85d fb04 	ldr.w	pc, [sp], #4
  202966:	bf00      	nop
	...

00202970 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
  202970:	b500      	push	{lr}
  202972:	b085      	sub	sp, #20
  202974:	9003      	str	r0, [sp, #12]
  202976:	9102      	str	r1, [sp, #8]
  202978:	9201      	str	r2, [sp, #4]
  20297a:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
  20297c:	9b03      	ldr	r3, [sp, #12]
  20297e:	4618      	mov	r0, r3
  202980:	f7ff ffc6 	bl	202910 <osalThreadQueueObjectInit.lto_priv.163>
  iqp->q_counter = 0;
  202984:	9b03      	ldr	r3, [sp, #12]
  202986:	2200      	movs	r2, #0
  202988:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
  20298a:	9b03      	ldr	r3, [sp, #12]
  20298c:	9a02      	ldr	r2, [sp, #8]
  20298e:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
  202990:	9b03      	ldr	r3, [sp, #12]
  202992:	9a02      	ldr	r2, [sp, #8]
  202994:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
  202996:	9b03      	ldr	r3, [sp, #12]
  202998:	9a02      	ldr	r2, [sp, #8]
  20299a:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
  20299c:	9a02      	ldr	r2, [sp, #8]
  20299e:	9b01      	ldr	r3, [sp, #4]
  2029a0:	441a      	add	r2, r3
  2029a2:	9b03      	ldr	r3, [sp, #12]
  2029a4:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
  2029a6:	9b03      	ldr	r3, [sp, #12]
  2029a8:	9a00      	ldr	r2, [sp, #0]
  2029aa:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
  2029ac:	9b03      	ldr	r3, [sp, #12]
  2029ae:	9a06      	ldr	r2, [sp, #24]
  2029b0:	621a      	str	r2, [r3, #32]
}
  2029b2:	b005      	add	sp, #20
  2029b4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

002029c0 <iqPutI>:
 * @retval MSG_TIMEOUT  if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
  2029c0:	b500      	push	{lr}
  2029c2:	b083      	sub	sp, #12
  2029c4:	9001      	str	r0, [sp, #4]
  2029c6:	460b      	mov	r3, r1
  2029c8:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  2029cc:	f7fd fff8 	bl	2009c0 <chDbgCheckClassI>

  if (iqIsFullI(iqp)) {
  2029d0:	9b01      	ldr	r3, [sp, #4]
  2029d2:	695a      	ldr	r2, [r3, #20]
  2029d4:	9b01      	ldr	r3, [sp, #4]
  2029d6:	699b      	ldr	r3, [r3, #24]
  2029d8:	429a      	cmp	r2, r3
  2029da:	d105      	bne.n	2029e8 <iqPutI+0x28>
  2029dc:	9b01      	ldr	r3, [sp, #4]
  2029de:	689b      	ldr	r3, [r3, #8]
  2029e0:	2b00      	cmp	r3, #0
  2029e2:	d001      	beq.n	2029e8 <iqPutI+0x28>
  2029e4:	2301      	movs	r3, #1
  2029e6:	e000      	b.n	2029ea <iqPutI+0x2a>
  2029e8:	2300      	movs	r3, #0
  2029ea:	f003 0301 	and.w	r3, r3, #1
  2029ee:	b2db      	uxtb	r3, r3
  2029f0:	2b00      	cmp	r3, #0
  2029f2:	d002      	beq.n	2029fa <iqPutI+0x3a>
    return MSG_TIMEOUT;
  2029f4:	f04f 33ff 	mov.w	r3, #4294967295
  2029f8:	e01c      	b.n	202a34 <iqPutI+0x74>
  }

  iqp->q_counter++;
  2029fa:	9b01      	ldr	r3, [sp, #4]
  2029fc:	689b      	ldr	r3, [r3, #8]
  2029fe:	1c5a      	adds	r2, r3, #1
  202a00:	9b01      	ldr	r3, [sp, #4]
  202a02:	609a      	str	r2, [r3, #8]
  *iqp->q_wrptr++ = b;
  202a04:	9b01      	ldr	r3, [sp, #4]
  202a06:	695b      	ldr	r3, [r3, #20]
  202a08:	1c59      	adds	r1, r3, #1
  202a0a:	9a01      	ldr	r2, [sp, #4]
  202a0c:	6151      	str	r1, [r2, #20]
  202a0e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  202a12:	701a      	strb	r2, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
  202a14:	9b01      	ldr	r3, [sp, #4]
  202a16:	695a      	ldr	r2, [r3, #20]
  202a18:	9b01      	ldr	r3, [sp, #4]
  202a1a:	691b      	ldr	r3, [r3, #16]
  202a1c:	429a      	cmp	r2, r3
  202a1e:	d303      	bcc.n	202a28 <iqPutI+0x68>
    iqp->q_wrptr = iqp->q_buffer;
  202a20:	9b01      	ldr	r3, [sp, #4]
  202a22:	68da      	ldr	r2, [r3, #12]
  202a24:	9b01      	ldr	r3, [sp, #4]
  202a26:	615a      	str	r2, [r3, #20]
  }

  osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
  202a28:	9b01      	ldr	r3, [sp, #4]
  202a2a:	2100      	movs	r1, #0
  202a2c:	4618      	mov	r0, r3
  202a2e:	f7ff ff8f 	bl	202950 <osalThreadDequeueNextI.lto_priv.159>

  return MSG_OK;
  202a32:	2300      	movs	r3, #0
}
  202a34:	4618      	mov	r0, r3
  202a36:	b003      	add	sp, #12
  202a38:	f85d fb04 	ldr.w	pc, [sp], #4
  202a3c:	0000      	movs	r0, r0
	...

00202a40 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  202a40:	b500      	push	{lr}
  202a42:	b085      	sub	sp, #20
  202a44:	9001      	str	r0, [sp, #4]
  202a46:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
  202a48:	f7ff ff4a 	bl	2028e0 <osalSysLock.lto_priv.90>
  202a4c:	e00c      	b.n	202a68 <iqGetTimeout+0x28>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
  202a4e:	9b01      	ldr	r3, [sp, #4]
  202a50:	9900      	ldr	r1, [sp, #0]
  202a52:	4618      	mov	r0, r3
  202a54:	f7ff ff6c 	bl	202930 <osalThreadEnqueueTimeoutS.lto_priv.161>
  202a58:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
  202a5a:	9b02      	ldr	r3, [sp, #8]
  202a5c:	2b00      	cmp	r3, #0
  202a5e:	da03      	bge.n	202a68 <iqGetTimeout+0x28>
      osalSysUnlock();
  202a60:	f7ff ff46 	bl	2028f0 <osalSysUnlock.lto_priv.84>
      return msg;
  202a64:	9b02      	ldr	r3, [sp, #8]
  202a66:	e026      	b.n	202ab6 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
  202a68:	9b01      	ldr	r3, [sp, #4]
  202a6a:	689b      	ldr	r3, [r3, #8]
  202a6c:	2b00      	cmp	r3, #0
  202a6e:	d0ee      	beq.n	202a4e <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  202a70:	9b01      	ldr	r3, [sp, #4]
  202a72:	689b      	ldr	r3, [r3, #8]
  202a74:	1e5a      	subs	r2, r3, #1
  202a76:	9b01      	ldr	r3, [sp, #4]
  202a78:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
  202a7a:	9b01      	ldr	r3, [sp, #4]
  202a7c:	699b      	ldr	r3, [r3, #24]
  202a7e:	1c59      	adds	r1, r3, #1
  202a80:	9a01      	ldr	r2, [sp, #4]
  202a82:	6191      	str	r1, [r2, #24]
  202a84:	781b      	ldrb	r3, [r3, #0]
  202a86:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
  202a8a:	9b01      	ldr	r3, [sp, #4]
  202a8c:	699a      	ldr	r2, [r3, #24]
  202a8e:	9b01      	ldr	r3, [sp, #4]
  202a90:	691b      	ldr	r3, [r3, #16]
  202a92:	429a      	cmp	r2, r3
  202a94:	d303      	bcc.n	202a9e <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
  202a96:	9b01      	ldr	r3, [sp, #4]
  202a98:	68da      	ldr	r2, [r3, #12]
  202a9a:	9b01      	ldr	r3, [sp, #4]
  202a9c:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
  202a9e:	9b01      	ldr	r3, [sp, #4]
  202aa0:	69db      	ldr	r3, [r3, #28]
  202aa2:	2b00      	cmp	r3, #0
  202aa4:	d003      	beq.n	202aae <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
  202aa6:	9b01      	ldr	r3, [sp, #4]
  202aa8:	69db      	ldr	r3, [r3, #28]
  202aaa:	9801      	ldr	r0, [sp, #4]
  202aac:	4798      	blx	r3
  }

  osalSysUnlock();
  202aae:	f7ff ff1f 	bl	2028f0 <osalSysUnlock.lto_priv.84>

  return (msg_t)b;
  202ab2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
  202ab6:	4618      	mov	r0, r3
  202ab8:	b005      	add	sp, #20
  202aba:	f85d fb04 	ldr.w	pc, [sp], #4
  202abe:	bf00      	nop

00202ac0 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
  202ac0:	b500      	push	{lr}
  202ac2:	b08b      	sub	sp, #44	; 0x2c
  202ac4:	9003      	str	r0, [sp, #12]
  202ac6:	9102      	str	r1, [sp, #8]
  202ac8:	9201      	str	r2, [sp, #4]
  202aca:	9300      	str	r3, [sp, #0]
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
  202acc:	9b03      	ldr	r3, [sp, #12]
  202ace:	69db      	ldr	r3, [r3, #28]
  202ad0:	9307      	str	r3, [sp, #28]
  size_t r = 0;
  202ad2:	2300      	movs	r3, #0
  202ad4:	9309      	str	r3, [sp, #36]	; 0x24

  osalDbgCheck(n > 0U);
  202ad6:	9b01      	ldr	r3, [sp, #4]
  202ad8:	2b00      	cmp	r3, #0
  202ada:	d102      	bne.n	202ae2 <iqReadTimeout+0x22>
  202adc:	4835      	ldr	r0, [pc, #212]	; (202bb4 <iqReadTimeout+0xf4>)
  202ade:	f7fd fe77 	bl	2007d0 <chSysHalt>

  osalSysLock();
  202ae2:	f7ff fefd 	bl	2028e0 <osalSysLock.lto_priv.90>

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
  202ae6:	f7ff ff0b 	bl	202900 <osalOsGetSystemTimeX>
  202aea:	4602      	mov	r2, r0
  202aec:	9b00      	ldr	r3, [sp, #0]
  202aee:	4413      	add	r3, r2
  202af0:	9306      	str	r3, [sp, #24]
  202af2:	e028      	b.n	202b46 <iqReadTimeout+0x86>
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  202af4:	9b00      	ldr	r3, [sp, #0]
  202af6:	f1b3 3fff 	cmp.w	r3, #4294967295
  202afa:	d002      	beq.n	202b02 <iqReadTimeout+0x42>
  202afc:	9b00      	ldr	r3, [sp, #0]
  202afe:	2b00      	cmp	r3, #0
  202b00:	d106      	bne.n	202b10 <iqReadTimeout+0x50>
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
  202b02:	9b03      	ldr	r3, [sp, #12]
  202b04:	9900      	ldr	r1, [sp, #0]
  202b06:	4618      	mov	r0, r3
  202b08:	f7ff ff12 	bl	202930 <osalThreadEnqueueTimeoutS.lto_priv.161>
  202b0c:	9008      	str	r0, [sp, #32]
  202b0e:	e013      	b.n	202b38 <iqReadTimeout+0x78>
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  202b10:	f7ff fef6 	bl	202900 <osalOsGetSystemTimeX>
  202b14:	4602      	mov	r2, r0
  202b16:	9b06      	ldr	r3, [sp, #24]
  202b18:	1a9b      	subs	r3, r3, r2
  202b1a:	9305      	str	r3, [sp, #20]

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
  202b1c:	9a05      	ldr	r2, [sp, #20]
  202b1e:	9b00      	ldr	r3, [sp, #0]
  202b20:	429a      	cmp	r2, r3
  202b22:	d903      	bls.n	202b2c <iqReadTimeout+0x6c>
          osalSysUnlock();
  202b24:	f7ff fee4 	bl	2028f0 <osalSysUnlock.lto_priv.84>
          return r;
  202b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202b2a:	e03f      	b.n	202bac <iqReadTimeout+0xec>
        }

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
  202b2c:	9b03      	ldr	r3, [sp, #12]
  202b2e:	9905      	ldr	r1, [sp, #20]
  202b30:	4618      	mov	r0, r3
  202b32:	f7ff fefd 	bl	202930 <osalThreadEnqueueTimeoutS.lto_priv.161>
  202b36:	9008      	str	r0, [sp, #32]
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
  202b38:	9b08      	ldr	r3, [sp, #32]
  202b3a:	2b00      	cmp	r3, #0
  202b3c:	d003      	beq.n	202b46 <iqReadTimeout+0x86>
        osalSysUnlock();
  202b3e:	f7ff fed7 	bl	2028f0 <osalSysUnlock.lto_priv.84>
        return r;
  202b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202b44:	e032      	b.n	202bac <iqReadTimeout+0xec>
    while (iqIsEmptyI(iqp)) {
  202b46:	9b03      	ldr	r3, [sp, #12]
  202b48:	689b      	ldr	r3, [r3, #8]
  202b4a:	2b00      	cmp	r3, #0
  202b4c:	d0d2      	beq.n	202af4 <iqReadTimeout+0x34>
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
  202b4e:	9b03      	ldr	r3, [sp, #12]
  202b50:	689b      	ldr	r3, [r3, #8]
  202b52:	1e5a      	subs	r2, r3, #1
  202b54:	9b03      	ldr	r3, [sp, #12]
  202b56:	609a      	str	r2, [r3, #8]
    *bp++ = *iqp->q_rdptr++;
  202b58:	9b03      	ldr	r3, [sp, #12]
  202b5a:	699a      	ldr	r2, [r3, #24]
  202b5c:	1c51      	adds	r1, r2, #1
  202b5e:	9b03      	ldr	r3, [sp, #12]
  202b60:	6199      	str	r1, [r3, #24]
  202b62:	9b02      	ldr	r3, [sp, #8]
  202b64:	1c59      	adds	r1, r3, #1
  202b66:	9102      	str	r1, [sp, #8]
  202b68:	7812      	ldrb	r2, [r2, #0]
  202b6a:	701a      	strb	r2, [r3, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  202b6c:	9b03      	ldr	r3, [sp, #12]
  202b6e:	699a      	ldr	r2, [r3, #24]
  202b70:	9b03      	ldr	r3, [sp, #12]
  202b72:	691b      	ldr	r3, [r3, #16]
  202b74:	429a      	cmp	r2, r3
  202b76:	d303      	bcc.n	202b80 <iqReadTimeout+0xc0>
      iqp->q_rdptr = iqp->q_buffer;
  202b78:	9b03      	ldr	r3, [sp, #12]
  202b7a:	68da      	ldr	r2, [r3, #12]
  202b7c:	9b03      	ldr	r3, [sp, #12]
  202b7e:	619a      	str	r2, [r3, #24]
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (nfy != NULL) {
  202b80:	9b07      	ldr	r3, [sp, #28]
  202b82:	2b00      	cmp	r3, #0
  202b84:	d002      	beq.n	202b8c <iqReadTimeout+0xcc>
      nfy(iqp);
  202b86:	9b07      	ldr	r3, [sp, #28]
  202b88:	9803      	ldr	r0, [sp, #12]
  202b8a:	4798      	blx	r3
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();
  202b8c:	f7ff feb0 	bl	2028f0 <osalSysUnlock.lto_priv.84>

    r++;
  202b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202b92:	3301      	adds	r3, #1
  202b94:	9309      	str	r3, [sp, #36]	; 0x24
    if (--n == 0U) {
  202b96:	9b01      	ldr	r3, [sp, #4]
  202b98:	3b01      	subs	r3, #1
  202b9a:	9301      	str	r3, [sp, #4]
  202b9c:	9b01      	ldr	r3, [sp, #4]
  202b9e:	2b00      	cmp	r3, #0
  202ba0:	d101      	bne.n	202ba6 <iqReadTimeout+0xe6>
      return r;
  202ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202ba4:	e002      	b.n	202bac <iqReadTimeout+0xec>
    }

    osalSysLock();
  202ba6:	f7ff fe9b 	bl	2028e0 <osalSysLock.lto_priv.90>
  202baa:	e7cc      	b.n	202b46 <iqReadTimeout+0x86>
  }
}
  202bac:	4618      	mov	r0, r3
  202bae:	b00b      	add	sp, #44	; 0x2c
  202bb0:	f85d fb04 	ldr.w	pc, [sp], #4
  202bb4:	08004c04 	.word	0x08004c04
	...

00202bc0 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
  202bc0:	b500      	push	{lr}
  202bc2:	b085      	sub	sp, #20
  202bc4:	9003      	str	r0, [sp, #12]
  202bc6:	9102      	str	r1, [sp, #8]
  202bc8:	9201      	str	r2, [sp, #4]
  202bca:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
  202bcc:	9b03      	ldr	r3, [sp, #12]
  202bce:	4618      	mov	r0, r3
  202bd0:	f7ff fe9e 	bl	202910 <osalThreadQueueObjectInit.lto_priv.163>
  oqp->q_counter = size;
  202bd4:	9b03      	ldr	r3, [sp, #12]
  202bd6:	9a01      	ldr	r2, [sp, #4]
  202bd8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
  202bda:	9b03      	ldr	r3, [sp, #12]
  202bdc:	9a02      	ldr	r2, [sp, #8]
  202bde:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
  202be0:	9b03      	ldr	r3, [sp, #12]
  202be2:	9a02      	ldr	r2, [sp, #8]
  202be4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
  202be6:	9b03      	ldr	r3, [sp, #12]
  202be8:	9a02      	ldr	r2, [sp, #8]
  202bea:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
  202bec:	9a02      	ldr	r2, [sp, #8]
  202bee:	9b01      	ldr	r3, [sp, #4]
  202bf0:	441a      	add	r2, r3
  202bf2:	9b03      	ldr	r3, [sp, #12]
  202bf4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
  202bf6:	9b03      	ldr	r3, [sp, #12]
  202bf8:	9a00      	ldr	r2, [sp, #0]
  202bfa:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
  202bfc:	9b03      	ldr	r3, [sp, #12]
  202bfe:	9a06      	ldr	r2, [sp, #24]
  202c00:	621a      	str	r2, [r3, #32]
}
  202c02:	b005      	add	sp, #20
  202c04:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00202c10 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  202c10:	b500      	push	{lr}
  202c12:	b087      	sub	sp, #28
  202c14:	9003      	str	r0, [sp, #12]
  202c16:	460b      	mov	r3, r1
  202c18:	9201      	str	r2, [sp, #4]
  202c1a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
  202c1e:	f7ff fe5f 	bl	2028e0 <osalSysLock.lto_priv.90>
  202c22:	e00c      	b.n	202c3e <oqPutTimeout+0x2e>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
  202c24:	9b03      	ldr	r3, [sp, #12]
  202c26:	9901      	ldr	r1, [sp, #4]
  202c28:	4618      	mov	r0, r3
  202c2a:	f7ff fe81 	bl	202930 <osalThreadEnqueueTimeoutS.lto_priv.161>
  202c2e:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
  202c30:	9b05      	ldr	r3, [sp, #20]
  202c32:	2b00      	cmp	r3, #0
  202c34:	da03      	bge.n	202c3e <oqPutTimeout+0x2e>
      osalSysUnlock();
  202c36:	f7ff fe5b 	bl	2028f0 <osalSysUnlock.lto_priv.84>
      return msg;
  202c3a:	9b05      	ldr	r3, [sp, #20]
  202c3c:	e025      	b.n	202c8a <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
  202c3e:	9b03      	ldr	r3, [sp, #12]
  202c40:	689b      	ldr	r3, [r3, #8]
  202c42:	2b00      	cmp	r3, #0
  202c44:	d0ee      	beq.n	202c24 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  202c46:	9b03      	ldr	r3, [sp, #12]
  202c48:	689b      	ldr	r3, [r3, #8]
  202c4a:	1e5a      	subs	r2, r3, #1
  202c4c:	9b03      	ldr	r3, [sp, #12]
  202c4e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
  202c50:	9b03      	ldr	r3, [sp, #12]
  202c52:	695b      	ldr	r3, [r3, #20]
  202c54:	1c59      	adds	r1, r3, #1
  202c56:	9a03      	ldr	r2, [sp, #12]
  202c58:	6151      	str	r1, [r2, #20]
  202c5a:	f89d 200b 	ldrb.w	r2, [sp, #11]
  202c5e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  202c60:	9b03      	ldr	r3, [sp, #12]
  202c62:	695a      	ldr	r2, [r3, #20]
  202c64:	9b03      	ldr	r3, [sp, #12]
  202c66:	691b      	ldr	r3, [r3, #16]
  202c68:	429a      	cmp	r2, r3
  202c6a:	d303      	bcc.n	202c74 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
  202c6c:	9b03      	ldr	r3, [sp, #12]
  202c6e:	68da      	ldr	r2, [r3, #12]
  202c70:	9b03      	ldr	r3, [sp, #12]
  202c72:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
  202c74:	9b03      	ldr	r3, [sp, #12]
  202c76:	69db      	ldr	r3, [r3, #28]
  202c78:	2b00      	cmp	r3, #0
  202c7a:	d003      	beq.n	202c84 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
  202c7c:	9b03      	ldr	r3, [sp, #12]
  202c7e:	69db      	ldr	r3, [r3, #28]
  202c80:	9803      	ldr	r0, [sp, #12]
  202c82:	4798      	blx	r3
  }

  osalSysUnlock();
  202c84:	f7ff fe34 	bl	2028f0 <osalSysUnlock.lto_priv.84>

  return MSG_OK;
  202c88:	2300      	movs	r3, #0
}
  202c8a:	4618      	mov	r0, r3
  202c8c:	b007      	add	sp, #28
  202c8e:	f85d fb04 	ldr.w	pc, [sp], #4
  202c92:	bf00      	nop
	...

00202ca0 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
  202ca0:	b500      	push	{lr}
  202ca2:	b085      	sub	sp, #20
  202ca4:	9001      	str	r0, [sp, #4]
  uint8_t b;

  osalDbgCheckClassI();
  202ca6:	f7fd fe8b 	bl	2009c0 <chDbgCheckClassI>

  if (oqIsEmptyI(oqp)) {
  202caa:	9b01      	ldr	r3, [sp, #4]
  202cac:	695a      	ldr	r2, [r3, #20]
  202cae:	9b01      	ldr	r3, [sp, #4]
  202cb0:	699b      	ldr	r3, [r3, #24]
  202cb2:	429a      	cmp	r2, r3
  202cb4:	d105      	bne.n	202cc2 <oqGetI+0x22>
  202cb6:	9b01      	ldr	r3, [sp, #4]
  202cb8:	689b      	ldr	r3, [r3, #8]
  202cba:	2b00      	cmp	r3, #0
  202cbc:	d001      	beq.n	202cc2 <oqGetI+0x22>
  202cbe:	2301      	movs	r3, #1
  202cc0:	e000      	b.n	202cc4 <oqGetI+0x24>
  202cc2:	2300      	movs	r3, #0
  202cc4:	f003 0301 	and.w	r3, r3, #1
  202cc8:	b2db      	uxtb	r3, r3
  202cca:	2b00      	cmp	r3, #0
  202ccc:	d002      	beq.n	202cd4 <oqGetI+0x34>
    return MSG_TIMEOUT;
  202cce:	f04f 33ff 	mov.w	r3, #4294967295
  202cd2:	e01d      	b.n	202d10 <oqGetI+0x70>
  }

  oqp->q_counter++;
  202cd4:	9b01      	ldr	r3, [sp, #4]
  202cd6:	689b      	ldr	r3, [r3, #8]
  202cd8:	1c5a      	adds	r2, r3, #1
  202cda:	9b01      	ldr	r3, [sp, #4]
  202cdc:	609a      	str	r2, [r3, #8]
  b = *oqp->q_rdptr++;
  202cde:	9b01      	ldr	r3, [sp, #4]
  202ce0:	699b      	ldr	r3, [r3, #24]
  202ce2:	1c59      	adds	r1, r3, #1
  202ce4:	9a01      	ldr	r2, [sp, #4]
  202ce6:	6191      	str	r1, [r2, #24]
  202ce8:	781b      	ldrb	r3, [r3, #0]
  202cea:	f88d 300f 	strb.w	r3, [sp, #15]
  if (oqp->q_rdptr >= oqp->q_top) {
  202cee:	9b01      	ldr	r3, [sp, #4]
  202cf0:	699a      	ldr	r2, [r3, #24]
  202cf2:	9b01      	ldr	r3, [sp, #4]
  202cf4:	691b      	ldr	r3, [r3, #16]
  202cf6:	429a      	cmp	r2, r3
  202cf8:	d303      	bcc.n	202d02 <oqGetI+0x62>
    oqp->q_rdptr = oqp->q_buffer;
  202cfa:	9b01      	ldr	r3, [sp, #4]
  202cfc:	68da      	ldr	r2, [r3, #12]
  202cfe:	9b01      	ldr	r3, [sp, #4]
  202d00:	619a      	str	r2, [r3, #24]
  }

  osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
  202d02:	9b01      	ldr	r3, [sp, #4]
  202d04:	2100      	movs	r1, #0
  202d06:	4618      	mov	r0, r3
  202d08:	f7ff fe22 	bl	202950 <osalThreadDequeueNextI.lto_priv.159>

  return (msg_t)b;
  202d0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
  202d10:	4618      	mov	r0, r3
  202d12:	b005      	add	sp, #20
  202d14:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00202d20 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  202d20:	b500      	push	{lr}
  202d22:	b08b      	sub	sp, #44	; 0x2c
  202d24:	9003      	str	r0, [sp, #12]
  202d26:	9102      	str	r1, [sp, #8]
  202d28:	9201      	str	r2, [sp, #4]
  202d2a:	9300      	str	r3, [sp, #0]
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  202d2c:	9b03      	ldr	r3, [sp, #12]
  202d2e:	69db      	ldr	r3, [r3, #28]
  202d30:	9307      	str	r3, [sp, #28]
  size_t w = 0;
  202d32:	2300      	movs	r3, #0
  202d34:	9309      	str	r3, [sp, #36]	; 0x24

  osalDbgCheck(n > 0U);
  202d36:	9b01      	ldr	r3, [sp, #4]
  202d38:	2b00      	cmp	r3, #0
  202d3a:	d102      	bne.n	202d42 <oqWriteTimeout+0x22>
  202d3c:	4835      	ldr	r0, [pc, #212]	; (202e14 <oqWriteTimeout+0xf4>)
  202d3e:	f7fd fd47 	bl	2007d0 <chSysHalt>

  osalSysLock();
  202d42:	f7ff fdcd 	bl	2028e0 <osalSysLock.lto_priv.90>

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
  202d46:	f7ff fddb 	bl	202900 <osalOsGetSystemTimeX>
  202d4a:	4602      	mov	r2, r0
  202d4c:	9b00      	ldr	r3, [sp, #0]
  202d4e:	4413      	add	r3, r2
  202d50:	9306      	str	r3, [sp, #24]
  202d52:	e028      	b.n	202da6 <oqWriteTimeout+0x86>
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  202d54:	9b00      	ldr	r3, [sp, #0]
  202d56:	f1b3 3fff 	cmp.w	r3, #4294967295
  202d5a:	d002      	beq.n	202d62 <oqWriteTimeout+0x42>
  202d5c:	9b00      	ldr	r3, [sp, #0]
  202d5e:	2b00      	cmp	r3, #0
  202d60:	d106      	bne.n	202d70 <oqWriteTimeout+0x50>
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
  202d62:	9b03      	ldr	r3, [sp, #12]
  202d64:	9900      	ldr	r1, [sp, #0]
  202d66:	4618      	mov	r0, r3
  202d68:	f7ff fde2 	bl	202930 <osalThreadEnqueueTimeoutS.lto_priv.161>
  202d6c:	9008      	str	r0, [sp, #32]
  202d6e:	e013      	b.n	202d98 <oqWriteTimeout+0x78>
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  202d70:	f7ff fdc6 	bl	202900 <osalOsGetSystemTimeX>
  202d74:	4602      	mov	r2, r0
  202d76:	9b06      	ldr	r3, [sp, #24]
  202d78:	1a9b      	subs	r3, r3, r2
  202d7a:	9305      	str	r3, [sp, #20]

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
  202d7c:	9a05      	ldr	r2, [sp, #20]
  202d7e:	9b00      	ldr	r3, [sp, #0]
  202d80:	429a      	cmp	r2, r3
  202d82:	d903      	bls.n	202d8c <oqWriteTimeout+0x6c>
          osalSysUnlock();
  202d84:	f7ff fdb4 	bl	2028f0 <osalSysUnlock.lto_priv.84>
          return w;
  202d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202d8a:	e03f      	b.n	202e0c <oqWriteTimeout+0xec>
        }

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
  202d8c:	9b03      	ldr	r3, [sp, #12]
  202d8e:	9905      	ldr	r1, [sp, #20]
  202d90:	4618      	mov	r0, r3
  202d92:	f7ff fdcd 	bl	202930 <osalThreadEnqueueTimeoutS.lto_priv.161>
  202d96:	9008      	str	r0, [sp, #32]
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
  202d98:	9b08      	ldr	r3, [sp, #32]
  202d9a:	2b00      	cmp	r3, #0
  202d9c:	d003      	beq.n	202da6 <oqWriteTimeout+0x86>
        osalSysUnlock();
  202d9e:	f7ff fda7 	bl	2028f0 <osalSysUnlock.lto_priv.84>
        return w;
  202da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202da4:	e032      	b.n	202e0c <oqWriteTimeout+0xec>
    while (oqIsFullI(oqp)) {
  202da6:	9b03      	ldr	r3, [sp, #12]
  202da8:	689b      	ldr	r3, [r3, #8]
  202daa:	2b00      	cmp	r3, #0
  202dac:	d0d2      	beq.n	202d54 <oqWriteTimeout+0x34>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
  202dae:	9b03      	ldr	r3, [sp, #12]
  202db0:	689b      	ldr	r3, [r3, #8]
  202db2:	1e5a      	subs	r2, r3, #1
  202db4:	9b03      	ldr	r3, [sp, #12]
  202db6:	609a      	str	r2, [r3, #8]
    *oqp->q_wrptr++ = *bp++;
  202db8:	9a02      	ldr	r2, [sp, #8]
  202dba:	1c53      	adds	r3, r2, #1
  202dbc:	9302      	str	r3, [sp, #8]
  202dbe:	9b03      	ldr	r3, [sp, #12]
  202dc0:	695b      	ldr	r3, [r3, #20]
  202dc2:	1c58      	adds	r0, r3, #1
  202dc4:	9903      	ldr	r1, [sp, #12]
  202dc6:	6148      	str	r0, [r1, #20]
  202dc8:	7812      	ldrb	r2, [r2, #0]
  202dca:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  202dcc:	9b03      	ldr	r3, [sp, #12]
  202dce:	695a      	ldr	r2, [r3, #20]
  202dd0:	9b03      	ldr	r3, [sp, #12]
  202dd2:	691b      	ldr	r3, [r3, #16]
  202dd4:	429a      	cmp	r2, r3
  202dd6:	d303      	bcc.n	202de0 <oqWriteTimeout+0xc0>
      oqp->q_wrptr = oqp->q_buffer;
  202dd8:	9b03      	ldr	r3, [sp, #12]
  202dda:	68da      	ldr	r2, [r3, #12]
  202ddc:	9b03      	ldr	r3, [sp, #12]
  202dde:	615a      	str	r2, [r3, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  202de0:	9b07      	ldr	r3, [sp, #28]
  202de2:	2b00      	cmp	r3, #0
  202de4:	d002      	beq.n	202dec <oqWriteTimeout+0xcc>
      nfy(oqp);
  202de6:	9b07      	ldr	r3, [sp, #28]
  202de8:	9803      	ldr	r0, [sp, #12]
  202dea:	4798      	blx	r3
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();
  202dec:	f7ff fd80 	bl	2028f0 <osalSysUnlock.lto_priv.84>

    w++;
  202df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202df2:	3301      	adds	r3, #1
  202df4:	9309      	str	r3, [sp, #36]	; 0x24
    if (--n == 0U) {
  202df6:	9b01      	ldr	r3, [sp, #4]
  202df8:	3b01      	subs	r3, #1
  202dfa:	9301      	str	r3, [sp, #4]
  202dfc:	9b01      	ldr	r3, [sp, #4]
  202dfe:	2b00      	cmp	r3, #0
  202e00:	d101      	bne.n	202e06 <oqWriteTimeout+0xe6>
      return w;
  202e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202e04:	e002      	b.n	202e0c <oqWriteTimeout+0xec>
    }

    osalSysLock();
  202e06:	f7ff fd6b 	bl	2028e0 <osalSysLock.lto_priv.90>
  202e0a:	e7cc      	b.n	202da6 <oqWriteTimeout+0x86>
  }
}
  202e0c:	4618      	mov	r0, r3
  202e0e:	b00b      	add	sp, #44	; 0x2c
  202e10:	f85d fb04 	ldr.w	pc, [sp], #4
  202e14:	08004c14 	.word	0x08004c14
	...

00202e20 <port_lock.lto_priv.72>:
static inline void port_lock(void) {
  202e20:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  202e22:	b672      	cpsid	i
  202e24:	2320      	movs	r3, #32
  202e26:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  202e28:	9b01      	ldr	r3, [sp, #4]
  202e2a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  202e2e:	b662      	cpsie	i
}
  202e30:	b002      	add	sp, #8
  202e32:	4770      	bx	lr
	...

00202e40 <port_unlock.lto_priv.48>:
static inline void port_unlock(void) {
  202e40:	b082      	sub	sp, #8
  202e42:	2300      	movs	r3, #0
  202e44:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  202e46:	9b01      	ldr	r3, [sp, #4]
  202e48:	f383 8811 	msr	BASEPRI, r3
}
  202e4c:	b002      	add	sp, #8
  202e4e:	4770      	bx	lr

00202e50 <chSysLock.lto_priv.146>:
static inline void chSysLock(void) {
  202e50:	b508      	push	{r3, lr}
  port_lock();
  202e52:	f7ff ffe5 	bl	202e20 <port_lock.lto_priv.72>
  _dbg_check_lock();
  202e56:	f7fd fd13 	bl	200880 <_dbg_check_lock>
}
  202e5a:	bd08      	pop	{r3, pc}
  202e5c:	0000      	movs	r0, r0
	...

00202e60 <chSysUnlock.lto_priv.110>:
static inline void chSysUnlock(void) {
  202e60:	b508      	push	{r3, lr}
  _dbg_check_unlock();
  202e62:	f7fd fd25 	bl	2008b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
  202e66:	4b09      	ldr	r3, [pc, #36]	; (202e8c <chSysUnlock.lto_priv.110+0x2c>)
  202e68:	681b      	ldr	r3, [r3, #0]
  202e6a:	4a08      	ldr	r2, [pc, #32]	; (202e8c <chSysUnlock.lto_priv.110+0x2c>)
  202e6c:	4293      	cmp	r3, r2
  202e6e:	d00a      	beq.n	202e86 <chSysUnlock.lto_priv.110+0x26>
  202e70:	4b06      	ldr	r3, [pc, #24]	; (202e8c <chSysUnlock.lto_priv.110+0x2c>)
  202e72:	699b      	ldr	r3, [r3, #24]
  202e74:	689a      	ldr	r2, [r3, #8]
  202e76:	4b05      	ldr	r3, [pc, #20]	; (202e8c <chSysUnlock.lto_priv.110+0x2c>)
  202e78:	681b      	ldr	r3, [r3, #0]
  202e7a:	689b      	ldr	r3, [r3, #8]
  202e7c:	429a      	cmp	r2, r3
  202e7e:	d202      	bcs.n	202e86 <chSysUnlock.lto_priv.110+0x26>
  202e80:	4803      	ldr	r0, [pc, #12]	; (202e90 <chSysUnlock.lto_priv.110+0x30>)
  202e82:	f7fd fca5 	bl	2007d0 <chSysHalt>
  port_unlock();
  202e86:	f7ff ffdb 	bl	202e40 <port_unlock.lto_priv.48>
}
  202e8a:	bd08      	pop	{r3, pc}
  202e8c:	200008d8 	.word	0x200008d8
  202e90:	08004c30 	.word	0x08004c30
	...

00202ea0 <osalSysLock.lto_priv.91>:
static inline void osalSysLock(void) {
  202ea0:	b508      	push	{r3, lr}
  chSysLock();
  202ea2:	f7ff ffd5 	bl	202e50 <chSysLock.lto_priv.146>
}
  202ea6:	bd08      	pop	{r3, pc}
	...

00202eb0 <osalSysUnlock.lto_priv.85>:
static inline void osalSysUnlock(void) {
  202eb0:	b508      	push	{r3, lr}
  chSysUnlock();
  202eb2:	f7ff ffd5 	bl	202e60 <chSysUnlock.lto_priv.110>
}
  202eb6:	bd08      	pop	{r3, pc}
	...

00202ec0 <icuInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void icuInit(void) {
  202ec0:	b508      	push	{r3, lr}

  icu_lld_init();
  202ec2:	f000 fe9d 	bl	203c00 <icu_lld_init>
}
  202ec6:	bd08      	pop	{r3, pc}
	...

00202ed0 <icuObjectInit>:
 *
 * @param[out] icup     pointer to the @p ICUDriver object
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {
  202ed0:	b082      	sub	sp, #8
  202ed2:	9001      	str	r0, [sp, #4]

  icup->state  = ICU_STOP;
  202ed4:	9b01      	ldr	r3, [sp, #4]
  202ed6:	2201      	movs	r2, #1
  202ed8:	701a      	strb	r2, [r3, #0]
  icup->config = NULL;
  202eda:	9b01      	ldr	r3, [sp, #4]
  202edc:	2200      	movs	r2, #0
  202ede:	605a      	str	r2, [r3, #4]
}
  202ee0:	b002      	add	sp, #8
  202ee2:	4770      	bx	lr
	...

00202ef0 <icuStart>:
 * @param[in] icup      pointer to the @p ICUDriver object
 * @param[in] config    pointer to the @p ICUConfig object
 *
 * @api
 */
void icuStart(ICUDriver *icup, const ICUConfig *config) {
  202ef0:	b500      	push	{lr}
  202ef2:	b083      	sub	sp, #12
  202ef4:	9001      	str	r0, [sp, #4]
  202ef6:	9100      	str	r1, [sp, #0]

  osalDbgCheck((icup != NULL) && (config != NULL));
  202ef8:	9b01      	ldr	r3, [sp, #4]
  202efa:	2b00      	cmp	r3, #0
  202efc:	d002      	beq.n	202f04 <icuStart+0x14>
  202efe:	9b00      	ldr	r3, [sp, #0]
  202f00:	2b00      	cmp	r3, #0
  202f02:	d102      	bne.n	202f0a <icuStart+0x1a>
  202f04:	480e      	ldr	r0, [pc, #56]	; (202f40 <icuStart+0x50>)
  202f06:	f7fd fc63 	bl	2007d0 <chSysHalt>

  osalSysLock();
  202f0a:	f7ff ffc9 	bl	202ea0 <osalSysLock.lto_priv.91>
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
  202f0e:	9b01      	ldr	r3, [sp, #4]
  202f10:	781b      	ldrb	r3, [r3, #0]
  202f12:	2b01      	cmp	r3, #1
  202f14:	d006      	beq.n	202f24 <icuStart+0x34>
  202f16:	9b01      	ldr	r3, [sp, #4]
  202f18:	781b      	ldrb	r3, [r3, #0]
  202f1a:	2b02      	cmp	r3, #2
  202f1c:	d002      	beq.n	202f24 <icuStart+0x34>
  202f1e:	4808      	ldr	r0, [pc, #32]	; (202f40 <icuStart+0x50>)
  202f20:	f7fd fc56 	bl	2007d0 <chSysHalt>
                "invalid state");
  icup->config = config;
  202f24:	9b01      	ldr	r3, [sp, #4]
  202f26:	9a00      	ldr	r2, [sp, #0]
  202f28:	605a      	str	r2, [r3, #4]
  icu_lld_start(icup);
  202f2a:	9801      	ldr	r0, [sp, #4]
  202f2c:	f000 fe78 	bl	203c20 <icu_lld_start>
  icup->state = ICU_READY;
  202f30:	9b01      	ldr	r3, [sp, #4]
  202f32:	2202      	movs	r2, #2
  202f34:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
  202f36:	f7ff ffbb 	bl	202eb0 <osalSysUnlock.lto_priv.85>
}
  202f3a:	b003      	add	sp, #12
  202f3c:	f85d fb04 	ldr.w	pc, [sp], #4
  202f40:	08004c24 	.word	0x08004c24
	...

00202f50 <icuStartCapture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStartCapture(ICUDriver *icup) {
  202f50:	b500      	push	{lr}
  202f52:	b083      	sub	sp, #12
  202f54:	9001      	str	r0, [sp, #4]

  osalDbgCheck(icup != NULL);
  202f56:	9b01      	ldr	r3, [sp, #4]
  202f58:	2b00      	cmp	r3, #0
  202f5a:	d102      	bne.n	202f62 <icuStartCapture+0x12>
  202f5c:	480b      	ldr	r0, [pc, #44]	; (202f8c <icuStartCapture+0x3c>)
  202f5e:	f7fd fc37 	bl	2007d0 <chSysHalt>

  osalSysLock();
  202f62:	f7ff ff9d 	bl	202ea0 <osalSysLock.lto_priv.91>
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  202f66:	9b01      	ldr	r3, [sp, #4]
  202f68:	781b      	ldrb	r3, [r3, #0]
  202f6a:	2b02      	cmp	r3, #2
  202f6c:	d002      	beq.n	202f74 <icuStartCapture+0x24>
  202f6e:	4807      	ldr	r0, [pc, #28]	; (202f8c <icuStartCapture+0x3c>)
  202f70:	f7fd fc2e 	bl	2007d0 <chSysHalt>
  icuStartCaptureI(icup);
  202f74:	9801      	ldr	r0, [sp, #4]
  202f76:	f000 ff1b 	bl	203db0 <icu_lld_start_capture>
  202f7a:	9b01      	ldr	r3, [sp, #4]
  202f7c:	2203      	movs	r2, #3
  202f7e:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
  202f80:	f7ff ff96 	bl	202eb0 <osalSysUnlock.lto_priv.85>
}
  202f84:	b003      	add	sp, #12
  202f86:	f85d fb04 	ldr.w	pc, [sp], #4
  202f8a:	bf00      	nop
  202f8c:	08004c3c 	.word	0x08004c3c

00202f90 <icuEnableNotifications>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuEnableNotifications(ICUDriver *icup) {
  202f90:	b500      	push	{lr}
  202f92:	b083      	sub	sp, #12
  202f94:	9001      	str	r0, [sp, #4]

  osalDbgCheck(icup != NULL);
  202f96:	9b01      	ldr	r3, [sp, #4]
  202f98:	2b00      	cmp	r3, #0
  202f9a:	d102      	bne.n	202fa2 <icuEnableNotifications+0x12>
  202f9c:	480b      	ldr	r0, [pc, #44]	; (202fcc <icuEnableNotifications+0x3c>)
  202f9e:	f7fd fc17 	bl	2007d0 <chSysHalt>

  osalSysLock();
  202fa2:	f7ff ff7d 	bl	202ea0 <osalSysLock.lto_priv.91>
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
  202fa6:	9b01      	ldr	r3, [sp, #4]
  202fa8:	781b      	ldrb	r3, [r3, #0]
  202faa:	2b03      	cmp	r3, #3
  202fac:	d006      	beq.n	202fbc <icuEnableNotifications+0x2c>
  202fae:	9b01      	ldr	r3, [sp, #4]
  202fb0:	781b      	ldrb	r3, [r3, #0]
  202fb2:	2b04      	cmp	r3, #4
  202fb4:	d002      	beq.n	202fbc <icuEnableNotifications+0x2c>
  202fb6:	4805      	ldr	r0, [pc, #20]	; (202fcc <icuEnableNotifications+0x3c>)
  202fb8:	f7fd fc0a 	bl	2007d0 <chSysHalt>
                "invalid state");
  icuEnableNotificationsI(icup);
  202fbc:	9801      	ldr	r0, [sp, #4]
  202fbe:	f000 ff0f 	bl	203de0 <icu_lld_enable_notifications>
  osalSysUnlock();
  202fc2:	f7ff ff75 	bl	202eb0 <osalSysUnlock.lto_priv.85>
}
  202fc6:	b003      	add	sp, #12
  202fc8:	f85d fb04 	ldr.w	pc, [sp], #4
  202fcc:	08004c4c 	.word	0x08004c4c

00202fd0 <port_lock.lto_priv.73>:
static inline void port_lock(void) {
  202fd0:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  202fd2:	b672      	cpsid	i
  202fd4:	2320      	movs	r3, #32
  202fd6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  202fd8:	9b01      	ldr	r3, [sp, #4]
  202fda:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  202fde:	b662      	cpsie	i
}
  202fe0:	b002      	add	sp, #8
  202fe2:	4770      	bx	lr
	...

00202ff0 <port_unlock.lto_priv.49>:
static inline void port_unlock(void) {
  202ff0:	b082      	sub	sp, #8
  202ff2:	2300      	movs	r3, #0
  202ff4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  202ff6:	9b01      	ldr	r3, [sp, #4]
  202ff8:	f383 8811 	msr	BASEPRI, r3
}
  202ffc:	b002      	add	sp, #8
  202ffe:	4770      	bx	lr

00203000 <chSysLock.lto_priv.147>:
static inline void chSysLock(void) {
  203000:	b508      	push	{r3, lr}
  port_lock();
  203002:	f7ff ffe5 	bl	202fd0 <port_lock.lto_priv.73>
  _dbg_check_lock();
  203006:	f7fd fc3b 	bl	200880 <_dbg_check_lock>
}
  20300a:	bd08      	pop	{r3, pc}
  20300c:	0000      	movs	r0, r0
	...

00203010 <chSysUnlock.lto_priv.111>:
static inline void chSysUnlock(void) {
  203010:	b508      	push	{r3, lr}
  _dbg_check_unlock();
  203012:	f7fd fc4d 	bl	2008b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
  203016:	4b09      	ldr	r3, [pc, #36]	; (20303c <chSysUnlock.lto_priv.111+0x2c>)
  203018:	681b      	ldr	r3, [r3, #0]
  20301a:	4a08      	ldr	r2, [pc, #32]	; (20303c <chSysUnlock.lto_priv.111+0x2c>)
  20301c:	4293      	cmp	r3, r2
  20301e:	d00a      	beq.n	203036 <chSysUnlock.lto_priv.111+0x26>
  203020:	4b06      	ldr	r3, [pc, #24]	; (20303c <chSysUnlock.lto_priv.111+0x2c>)
  203022:	699b      	ldr	r3, [r3, #24]
  203024:	689a      	ldr	r2, [r3, #8]
  203026:	4b05      	ldr	r3, [pc, #20]	; (20303c <chSysUnlock.lto_priv.111+0x2c>)
  203028:	681b      	ldr	r3, [r3, #0]
  20302a:	689b      	ldr	r3, [r3, #8]
  20302c:	429a      	cmp	r2, r3
  20302e:	d202      	bcs.n	203036 <chSysUnlock.lto_priv.111+0x26>
  203030:	4803      	ldr	r0, [pc, #12]	; (203040 <chSysUnlock.lto_priv.111+0x30>)
  203032:	f7fd fbcd 	bl	2007d0 <chSysHalt>
  port_unlock();
  203036:	f7ff ffdb 	bl	202ff0 <port_unlock.lto_priv.49>
}
  20303a:	bd08      	pop	{r3, pc}
  20303c:	200008d8 	.word	0x200008d8
  203040:	08004c70 	.word	0x08004c70
	...

00203050 <osalSysLock.lto_priv.92>:
static inline void osalSysLock(void) {
  203050:	b508      	push	{r3, lr}
  chSysLock();
  203052:	f7ff ffd5 	bl	203000 <chSysLock.lto_priv.147>
}
  203056:	bd08      	pop	{r3, pc}
	...

00203060 <osalSysUnlock.lto_priv.86>:
static inline void osalSysUnlock(void) {
  203060:	b508      	push	{r3, lr}
  chSysUnlock();
  203062:	f7ff ffd5 	bl	203010 <chSysUnlock.lto_priv.111>
}
  203066:	bd08      	pop	{r3, pc}
	...

00203070 <pwmInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void pwmInit(void) {
  203070:	b508      	push	{r3, lr}

  pwm_lld_init();
  203072:	f000 ffbd 	bl	203ff0 <pwm_lld_init>
}
  203076:	bd08      	pop	{r3, pc}
	...

00203080 <pwmObjectInit>:
 *
 * @param[out] pwmp     pointer to a @p PWMDriver object
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {
  203080:	b082      	sub	sp, #8
  203082:	9001      	str	r0, [sp, #4]

  pwmp->state    = PWM_STOP;
  203084:	9b01      	ldr	r3, [sp, #4]
  203086:	2201      	movs	r2, #1
  203088:	701a      	strb	r2, [r3, #0]
  pwmp->config   = NULL;
  20308a:	9b01      	ldr	r3, [sp, #4]
  20308c:	2200      	movs	r2, #0
  20308e:	605a      	str	r2, [r3, #4]
  pwmp->enabled  = 0;
  203090:	9b01      	ldr	r3, [sp, #4]
  203092:	2200      	movs	r2, #0
  203094:	60da      	str	r2, [r3, #12]
  pwmp->channels = 0;
  203096:	9b01      	ldr	r3, [sp, #4]
  203098:	2200      	movs	r2, #0
  20309a:	741a      	strb	r2, [r3, #16]
#if defined(PWM_DRIVER_EXT_INIT_HOOK)
  PWM_DRIVER_EXT_INIT_HOOK(pwmp);
#endif
}
  20309c:	b002      	add	sp, #8
  20309e:	4770      	bx	lr

002030a0 <pwmStart>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] config    pointer to a @p PWMConfig object
 *
 * @api
 */
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
  2030a0:	b500      	push	{lr}
  2030a2:	b083      	sub	sp, #12
  2030a4:	9001      	str	r0, [sp, #4]
  2030a6:	9100      	str	r1, [sp, #0]

  osalDbgCheck((pwmp != NULL) && (config != NULL));
  2030a8:	9b01      	ldr	r3, [sp, #4]
  2030aa:	2b00      	cmp	r3, #0
  2030ac:	d002      	beq.n	2030b4 <pwmStart+0x14>
  2030ae:	9b00      	ldr	r3, [sp, #0]
  2030b0:	2b00      	cmp	r3, #0
  2030b2:	d102      	bne.n	2030ba <pwmStart+0x1a>
  2030b4:	4812      	ldr	r0, [pc, #72]	; (203100 <pwmStart+0x60>)
  2030b6:	f7fd fb8b 	bl	2007d0 <chSysHalt>

  osalSysLock();
  2030ba:	f7ff ffc9 	bl	203050 <osalSysLock.lto_priv.92>
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
  2030be:	9b01      	ldr	r3, [sp, #4]
  2030c0:	781b      	ldrb	r3, [r3, #0]
  2030c2:	2b01      	cmp	r3, #1
  2030c4:	d006      	beq.n	2030d4 <pwmStart+0x34>
  2030c6:	9b01      	ldr	r3, [sp, #4]
  2030c8:	781b      	ldrb	r3, [r3, #0]
  2030ca:	2b02      	cmp	r3, #2
  2030cc:	d002      	beq.n	2030d4 <pwmStart+0x34>
  2030ce:	480c      	ldr	r0, [pc, #48]	; (203100 <pwmStart+0x60>)
  2030d0:	f7fd fb7e 	bl	2007d0 <chSysHalt>
                "invalid state");
  pwmp->config = config;
  2030d4:	9b01      	ldr	r3, [sp, #4]
  2030d6:	9a00      	ldr	r2, [sp, #0]
  2030d8:	605a      	str	r2, [r3, #4]
  pwmp->period = config->period;
  2030da:	9b00      	ldr	r3, [sp, #0]
  2030dc:	685a      	ldr	r2, [r3, #4]
  2030de:	9b01      	ldr	r3, [sp, #4]
  2030e0:	609a      	str	r2, [r3, #8]
  pwm_lld_start(pwmp);
  2030e2:	9801      	ldr	r0, [sp, #4]
  2030e4:	f000 ffa4 	bl	204030 <pwm_lld_start>
  pwmp->enabled = 0;
  2030e8:	9b01      	ldr	r3, [sp, #4]
  2030ea:	2200      	movs	r2, #0
  2030ec:	60da      	str	r2, [r3, #12]
  pwmp->state = PWM_READY;
  2030ee:	9b01      	ldr	r3, [sp, #4]
  2030f0:	2202      	movs	r2, #2
  2030f2:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
  2030f4:	f7ff ffb4 	bl	203060 <osalSysUnlock.lto_priv.86>
}
  2030f8:	b003      	add	sp, #12
  2030fa:	f85d fb04 	ldr.w	pc, [sp], #4
  2030fe:	bf00      	nop
  203100:	08004c64 	.word	0x08004c64
	...

00203110 <pwmChangePeriod>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] period    new cycle time in ticks
 *
 * @api
 */
void pwmChangePeriod(PWMDriver *pwmp, pwmcnt_t period) {
  203110:	b500      	push	{lr}
  203112:	b083      	sub	sp, #12
  203114:	9001      	str	r0, [sp, #4]
  203116:	9100      	str	r1, [sp, #0]

  osalDbgCheck(pwmp != NULL);
  203118:	9b01      	ldr	r3, [sp, #4]
  20311a:	2b00      	cmp	r3, #0
  20311c:	d102      	bne.n	203124 <pwmChangePeriod+0x14>
  20311e:	480c      	ldr	r0, [pc, #48]	; (203150 <pwmChangePeriod+0x40>)
  203120:	f7fd fb56 	bl	2007d0 <chSysHalt>

  osalSysLock();
  203124:	f7ff ff94 	bl	203050 <osalSysLock.lto_priv.92>
  osalDbgAssert(pwmp->state == PWM_READY, "invalid state");
  203128:	9b01      	ldr	r3, [sp, #4]
  20312a:	781b      	ldrb	r3, [r3, #0]
  20312c:	2b02      	cmp	r3, #2
  20312e:	d002      	beq.n	203136 <pwmChangePeriod+0x26>
  203130:	4807      	ldr	r0, [pc, #28]	; (203150 <pwmChangePeriod+0x40>)
  203132:	f7fd fb4d 	bl	2007d0 <chSysHalt>
  pwmChangePeriodI(pwmp, period);
  203136:	9b01      	ldr	r3, [sp, #4]
  203138:	9a00      	ldr	r2, [sp, #0]
  20313a:	609a      	str	r2, [r3, #8]
  20313c:	9b01      	ldr	r3, [sp, #4]
  20313e:	699b      	ldr	r3, [r3, #24]
  203140:	9a00      	ldr	r2, [sp, #0]
  203142:	3a01      	subs	r2, #1
  203144:	62da      	str	r2, [r3, #44]	; 0x2c
  osalSysUnlock();
  203146:	f7ff ff8b 	bl	203060 <osalSysUnlock.lto_priv.86>
}
  20314a:	b003      	add	sp, #12
  20314c:	f85d fb04 	ldr.w	pc, [sp], #4
  203150:	08004c7c 	.word	0x08004c7c
	...

00203160 <pwmEnableChannel>:
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {
  203160:	b500      	push	{lr}
  203162:	b085      	sub	sp, #20
  203164:	9003      	str	r0, [sp, #12]
  203166:	460b      	mov	r3, r1
  203168:	9201      	str	r2, [sp, #4]
  20316a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
  20316e:	9b03      	ldr	r3, [sp, #12]
  203170:	2b00      	cmp	r3, #0
  203172:	d005      	beq.n	203180 <pwmEnableChannel+0x20>
  203174:	9b03      	ldr	r3, [sp, #12]
  203176:	7c1b      	ldrb	r3, [r3, #16]
  203178:	f89d 200b 	ldrb.w	r2, [sp, #11]
  20317c:	429a      	cmp	r2, r3
  20317e:	d302      	bcc.n	203186 <pwmEnableChannel+0x26>
  203180:	4810      	ldr	r0, [pc, #64]	; (2031c4 <pwmEnableChannel+0x64>)
  203182:	f7fd fb25 	bl	2007d0 <chSysHalt>

  osalSysLock();
  203186:	f7ff ff63 	bl	203050 <osalSysLock.lto_priv.92>

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");
  20318a:	9b03      	ldr	r3, [sp, #12]
  20318c:	781b      	ldrb	r3, [r3, #0]
  20318e:	2b02      	cmp	r3, #2
  203190:	d002      	beq.n	203198 <pwmEnableChannel+0x38>
  203192:	480c      	ldr	r0, [pc, #48]	; (2031c4 <pwmEnableChannel+0x64>)
  203194:	f7fd fb1c 	bl	2007d0 <chSysHalt>

  pwmEnableChannelI(pwmp, channel, width);
  203198:	9b03      	ldr	r3, [sp, #12]
  20319a:	68da      	ldr	r2, [r3, #12]
  20319c:	f89d 300b 	ldrb.w	r3, [sp, #11]
  2031a0:	2101      	movs	r1, #1
  2031a2:	fa01 f303 	lsl.w	r3, r1, r3
  2031a6:	431a      	orrs	r2, r3
  2031a8:	9b03      	ldr	r3, [sp, #12]
  2031aa:	60da      	str	r2, [r3, #12]
  2031ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
  2031b0:	9a01      	ldr	r2, [sp, #4]
  2031b2:	4619      	mov	r1, r3
  2031b4:	9803      	ldr	r0, [sp, #12]
  2031b6:	f001 f853 	bl	204260 <pwm_lld_enable_channel>

  osalSysUnlock();
  2031ba:	f7ff ff51 	bl	203060 <osalSysUnlock.lto_priv.86>
}
  2031be:	b005      	add	sp, #20
  2031c0:	f85d fb04 	ldr.w	pc, [sp], #4
  2031c4:	08004c8c 	.word	0x08004c8c
	...

002031d0 <pwmDisableChannel>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] channel   PWM channel identifier (0...channels-1)
 *
 * @api
 */
void pwmDisableChannel(PWMDriver *pwmp, pwmchannel_t channel) {
  2031d0:	b500      	push	{lr}
  2031d2:	b083      	sub	sp, #12
  2031d4:	9001      	str	r0, [sp, #4]
  2031d6:	460b      	mov	r3, r1
  2031d8:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
  2031dc:	9b01      	ldr	r3, [sp, #4]
  2031de:	2b00      	cmp	r3, #0
  2031e0:	d005      	beq.n	2031ee <pwmDisableChannel+0x1e>
  2031e2:	9b01      	ldr	r3, [sp, #4]
  2031e4:	7c1b      	ldrb	r3, [r3, #16]
  2031e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
  2031ea:	429a      	cmp	r2, r3
  2031ec:	d302      	bcc.n	2031f4 <pwmDisableChannel+0x24>
  2031ee:	4811      	ldr	r0, [pc, #68]	; (203234 <pwmDisableChannel+0x64>)
  2031f0:	f7fd faee 	bl	2007d0 <chSysHalt>

  osalSysLock();
  2031f4:	f7ff ff2c 	bl	203050 <osalSysLock.lto_priv.92>

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");
  2031f8:	9b01      	ldr	r3, [sp, #4]
  2031fa:	781b      	ldrb	r3, [r3, #0]
  2031fc:	2b02      	cmp	r3, #2
  2031fe:	d002      	beq.n	203206 <pwmDisableChannel+0x36>
  203200:	480c      	ldr	r0, [pc, #48]	; (203234 <pwmDisableChannel+0x64>)
  203202:	f7fd fae5 	bl	2007d0 <chSysHalt>

  pwmDisableChannelI(pwmp, channel);
  203206:	9b01      	ldr	r3, [sp, #4]
  203208:	68da      	ldr	r2, [r3, #12]
  20320a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  20320e:	2101      	movs	r1, #1
  203210:	fa01 f303 	lsl.w	r3, r1, r3
  203214:	43db      	mvns	r3, r3
  203216:	401a      	ands	r2, r3
  203218:	9b01      	ldr	r3, [sp, #4]
  20321a:	60da      	str	r2, [r3, #12]
  20321c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  203220:	4619      	mov	r1, r3
  203222:	9801      	ldr	r0, [sp, #4]
  203224:	f001 f83c 	bl	2042a0 <pwm_lld_disable_channel>

  osalSysUnlock();
  203228:	f7ff ff1a 	bl	203060 <osalSysUnlock.lto_priv.86>
}
  20322c:	b003      	add	sp, #12
  20322e:	f85d fb04 	ldr.w	pc, [sp], #4
  203232:	bf00      	nop
  203234:	08004ca0 	.word	0x08004ca0
	...

00203240 <pwmEnablePeriodicNotification>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @api
 */
void pwmEnablePeriodicNotification(PWMDriver *pwmp) {
  203240:	b500      	push	{lr}
  203242:	b083      	sub	sp, #12
  203244:	9001      	str	r0, [sp, #4]

  osalDbgCheck(pwmp != NULL);
  203246:	9b01      	ldr	r3, [sp, #4]
  203248:	2b00      	cmp	r3, #0
  20324a:	d102      	bne.n	203252 <pwmEnablePeriodicNotification+0x12>
  20324c:	480d      	ldr	r0, [pc, #52]	; (203284 <pwmEnablePeriodicNotification+0x44>)
  20324e:	f7fd fabf 	bl	2007d0 <chSysHalt>

  osalSysLock();
  203252:	f7ff fefd 	bl	203050 <osalSysLock.lto_priv.92>

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");
  203256:	9b01      	ldr	r3, [sp, #4]
  203258:	781b      	ldrb	r3, [r3, #0]
  20325a:	2b02      	cmp	r3, #2
  20325c:	d002      	beq.n	203264 <pwmEnablePeriodicNotification+0x24>
  20325e:	4809      	ldr	r0, [pc, #36]	; (203284 <pwmEnablePeriodicNotification+0x44>)
  203260:	f7fd fab6 	bl	2007d0 <chSysHalt>
  osalDbgAssert(pwmp->config->callback != NULL, "undefined periodic callback");
  203264:	9b01      	ldr	r3, [sp, #4]
  203266:	685b      	ldr	r3, [r3, #4]
  203268:	689b      	ldr	r3, [r3, #8]
  20326a:	2b00      	cmp	r3, #0
  20326c:	d102      	bne.n	203274 <pwmEnablePeriodicNotification+0x34>
  20326e:	4805      	ldr	r0, [pc, #20]	; (203284 <pwmEnablePeriodicNotification+0x44>)
  203270:	f7fd faae 	bl	2007d0 <chSysHalt>

  pwmEnablePeriodicNotificationI(pwmp);
  203274:	9801      	ldr	r0, [sp, #4]
  203276:	f001 f843 	bl	204300 <pwm_lld_enable_periodic_notification>

  osalSysUnlock();
  20327a:	f7ff fef1 	bl	203060 <osalSysUnlock.lto_priv.86>
}
  20327e:	b003      	add	sp, #12
  203280:	f85d fb04 	ldr.w	pc, [sp], #4
  203284:	08004cb4 	.word	0x08004cb4
	...

00203290 <pwmEnableChannelNotification>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] channel   PWM channel identifier (0...channels-1)
 *
 * @api
 */
void pwmEnableChannelNotification(PWMDriver *pwmp, pwmchannel_t channel) {
  203290:	b500      	push	{lr}
  203292:	b083      	sub	sp, #12
  203294:	9001      	str	r0, [sp, #4]
  203296:	460b      	mov	r3, r1
  203298:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
  20329c:	9b01      	ldr	r3, [sp, #4]
  20329e:	2b00      	cmp	r3, #0
  2032a0:	d005      	beq.n	2032ae <pwmEnableChannelNotification+0x1e>
  2032a2:	9b01      	ldr	r3, [sp, #4]
  2032a4:	7c1b      	ldrb	r3, [r3, #16]
  2032a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
  2032aa:	429a      	cmp	r2, r3
  2032ac:	d302      	bcc.n	2032b4 <pwmEnableChannelNotification+0x24>
  2032ae:	4818      	ldr	r0, [pc, #96]	; (203310 <pwmEnableChannelNotification+0x80>)
  2032b0:	f7fd fa8e 	bl	2007d0 <chSysHalt>

  osalSysLock();
  2032b4:	f7ff fecc 	bl	203050 <osalSysLock.lto_priv.92>

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");
  2032b8:	9b01      	ldr	r3, [sp, #4]
  2032ba:	781b      	ldrb	r3, [r3, #0]
  2032bc:	2b02      	cmp	r3, #2
  2032be:	d002      	beq.n	2032c6 <pwmEnableChannelNotification+0x36>
  2032c0:	4813      	ldr	r0, [pc, #76]	; (203310 <pwmEnableChannelNotification+0x80>)
  2032c2:	f7fd fa85 	bl	2007d0 <chSysHalt>
  osalDbgAssert((pwmp->enabled & ((pwmchnmsk_t)1U << (pwmchnmsk_t)channel)) != 0U,
  2032c6:	9b01      	ldr	r3, [sp, #4]
  2032c8:	68da      	ldr	r2, [r3, #12]
  2032ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
  2032ce:	fa22 f303 	lsr.w	r3, r2, r3
  2032d2:	f003 0301 	and.w	r3, r3, #1
  2032d6:	2b00      	cmp	r3, #0
  2032d8:	d102      	bne.n	2032e0 <pwmEnableChannelNotification+0x50>
  2032da:	480d      	ldr	r0, [pc, #52]	; (203310 <pwmEnableChannelNotification+0x80>)
  2032dc:	f7fd fa78 	bl	2007d0 <chSysHalt>
                "channel not enabled");
  osalDbgAssert(pwmp->config->channels[channel].callback != NULL,
  2032e0:	9b01      	ldr	r3, [sp, #4]
  2032e2:	685a      	ldr	r2, [r3, #4]
  2032e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  2032e8:	3301      	adds	r3, #1
  2032ea:	00db      	lsls	r3, r3, #3
  2032ec:	4413      	add	r3, r2
  2032ee:	689b      	ldr	r3, [r3, #8]
  2032f0:	2b00      	cmp	r3, #0
  2032f2:	d102      	bne.n	2032fa <pwmEnableChannelNotification+0x6a>
  2032f4:	4806      	ldr	r0, [pc, #24]	; (203310 <pwmEnableChannelNotification+0x80>)
  2032f6:	f7fd fa6b 	bl	2007d0 <chSysHalt>
                "undefined channel callback");

  pwmEnableChannelNotificationI(pwmp, channel);
  2032fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  2032fe:	4619      	mov	r1, r3
  203300:	9801      	ldr	r0, [sp, #4]
  203302:	f001 f815 	bl	204330 <pwm_lld_enable_channel_notification>

  osalSysUnlock();
  203306:	f7ff feab 	bl	203060 <osalSysUnlock.lto_priv.86>
}
  20330a:	b003      	add	sp, #12
  20330c:	f85d fb04 	ldr.w	pc, [sp], #4
  203310:	08004cd4 	.word	0x08004cd4
	...

00203320 <chEvtObjectInit>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
  203320:	b082      	sub	sp, #8
  203322:	9001      	str	r0, [sp, #4]

  esp->next = (event_listener_t *)esp;
  203324:	9b01      	ldr	r3, [sp, #4]
  203326:	9a01      	ldr	r2, [sp, #4]
  203328:	601a      	str	r2, [r3, #0]
}
  20332a:	b002      	add	sp, #8
  20332c:	4770      	bx	lr
  20332e:	bf00      	nop

00203330 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event flags object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
  203330:	b500      	push	{lr}
  203332:	b083      	sub	sp, #12
  203334:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
  203336:	9801      	ldr	r0, [sp, #4]
  203338:	f7ff fff2 	bl	203320 <chEvtObjectInit>
}
  20333c:	b003      	add	sp, #12
  20333e:	f85d fb04 	ldr.w	pc, [sp], #4
  203342:	bf00      	nop
	...

00203350 <osalEventBroadcastFlagsI.lto_priv.2>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
  203350:	b500      	push	{lr}
  203352:	b083      	sub	sp, #12
  203354:	9001      	str	r0, [sp, #4]
  203356:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
  203358:	9900      	ldr	r1, [sp, #0]
  20335a:	9801      	ldr	r0, [sp, #4]
  20335c:	f7fe ff08 	bl	202170 <chEvtBroadcastFlagsI>
}
  203360:	b003      	add	sp, #12
  203362:	f85d fb04 	ldr.w	pc, [sp], #4
  203366:	bf00      	nop
	...

00203370 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
  203370:	b500      	push	{lr}
  203372:	b085      	sub	sp, #20
  203374:	9003      	str	r0, [sp, #12]
  203376:	9102      	str	r1, [sp, #8]
  203378:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  20337a:	9b03      	ldr	r3, [sp, #12]
  20337c:	f103 0030 	add.w	r0, r3, #48	; 0x30
  203380:	f04f 33ff 	mov.w	r3, #4294967295
  203384:	9a01      	ldr	r2, [sp, #4]
  203386:	9902      	ldr	r1, [sp, #8]
  203388:	f7ff fcca 	bl	202d20 <oqWriteTimeout>
  20338c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
  20338e:	4618      	mov	r0, r3
  203390:	b005      	add	sp, #20
  203392:	f85d fb04 	ldr.w	pc, [sp], #4
  203396:	bf00      	nop
	...

002033a0 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
  2033a0:	b500      	push	{lr}
  2033a2:	b085      	sub	sp, #20
  2033a4:	9003      	str	r0, [sp, #12]
  2033a6:	9102      	str	r1, [sp, #8]
  2033a8:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  2033aa:	9b03      	ldr	r3, [sp, #12]
  2033ac:	f103 000c 	add.w	r0, r3, #12
  2033b0:	f04f 33ff 	mov.w	r3, #4294967295
  2033b4:	9a01      	ldr	r2, [sp, #4]
  2033b6:	9902      	ldr	r1, [sp, #8]
  2033b8:	f7ff fb82 	bl	202ac0 <iqReadTimeout>
  2033bc:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
  2033be:	4618      	mov	r0, r3
  2033c0:	b005      	add	sp, #20
  2033c2:	f85d fb04 	ldr.w	pc, [sp], #4
  2033c6:	bf00      	nop
	...

002033d0 <_put>:

static msg_t _put(void *ip, uint8_t b) {
  2033d0:	b500      	push	{lr}
  2033d2:	b083      	sub	sp, #12
  2033d4:	9001      	str	r0, [sp, #4]
  2033d6:	460b      	mov	r3, r1
  2033d8:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  2033dc:	9b01      	ldr	r3, [sp, #4]
  2033de:	3330      	adds	r3, #48	; 0x30
  2033e0:	f89d 1003 	ldrb.w	r1, [sp, #3]
  2033e4:	f04f 32ff 	mov.w	r2, #4294967295
  2033e8:	4618      	mov	r0, r3
  2033ea:	f7ff fc11 	bl	202c10 <oqPutTimeout>
  2033ee:	4603      	mov	r3, r0
}
  2033f0:	4618      	mov	r0, r3
  2033f2:	b003      	add	sp, #12
  2033f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00203400 <_get>:

static msg_t _get(void *ip) {
  203400:	b500      	push	{lr}
  203402:	b083      	sub	sp, #12
  203404:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  203406:	9b01      	ldr	r3, [sp, #4]
  203408:	330c      	adds	r3, #12
  20340a:	f04f 31ff 	mov.w	r1, #4294967295
  20340e:	4618      	mov	r0, r3
  203410:	f7ff fb16 	bl	202a40 <iqGetTimeout>
  203414:	4603      	mov	r3, r0
}
  203416:	4618      	mov	r0, r3
  203418:	b003      	add	sp, #12
  20341a:	f85d fb04 	ldr.w	pc, [sp], #4
  20341e:	bf00      	nop

00203420 <_putt>:

static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
  203420:	b500      	push	{lr}
  203422:	b085      	sub	sp, #20
  203424:	9003      	str	r0, [sp, #12]
  203426:	460b      	mov	r3, r1
  203428:	9201      	str	r2, [sp, #4]
  20342a:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  20342e:	9b03      	ldr	r3, [sp, #12]
  203430:	3330      	adds	r3, #48	; 0x30
  203432:	f89d 100b 	ldrb.w	r1, [sp, #11]
  203436:	9a01      	ldr	r2, [sp, #4]
  203438:	4618      	mov	r0, r3
  20343a:	f7ff fbe9 	bl	202c10 <oqPutTimeout>
  20343e:	4603      	mov	r3, r0
}
  203440:	4618      	mov	r0, r3
  203442:	b005      	add	sp, #20
  203444:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00203450 <_gett>:

static msg_t _gett(void *ip, systime_t timeout) {
  203450:	b500      	push	{lr}
  203452:	b083      	sub	sp, #12
  203454:	9001      	str	r0, [sp, #4]
  203456:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  203458:	9b01      	ldr	r3, [sp, #4]
  20345a:	330c      	adds	r3, #12
  20345c:	9900      	ldr	r1, [sp, #0]
  20345e:	4618      	mov	r0, r3
  203460:	f7ff faee 	bl	202a40 <iqGetTimeout>
  203464:	4603      	mov	r3, r0
}
  203466:	4618      	mov	r0, r3
  203468:	b003      	add	sp, #12
  20346a:	f85d fb04 	ldr.w	pc, [sp], #4
  20346e:	bf00      	nop

00203470 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
  203470:	b500      	push	{lr}
  203472:	b085      	sub	sp, #20
  203474:	9003      	str	r0, [sp, #12]
  203476:	9102      	str	r1, [sp, #8]
  203478:	9201      	str	r2, [sp, #4]
  20347a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  20347c:	9b03      	ldr	r3, [sp, #12]
  20347e:	f103 0030 	add.w	r0, r3, #48	; 0x30
  203482:	9b00      	ldr	r3, [sp, #0]
  203484:	9a01      	ldr	r2, [sp, #4]
  203486:	9902      	ldr	r1, [sp, #8]
  203488:	f7ff fc4a 	bl	202d20 <oqWriteTimeout>
  20348c:	4603      	mov	r3, r0
}
  20348e:	4618      	mov	r0, r3
  203490:	b005      	add	sp, #20
  203492:	f85d fb04 	ldr.w	pc, [sp], #4
  203496:	bf00      	nop
	...

002034a0 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
  2034a0:	b500      	push	{lr}
  2034a2:	b085      	sub	sp, #20
  2034a4:	9003      	str	r0, [sp, #12]
  2034a6:	9102      	str	r1, [sp, #8]
  2034a8:	9201      	str	r2, [sp, #4]
  2034aa:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  2034ac:	9b03      	ldr	r3, [sp, #12]
  2034ae:	f103 000c 	add.w	r0, r3, #12
  2034b2:	9b00      	ldr	r3, [sp, #0]
  2034b4:	9a01      	ldr	r2, [sp, #4]
  2034b6:	9902      	ldr	r1, [sp, #8]
  2034b8:	f7ff fb02 	bl	202ac0 <iqReadTimeout>
  2034bc:	4603      	mov	r3, r0
}
  2034be:	4618      	mov	r0, r3
  2034c0:	b005      	add	sp, #20
  2034c2:	f85d fb04 	ldr.w	pc, [sp], #4
  2034c6:	bf00      	nop
	...

002034d0 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
  2034d0:	b508      	push	{r3, lr}

  sd_lld_init();
  2034d2:	f001 f91d 	bl	204710 <sd_lld_init>
}
  2034d6:	bd08      	pop	{r3, pc}
	...

002034e0 <sdObjectInit>:
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {
  2034e0:	b500      	push	{lr}
  2034e2:	b083      	sub	sp, #12
  2034e4:	9001      	str	r0, [sp, #4]

  sdp->vmt = &vmt;
  2034e6:	9b01      	ldr	r3, [sp, #4]
  2034e8:	4a06      	ldr	r2, [pc, #24]	; (203504 <sdObjectInit+0x24>)
  2034ea:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
  2034ec:	9b01      	ldr	r3, [sp, #4]
  2034ee:	3304      	adds	r3, #4
  2034f0:	4618      	mov	r0, r3
  2034f2:	f7ff ff1d 	bl	203330 <osalEventObjectInit>
  sdp->state = SD_STOP;
  2034f6:	9b01      	ldr	r3, [sp, #4]
  2034f8:	2201      	movs	r2, #1
  2034fa:	721a      	strb	r2, [r3, #8]
}
  2034fc:	b003      	add	sp, #12
  2034fe:	f85d fb04 	ldr.w	pc, [sp], #4
  203502:	bf00      	nop
  203504:	08004cf4 	.word	0x08004cf4
	...

00203510 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
  203510:	b500      	push	{lr}
  203512:	b083      	sub	sp, #12
  203514:	9001      	str	r0, [sp, #4]
  203516:	460b      	mov	r3, r1
  203518:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  20351c:	f7fd fa50 	bl	2009c0 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
  203520:	9b01      	ldr	r3, [sp, #4]
  203522:	2b00      	cmp	r3, #0
  203524:	d102      	bne.n	20352c <sdIncomingDataI+0x1c>
  203526:	4811      	ldr	r0, [pc, #68]	; (20356c <sdIncomingDataI+0x5c>)
  203528:	f7fd f952 	bl	2007d0 <chSysHalt>

  if (iqIsEmptyI(&sdp->iqueue))
  20352c:	9b01      	ldr	r3, [sp, #4]
  20352e:	695b      	ldr	r3, [r3, #20]
  203530:	2b00      	cmp	r3, #0
  203532:	d105      	bne.n	203540 <sdIncomingDataI+0x30>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  203534:	9b01      	ldr	r3, [sp, #4]
  203536:	3304      	adds	r3, #4
  203538:	2104      	movs	r1, #4
  20353a:	4618      	mov	r0, r3
  20353c:	f7ff ff08 	bl	203350 <osalEventBroadcastFlagsI.lto_priv.2>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
  203540:	9b01      	ldr	r3, [sp, #4]
  203542:	330c      	adds	r3, #12
  203544:	f89d 2003 	ldrb.w	r2, [sp, #3]
  203548:	4611      	mov	r1, r2
  20354a:	4618      	mov	r0, r3
  20354c:	f7ff fa38 	bl	2029c0 <iqPutI>
  203550:	4603      	mov	r3, r0
  203552:	2b00      	cmp	r3, #0
  203554:	da06      	bge.n	203564 <sdIncomingDataI+0x54>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
  203556:	9b01      	ldr	r3, [sp, #4]
  203558:	3304      	adds	r3, #4
  20355a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  20355e:	4618      	mov	r0, r3
  203560:	f7ff fef6 	bl	203350 <osalEventBroadcastFlagsI.lto_priv.2>
}
  203564:	b003      	add	sp, #12
  203566:	f85d fb04 	ldr.w	pc, [sp], #4
  20356a:	bf00      	nop
  20356c:	08004d14 	.word	0x08004d14

00203570 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
  203570:	b082      	sub	sp, #8
  203572:	9001      	str	r0, [sp, #4]
  203574:	9100      	str	r1, [sp, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  203576:	9b00      	ldr	r3, [sp, #0]
  203578:	b2db      	uxtb	r3, r3
  20357a:	4a11      	ldr	r2, [pc, #68]	; (2035c0 <nvicEnableVector+0x50>)
  20357c:	011b      	lsls	r3, r3, #4
  20357e:	b2d9      	uxtb	r1, r3
  203580:	9b01      	ldr	r3, [sp, #4]
  203582:	4413      	add	r3, r2
  203584:	f503 7340 	add.w	r3, r3, #768	; 0x300
  203588:	460a      	mov	r2, r1
  20358a:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20358c:	9b01      	ldr	r3, [sp, #4]
  20358e:	f003 021f 	and.w	r2, r3, #31
  203592:	490b      	ldr	r1, [pc, #44]	; (2035c0 <nvicEnableVector+0x50>)
  203594:	9b01      	ldr	r3, [sp, #4]
  203596:	095b      	lsrs	r3, r3, #5
  203598:	2001      	movs	r0, #1
  20359a:	fa00 f202 	lsl.w	r2, r0, r2
  20359e:	3360      	adds	r3, #96	; 0x60
  2035a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2035a4:	9b01      	ldr	r3, [sp, #4]
  2035a6:	f003 021f 	and.w	r2, r3, #31
  2035aa:	4905      	ldr	r1, [pc, #20]	; (2035c0 <nvicEnableVector+0x50>)
  2035ac:	9b01      	ldr	r3, [sp, #4]
  2035ae:	095b      	lsrs	r3, r3, #5
  2035b0:	2001      	movs	r0, #1
  2035b2:	fa00 f202 	lsl.w	r2, r0, r2
  2035b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  2035ba:	b002      	add	sp, #8
  2035bc:	4770      	bx	lr
  2035be:	bf00      	nop
  2035c0:	e000e100 	.word	0xe000e100
	...

002035d0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR1 |= PWR_CR1_DBP;
  2035d0:	4b13      	ldr	r3, [pc, #76]	; (203620 <hal_lld_backup_domain_init+0x50>)
  2035d2:	681b      	ldr	r3, [r3, #0]
  2035d4:	4a12      	ldr	r2, [pc, #72]	; (203620 <hal_lld_backup_domain_init+0x50>)
  2035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  2035da:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  2035dc:	4b11      	ldr	r3, [pc, #68]	; (203624 <hal_lld_backup_domain_init+0x54>)
  2035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  2035e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
  2035e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  2035e8:	d006      	beq.n	2035f8 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
  2035ea:	4b0e      	ldr	r3, [pc, #56]	; (203624 <hal_lld_backup_domain_init+0x54>)
  2035ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  2035f0:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  2035f2:	4b0c      	ldr	r3, [pc, #48]	; (203624 <hal_lld_backup_domain_init+0x54>)
  2035f4:	2200      	movs	r2, #0
  2035f6:	671a      	str	r2, [r3, #112]	; 0x70
#if defined(STM32_LSE_BYPASS)
  /* LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON | RCC_BDCR_LSEBYP;
#else
  /* No LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2035f8:	4b0a      	ldr	r3, [pc, #40]	; (203624 <hal_lld_backup_domain_init+0x54>)
  2035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  2035fc:	4a09      	ldr	r2, [pc, #36]	; (203624 <hal_lld_backup_domain_init+0x54>)
  2035fe:	f043 0319 	orr.w	r3, r3, #25
  203602:	6713      	str	r3, [r2, #112]	; 0x70
#endif
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  203604:	4b07      	ldr	r3, [pc, #28]	; (203624 <hal_lld_backup_domain_init+0x54>)
  203606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  203608:	f003 0302 	and.w	r3, r3, #2
  20360c:	2b00      	cmp	r3, #0
  20360e:	d0f9      	beq.n	203604 <hal_lld_backup_domain_init+0x34>

  PWR->CSR1 |= PWR_CSR1_BRE;
  while ((PWR->CSR1 & PWR_CSR1_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  203610:	4b03      	ldr	r3, [pc, #12]	; (203620 <hal_lld_backup_domain_init+0x50>)
  203612:	685b      	ldr	r3, [r3, #4]
  203614:	4a02      	ldr	r2, [pc, #8]	; (203620 <hal_lld_backup_domain_init+0x50>)
  203616:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  20361a:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
  20361c:	4770      	bx	lr
  20361e:	bf00      	nop
  203620:	40007000 	.word	0x40007000
  203624:	40023800 	.word	0x40023800
	...

00203630 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
  203630:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  203632:	4b13      	ldr	r3, [pc, #76]	; (203680 <hal_lld_init+0x50>)
  203634:	691b      	ldr	r3, [r3, #16]
  203636:	4b12      	ldr	r3, [pc, #72]	; (203680 <hal_lld_init+0x50>)
  203638:	f04f 32ff 	mov.w	r2, #4294967295
  20363c:	611a      	str	r2, [r3, #16]
  20363e:	4b10      	ldr	r3, [pc, #64]	; (203680 <hal_lld_init+0x50>)
  203640:	2200      	movs	r2, #0
  203642:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  203644:	4b0e      	ldr	r3, [pc, #56]	; (203680 <hal_lld_init+0x50>)
  203646:	695b      	ldr	r3, [r3, #20]
  203648:	4b0d      	ldr	r3, [pc, #52]	; (203680 <hal_lld_init+0x50>)
  20364a:	f04f 32ff 	mov.w	r2, #4294967295
  20364e:	615a      	str	r2, [r3, #20]
  203650:	4b0b      	ldr	r3, [pc, #44]	; (203680 <hal_lld_init+0x50>)
  203652:	2200      	movs	r2, #0
  203654:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  203656:	4b0a      	ldr	r3, [pc, #40]	; (203680 <hal_lld_init+0x50>)
  203658:	6a1b      	ldr	r3, [r3, #32]
  20365a:	4a09      	ldr	r2, [pc, #36]	; (203680 <hal_lld_init+0x50>)
  20365c:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
  203660:	6213      	str	r3, [r2, #32]
  203662:	4b07      	ldr	r3, [pc, #28]	; (203680 <hal_lld_init+0x50>)
  203664:	2200      	movs	r2, #0
  203666:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  203668:	4b05      	ldr	r3, [pc, #20]	; (203680 <hal_lld_init+0x50>)
  20366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  20366c:	4b04      	ldr	r3, [pc, #16]	; (203680 <hal_lld_init+0x50>)
  20366e:	f04f 32ff 	mov.w	r2, #4294967295
  203672:	625a      	str	r2, [r3, #36]	; 0x24
  203674:	4b02      	ldr	r3, [pc, #8]	; (203680 <hal_lld_init+0x50>)
  203676:	2200      	movs	r2, #0
  203678:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
  20367a:	f7ff ffa9 	bl	2035d0 <hal_lld_backup_domain_init>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR1 |= PWR_CR1_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
  20367e:	bd08      	pop	{r3, pc}
  203680:	40023800 	.word	0x40023800
	...

00203690 <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
  203690:	b082      	sub	sp, #8
#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
  203692:	4b47      	ldr	r3, [pc, #284]	; (2037b0 <stm32_clock_init+0x120>)
  203694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  203698:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  20369a:	4b46      	ldr	r3, [pc, #280]	; (2037b4 <stm32_clock_init+0x124>)
  20369c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  2036a0:	601a      	str	r2, [r3, #0]

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  2036a2:	4b43      	ldr	r3, [pc, #268]	; (2037b0 <stm32_clock_init+0x120>)
  2036a4:	681b      	ldr	r3, [r3, #0]
  2036a6:	4a42      	ldr	r2, [pc, #264]	; (2037b0 <stm32_clock_init+0x120>)
  2036a8:	f043 0301 	orr.w	r3, r3, #1
  2036ac:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2036ae:	4b40      	ldr	r3, [pc, #256]	; (2037b0 <stm32_clock_init+0x120>)
  2036b0:	681b      	ldr	r3, [r3, #0]
  2036b2:	f003 0302 	and.w	r3, r3, #2
  2036b6:	2b00      	cmp	r3, #0
  2036b8:	d0f9      	beq.n	2036ae <stm32_clock_init+0x1e>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
  2036ba:	4b3d      	ldr	r3, [pc, #244]	; (2037b0 <stm32_clock_init+0x120>)
  2036bc:	689b      	ldr	r3, [r3, #8]
  2036be:	4a3c      	ldr	r2, [pc, #240]	; (2037b0 <stm32_clock_init+0x120>)
  2036c0:	f023 0303 	bic.w	r3, r3, #3
  2036c4:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2036c6:	4b3a      	ldr	r3, [pc, #232]	; (2037b0 <stm32_clock_init+0x120>)
  2036c8:	689b      	ldr	r3, [r3, #8]
  2036ca:	f003 030c 	and.w	r3, r3, #12
  2036ce:	2b00      	cmp	r3, #0
  2036d0:	d1f9      	bne.n	2036c6 <stm32_clock_init+0x36>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2036d2:	4b37      	ldr	r3, [pc, #220]	; (2037b0 <stm32_clock_init+0x120>)
  2036d4:	681b      	ldr	r3, [r3, #0]
  2036d6:	4a36      	ldr	r2, [pc, #216]	; (2037b0 <stm32_clock_init+0x120>)
  2036d8:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
  2036dc:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  2036de:	4b34      	ldr	r3, [pc, #208]	; (2037b0 <stm32_clock_init+0x120>)
  2036e0:	2200      	movs	r2, #0
  2036e2:	609a      	str	r2, [r3, #8]

#if STM32_HSE_ENABLED
  /* HSE activation.*/
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  2036e4:	4b32      	ldr	r3, [pc, #200]	; (2037b0 <stm32_clock_init+0x120>)
  2036e6:	681b      	ldr	r3, [r3, #0]
  2036e8:	4a31      	ldr	r2, [pc, #196]	; (2037b0 <stm32_clock_init+0x120>)
  2036ea:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  2036ee:	6013      	str	r3, [r2, #0]
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2036f0:	4b2f      	ldr	r3, [pc, #188]	; (2037b0 <stm32_clock_init+0x120>)
  2036f2:	681b      	ldr	r3, [r3, #0]
  2036f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  2036f8:	2b00      	cmp	r3, #0
  2036fa:	d0f9      	beq.n	2036f0 <stm32_clock_init+0x60>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2036fc:	4b2c      	ldr	r3, [pc, #176]	; (2037b0 <stm32_clock_init+0x120>)
  2036fe:	4a2e      	ldr	r2, [pc, #184]	; (2037b8 <stm32_clock_init+0x128>)
  203700:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
  203702:	4b2b      	ldr	r3, [pc, #172]	; (2037b0 <stm32_clock_init+0x120>)
  203704:	681b      	ldr	r3, [r3, #0]
  203706:	4a2a      	ldr	r2, [pc, #168]	; (2037b0 <stm32_clock_init+0x120>)
  203708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  20370c:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  20370e:	4b29      	ldr	r3, [pc, #164]	; (2037b4 <stm32_clock_init+0x124>)
  203710:	685b      	ldr	r3, [r3, #4]
  203712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  203716:	2b00      	cmp	r3, #0
  203718:	d0f9      	beq.n	20370e <stm32_clock_init+0x7e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  20371a:	4b26      	ldr	r3, [pc, #152]	; (2037b4 <stm32_clock_init+0x124>)
  20371c:	681b      	ldr	r3, [r3, #0]
  20371e:	4a25      	ldr	r2, [pc, #148]	; (2037b4 <stm32_clock_init+0x124>)
  203720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  203724:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  203726:	4b23      	ldr	r3, [pc, #140]	; (2037b4 <stm32_clock_init+0x124>)
  203728:	685b      	ldr	r3, [r3, #4]
  20372a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  20372e:	2b00      	cmp	r3, #0
  203730:	d0f9      	beq.n	203726 <stm32_clock_init+0x96>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  203732:	4b20      	ldr	r3, [pc, #128]	; (2037b4 <stm32_clock_init+0x124>)
  203734:	681b      	ldr	r3, [r3, #0]
  203736:	4a1f      	ldr	r2, [pc, #124]	; (2037b4 <stm32_clock_init+0x124>)
  203738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20373c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20373e:	4b1d      	ldr	r3, [pc, #116]	; (2037b4 <stm32_clock_init+0x124>)
  203740:	685b      	ldr	r3, [r3, #4]
  203742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  203746:	2b00      	cmp	r3, #0
  203748:	d0f9      	beq.n	20373e <stm32_clock_init+0xae>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  20374a:	4b19      	ldr	r3, [pc, #100]	; (2037b0 <stm32_clock_init+0x120>)
  20374c:	681b      	ldr	r3, [r3, #0]
  20374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  203752:	2b00      	cmp	r3, #0
  203754:	d0f9      	beq.n	20374a <stm32_clock_init+0xba>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  203756:	4b16      	ldr	r3, [pc, #88]	; (2037b0 <stm32_clock_init+0x120>)
  203758:	4a18      	ldr	r2, [pc, #96]	; (2037bc <stm32_clock_init+0x12c>)
  20375a:	609a      	str	r2, [r3, #8]
              STM32_HPRE;

  /* DCKCFGR1 register initialization, note, must take care of the _OFF
     pseudo settings.*/
  {
    uint32_t dckcfgr1 = STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ | STM32_PLLSAIDIVR;
  20375c:	f240 1301 	movw	r3, #257	; 0x101
  203760:	9301      	str	r3, [sp, #4]
    dckcfgr1 |= STM32_SAI2SEL;
#endif
#if STM32_SAI1SEL != STM32_SAI1SEL_OFF
    dckcfgr1 |= STM32_SAI1SEL;
#endif
    RCC->DCKCFGR1 = dckcfgr1;
  203762:	4a13      	ldr	r2, [pc, #76]	; (2037b0 <stm32_clock_init+0x120>)
  203764:	9b01      	ldr	r3, [sp, #4]
  203766:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /* Peripheral clock sources.*/
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  20376a:	4b11      	ldr	r3, [pc, #68]	; (2037b0 <stm32_clock_init+0x120>)
  20376c:	2200      	movs	r2, #0
  20376e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  203772:	4b13      	ldr	r3, [pc, #76]	; (2037c0 <stm32_clock_init+0x130>)
  203774:	f240 3207 	movw	r2, #775	; 0x307
  203778:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20377a:	4b0d      	ldr	r3, [pc, #52]	; (2037b0 <stm32_clock_init+0x120>)
  20377c:	689b      	ldr	r3, [r3, #8]
  20377e:	4a0c      	ldr	r2, [pc, #48]	; (2037b0 <stm32_clock_init+0x120>)
  203780:	f043 0302 	orr.w	r3, r3, #2
  203784:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  203786:	4b0a      	ldr	r3, [pc, #40]	; (2037b0 <stm32_clock_init+0x120>)
  203788:	689b      	ldr	r3, [r3, #8]
  20378a:	f003 030c 	and.w	r3, r3, #12
  20378e:	2b08      	cmp	r3, #8
  203790:	d1f9      	bne.n	203786 <stm32_clock_init+0xf6>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  203792:	4b07      	ldr	r3, [pc, #28]	; (2037b0 <stm32_clock_init+0x120>)
  203794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  203796:	4a06      	ldr	r2, [pc, #24]	; (2037b0 <stm32_clock_init+0x120>)
  203798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  20379c:	6453      	str	r3, [r2, #68]	; 0x44
  20379e:	4b04      	ldr	r3, [pc, #16]	; (2037b0 <stm32_clock_init+0x120>)
  2037a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  2037a2:	4a03      	ldr	r2, [pc, #12]	; (2037b0 <stm32_clock_init+0x120>)
  2037a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  2037a8:	6653      	str	r3, [r2, #100]	; 0x64
}
  2037aa:	b002      	add	sp, #8
  2037ac:	4770      	bx	lr
  2037ae:	bf00      	nop
  2037b0:	40023800 	.word	0x40023800
  2037b4:	40007000 	.word	0x40007000
  2037b8:	09406c19 	.word	0x09406c19
  2037bc:	30999400 	.word	0x30999400
  2037c0:	40023c00 	.word	0x40023c00
	...

002037d0 <initgpio>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {
  2037d0:	b082      	sub	sp, #8
  2037d2:	9001      	str	r0, [sp, #4]
  2037d4:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
  2037d6:	9b00      	ldr	r3, [sp, #0]
  2037d8:	685a      	ldr	r2, [r3, #4]
  2037da:	9b01      	ldr	r3, [sp, #4]
  2037dc:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2037de:	9b00      	ldr	r3, [sp, #0]
  2037e0:	689a      	ldr	r2, [r3, #8]
  2037e2:	9b01      	ldr	r3, [sp, #4]
  2037e4:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
  2037e6:	9b00      	ldr	r3, [sp, #0]
  2037e8:	68da      	ldr	r2, [r3, #12]
  2037ea:	9b01      	ldr	r3, [sp, #4]
  2037ec:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
  2037ee:	9b00      	ldr	r3, [sp, #0]
  2037f0:	691a      	ldr	r2, [r3, #16]
  2037f2:	9b01      	ldr	r3, [sp, #4]
  2037f4:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
  2037f6:	9b00      	ldr	r3, [sp, #0]
  2037f8:	695a      	ldr	r2, [r3, #20]
  2037fa:	9b01      	ldr	r3, [sp, #4]
  2037fc:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
  2037fe:	9b00      	ldr	r3, [sp, #0]
  203800:	699a      	ldr	r2, [r3, #24]
  203802:	9b01      	ldr	r3, [sp, #4]
  203804:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
  203806:	9b00      	ldr	r3, [sp, #0]
  203808:	681a      	ldr	r2, [r3, #0]
  20380a:	9b01      	ldr	r3, [sp, #4]
  20380c:	601a      	str	r2, [r3, #0]
}
  20380e:	b002      	add	sp, #8
  203810:	4770      	bx	lr
  203812:	bf00      	nop
	...

00203820 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
  203820:	b500      	push	{lr}
  203822:	b083      	sub	sp, #12
  203824:	9001      	str	r0, [sp, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  203826:	4b29      	ldr	r3, [pc, #164]	; (2038cc <_pal_lld_init+0xac>)
  203828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20382a:	4928      	ldr	r1, [pc, #160]	; (2038cc <_pal_lld_init+0xac>)
  20382c:	f240 73ff 	movw	r3, #2047	; 0x7ff
  203830:	4313      	orrs	r3, r2
  203832:	630b      	str	r3, [r1, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  203834:	4b25      	ldr	r3, [pc, #148]	; (2038cc <_pal_lld_init+0xac>)
  203836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  203838:	4924      	ldr	r1, [pc, #144]	; (2038cc <_pal_lld_init+0xac>)
  20383a:	f240 73ff 	movw	r3, #2047	; 0x7ff
  20383e:	4313      	orrs	r3, r2
  203840:	650b      	str	r3, [r1, #80]	; 0x50

  /*
   * Initial GPIO setup.
   */
#if STM32_HAS_GPIOA
  initgpio(GPIOA, &config->PAData);
  203842:	9b01      	ldr	r3, [sp, #4]
  203844:	4619      	mov	r1, r3
  203846:	4822      	ldr	r0, [pc, #136]	; (2038d0 <_pal_lld_init+0xb0>)
  203848:	f7ff ffc2 	bl	2037d0 <initgpio>
#endif
#if STM32_HAS_GPIOB
  initgpio(GPIOB, &config->PBData);
  20384c:	9b01      	ldr	r3, [sp, #4]
  20384e:	331c      	adds	r3, #28
  203850:	4619      	mov	r1, r3
  203852:	4820      	ldr	r0, [pc, #128]	; (2038d4 <_pal_lld_init+0xb4>)
  203854:	f7ff ffbc 	bl	2037d0 <initgpio>
#endif
#if STM32_HAS_GPIOC
  initgpio(GPIOC, &config->PCData);
  203858:	9b01      	ldr	r3, [sp, #4]
  20385a:	3338      	adds	r3, #56	; 0x38
  20385c:	4619      	mov	r1, r3
  20385e:	481e      	ldr	r0, [pc, #120]	; (2038d8 <_pal_lld_init+0xb8>)
  203860:	f7ff ffb6 	bl	2037d0 <initgpio>
#endif
#if STM32_HAS_GPIOD
  initgpio(GPIOD, &config->PDData);
  203864:	9b01      	ldr	r3, [sp, #4]
  203866:	3354      	adds	r3, #84	; 0x54
  203868:	4619      	mov	r1, r3
  20386a:	481c      	ldr	r0, [pc, #112]	; (2038dc <_pal_lld_init+0xbc>)
  20386c:	f7ff ffb0 	bl	2037d0 <initgpio>
#endif
#if STM32_HAS_GPIOE
  initgpio(GPIOE, &config->PEData);
  203870:	9b01      	ldr	r3, [sp, #4]
  203872:	3370      	adds	r3, #112	; 0x70
  203874:	4619      	mov	r1, r3
  203876:	481a      	ldr	r0, [pc, #104]	; (2038e0 <_pal_lld_init+0xc0>)
  203878:	f7ff ffaa 	bl	2037d0 <initgpio>
#endif
#if STM32_HAS_GPIOF
  initgpio(GPIOF, &config->PFData);
  20387c:	9b01      	ldr	r3, [sp, #4]
  20387e:	338c      	adds	r3, #140	; 0x8c
  203880:	4619      	mov	r1, r3
  203882:	4818      	ldr	r0, [pc, #96]	; (2038e4 <_pal_lld_init+0xc4>)
  203884:	f7ff ffa4 	bl	2037d0 <initgpio>
#endif
#if STM32_HAS_GPIOG
  initgpio(GPIOG, &config->PGData);
  203888:	9b01      	ldr	r3, [sp, #4]
  20388a:	33a8      	adds	r3, #168	; 0xa8
  20388c:	4619      	mov	r1, r3
  20388e:	4816      	ldr	r0, [pc, #88]	; (2038e8 <_pal_lld_init+0xc8>)
  203890:	f7ff ff9e 	bl	2037d0 <initgpio>
#endif
#if STM32_HAS_GPIOH
  initgpio(GPIOH, &config->PHData);
  203894:	9b01      	ldr	r3, [sp, #4]
  203896:	33c4      	adds	r3, #196	; 0xc4
  203898:	4619      	mov	r1, r3
  20389a:	4814      	ldr	r0, [pc, #80]	; (2038ec <_pal_lld_init+0xcc>)
  20389c:	f7ff ff98 	bl	2037d0 <initgpio>
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
  2038a0:	9b01      	ldr	r3, [sp, #4]
  2038a2:	33e0      	adds	r3, #224	; 0xe0
  2038a4:	4619      	mov	r1, r3
  2038a6:	4812      	ldr	r0, [pc, #72]	; (2038f0 <_pal_lld_init+0xd0>)
  2038a8:	f7ff ff92 	bl	2037d0 <initgpio>
#endif
#if STM32_HAS_GPIOJ
  initgpio(GPIOJ, &config->PJData);
  2038ac:	9b01      	ldr	r3, [sp, #4]
  2038ae:	33fc      	adds	r3, #252	; 0xfc
  2038b0:	4619      	mov	r1, r3
  2038b2:	4810      	ldr	r0, [pc, #64]	; (2038f4 <_pal_lld_init+0xd4>)
  2038b4:	f7ff ff8c 	bl	2037d0 <initgpio>
#endif
#if STM32_HAS_GPIOK
  initgpio(GPIOK, &config->PKData);
  2038b8:	9b01      	ldr	r3, [sp, #4]
  2038ba:	f503 738c 	add.w	r3, r3, #280	; 0x118
  2038be:	4619      	mov	r1, r3
  2038c0:	480d      	ldr	r0, [pc, #52]	; (2038f8 <_pal_lld_init+0xd8>)
  2038c2:	f7ff ff85 	bl	2037d0 <initgpio>
#endif
}
  2038c6:	b003      	add	sp, #12
  2038c8:	f85d fb04 	ldr.w	pc, [sp], #4
  2038cc:	40023800 	.word	0x40023800
  2038d0:	40020000 	.word	0x40020000
  2038d4:	40020400 	.word	0x40020400
  2038d8:	40020800 	.word	0x40020800
  2038dc:	40020c00 	.word	0x40020c00
  2038e0:	40021000 	.word	0x40021000
  2038e4:	40021400 	.word	0x40021400
  2038e8:	40021800 	.word	0x40021800
  2038ec:	40021c00 	.word	0x40021c00
  2038f0:	40022000 	.word	0x40022000
  2038f4:	40022400 	.word	0x40022400
  2038f8:	40022800 	.word	0x40022800
  2038fc:	00000000 	.word	0x00000000

00203900 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  203900:	b08e      	sub	sp, #56	; 0x38
  203902:	9003      	str	r0, [sp, #12]
  203904:	9102      	str	r1, [sp, #8]
  203906:	9201      	str	r2, [sp, #4]

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  203908:	9b01      	ldr	r3, [sp, #4]
  20390a:	f003 0303 	and.w	r3, r3, #3
  20390e:	930d      	str	r3, [sp, #52]	; 0x34
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  203910:	9b01      	ldr	r3, [sp, #4]
  203912:	089b      	lsrs	r3, r3, #2
  203914:	f003 0301 	and.w	r3, r3, #1
  203918:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  20391a:	9b01      	ldr	r3, [sp, #4]
  20391c:	08db      	lsrs	r3, r3, #3
  20391e:	f003 0303 	and.w	r3, r3, #3
  203922:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  203924:	9b01      	ldr	r3, [sp, #4]
  203926:	095b      	lsrs	r3, r3, #5
  203928:	f003 0303 	and.w	r3, r3, #3
  20392c:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  20392e:	9b01      	ldr	r3, [sp, #4]
  203930:	09db      	lsrs	r3, r3, #7
  203932:	f003 030f 	and.w	r3, r3, #15
  203936:	9308      	str	r3, [sp, #32]
  uint32_t bit     = 0;
  203938:	2300      	movs	r3, #0
  20393a:	9309      	str	r3, [sp, #36]	; 0x24
  while (true) {
    if ((mask & 1) != 0) {
  20393c:	9b02      	ldr	r3, [sp, #8]
  20393e:	f003 0301 	and.w	r3, r3, #1
  203942:	2b00      	cmp	r3, #0
  203944:	d079      	beq.n	203a3a <_pal_lld_setgroupmode+0x13a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
  203946:	9b09      	ldr	r3, [sp, #36]	; 0x24
  203948:	f003 0307 	and.w	r3, r3, #7
  20394c:	009b      	lsls	r3, r3, #2
  20394e:	9a08      	ldr	r2, [sp, #32]
  203950:	fa02 f303 	lsl.w	r3, r2, r3
  203954:	9307      	str	r3, [sp, #28]
      m1 = 1 << bit;
  203956:	2201      	movs	r2, #1
  203958:	9b09      	ldr	r3, [sp, #36]	; 0x24
  20395a:	fa02 f303 	lsl.w	r3, r2, r3
  20395e:	9306      	str	r3, [sp, #24]
      m2 = 3 << (bit * 2);
  203960:	9b09      	ldr	r3, [sp, #36]	; 0x24
  203962:	005b      	lsls	r3, r3, #1
  203964:	2203      	movs	r2, #3
  203966:	fa02 f303 	lsl.w	r3, r2, r3
  20396a:	9305      	str	r3, [sp, #20]
      m4 = 15 << ((bit & 7) * 4);
  20396c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  20396e:	f003 0307 	and.w	r3, r3, #7
  203972:	009b      	lsls	r3, r3, #2
  203974:	220f      	movs	r2, #15
  203976:	fa02 f303 	lsl.w	r3, r2, r3
  20397a:	9304      	str	r3, [sp, #16]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  20397c:	9b03      	ldr	r3, [sp, #12]
  20397e:	685a      	ldr	r2, [r3, #4]
  203980:	9b06      	ldr	r3, [sp, #24]
  203982:	43db      	mvns	r3, r3
  203984:	401a      	ands	r2, r3
  203986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  203988:	431a      	orrs	r2, r3
  20398a:	9b03      	ldr	r3, [sp, #12]
  20398c:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  20398e:	9b03      	ldr	r3, [sp, #12]
  203990:	689a      	ldr	r2, [r3, #8]
  203992:	9b05      	ldr	r3, [sp, #20]
  203994:	43db      	mvns	r3, r3
  203996:	401a      	ands	r2, r3
  203998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  20399a:	431a      	orrs	r2, r3
  20399c:	9b03      	ldr	r3, [sp, #12]
  20399e:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  2039a0:	9b03      	ldr	r3, [sp, #12]
  2039a2:	68da      	ldr	r2, [r3, #12]
  2039a4:	9b05      	ldr	r3, [sp, #20]
  2039a6:	43db      	mvns	r3, r3
  2039a8:	401a      	ands	r2, r3
  2039aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  2039ac:	431a      	orrs	r2, r3
  2039ae:	9b03      	ldr	r3, [sp, #12]
  2039b0:	60da      	str	r2, [r3, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  2039b2:	9b01      	ldr	r3, [sp, #4]
  2039b4:	f003 0303 	and.w	r3, r3, #3
  2039b8:	2b02      	cmp	r3, #2
  2039ba:	d11f      	bne.n	2039fc <_pal_lld_setgroupmode+0xfc>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
  2039bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  2039be:	2b07      	cmp	r3, #7
  2039c0:	d809      	bhi.n	2039d6 <_pal_lld_setgroupmode+0xd6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  2039c2:	9b03      	ldr	r3, [sp, #12]
  2039c4:	6a1a      	ldr	r2, [r3, #32]
  2039c6:	9b04      	ldr	r3, [sp, #16]
  2039c8:	43db      	mvns	r3, r3
  2039ca:	401a      	ands	r2, r3
  2039cc:	9b07      	ldr	r3, [sp, #28]
  2039ce:	431a      	orrs	r2, r3
  2039d0:	9b03      	ldr	r3, [sp, #12]
  2039d2:	621a      	str	r2, [r3, #32]
  2039d4:	e008      	b.n	2039e8 <_pal_lld_setgroupmode+0xe8>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  2039d6:	9b03      	ldr	r3, [sp, #12]
  2039d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  2039da:	9b04      	ldr	r3, [sp, #16]
  2039dc:	43db      	mvns	r3, r3
  2039de:	401a      	ands	r2, r3
  2039e0:	9b07      	ldr	r3, [sp, #28]
  2039e2:	431a      	orrs	r2, r3
  2039e4:	9b03      	ldr	r3, [sp, #12]
  2039e6:	625a      	str	r2, [r3, #36]	; 0x24
        port->MODER   = (port->MODER & ~m2) | moder;
  2039e8:	9b03      	ldr	r3, [sp, #12]
  2039ea:	681a      	ldr	r2, [r3, #0]
  2039ec:	9b05      	ldr	r3, [sp, #20]
  2039ee:	43db      	mvns	r3, r3
  2039f0:	401a      	ands	r2, r3
  2039f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  2039f4:	431a      	orrs	r2, r3
  2039f6:	9b03      	ldr	r3, [sp, #12]
  2039f8:	601a      	str	r2, [r3, #0]
  2039fa:	e01e      	b.n	203a3a <_pal_lld_setgroupmode+0x13a>
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
  2039fc:	9b03      	ldr	r3, [sp, #12]
  2039fe:	681a      	ldr	r2, [r3, #0]
  203a00:	9b05      	ldr	r3, [sp, #20]
  203a02:	43db      	mvns	r3, r3
  203a04:	401a      	ands	r2, r3
  203a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  203a08:	431a      	orrs	r2, r3
  203a0a:	9b03      	ldr	r3, [sp, #12]
  203a0c:	601a      	str	r2, [r3, #0]
        if (bit < 8)
  203a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  203a10:	2b07      	cmp	r3, #7
  203a12:	d809      	bhi.n	203a28 <_pal_lld_setgroupmode+0x128>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  203a14:	9b03      	ldr	r3, [sp, #12]
  203a16:	6a1a      	ldr	r2, [r3, #32]
  203a18:	9b04      	ldr	r3, [sp, #16]
  203a1a:	43db      	mvns	r3, r3
  203a1c:	401a      	ands	r2, r3
  203a1e:	9b07      	ldr	r3, [sp, #28]
  203a20:	431a      	orrs	r2, r3
  203a22:	9b03      	ldr	r3, [sp, #12]
  203a24:	621a      	str	r2, [r3, #32]
  203a26:	e008      	b.n	203a3a <_pal_lld_setgroupmode+0x13a>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  203a28:	9b03      	ldr	r3, [sp, #12]
  203a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  203a2c:	9b04      	ldr	r3, [sp, #16]
  203a2e:	43db      	mvns	r3, r3
  203a30:	401a      	ands	r2, r3
  203a32:	9b07      	ldr	r3, [sp, #28]
  203a34:	431a      	orrs	r2, r3
  203a36:	9b03      	ldr	r3, [sp, #12]
  203a38:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
  203a3a:	9b02      	ldr	r3, [sp, #8]
  203a3c:	085b      	lsrs	r3, r3, #1
  203a3e:	9302      	str	r3, [sp, #8]
    if (!mask)
  203a40:	9b02      	ldr	r3, [sp, #8]
  203a42:	2b00      	cmp	r3, #0
  203a44:	d00f      	beq.n	203a66 <_pal_lld_setgroupmode+0x166>
      return;
    otyper <<= 1;
  203a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  203a48:	005b      	lsls	r3, r3, #1
  203a4a:	930c      	str	r3, [sp, #48]	; 0x30
    ospeedr <<= 2;
  203a4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  203a4e:	009b      	lsls	r3, r3, #2
  203a50:	930b      	str	r3, [sp, #44]	; 0x2c
    pupdr <<= 2;
  203a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  203a54:	009b      	lsls	r3, r3, #2
  203a56:	930a      	str	r3, [sp, #40]	; 0x28
    moder <<= 2;
  203a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  203a5a:	009b      	lsls	r3, r3, #2
  203a5c:	930d      	str	r3, [sp, #52]	; 0x34
    bit++;
  203a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  203a60:	3301      	adds	r3, #1
  203a62:	9309      	str	r3, [sp, #36]	; 0x24
  203a64:	e76a      	b.n	20393c <_pal_lld_setgroupmode+0x3c>
  }
}
  203a66:	b00e      	add	sp, #56	; 0x38
  203a68:	4770      	bx	lr
  203a6a:	bf00      	nop
  203a6c:	0000      	movs	r0, r0
	...

00203a70 <port_lock.lto_priv.75>:
static inline void port_lock(void) {
  203a70:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  203a72:	b672      	cpsid	i
  203a74:	2320      	movs	r3, #32
  203a76:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  203a78:	9b01      	ldr	r3, [sp, #4]
  203a7a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  203a7e:	b662      	cpsie	i
}
  203a80:	b002      	add	sp, #8
  203a82:	4770      	bx	lr
	...

00203a90 <port_unlock.lto_priv.51>:
static inline void port_unlock(void) {
  203a90:	b082      	sub	sp, #8
  203a92:	2300      	movs	r3, #0
  203a94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  203a96:	9b01      	ldr	r3, [sp, #4]
  203a98:	f383 8811 	msr	BASEPRI, r3
}
  203a9c:	b002      	add	sp, #8
  203a9e:	4770      	bx	lr

00203aa0 <port_lock_from_isr.lto_priv.28>:
static inline void port_lock_from_isr(void) {
  203aa0:	b508      	push	{r3, lr}
  port_lock();
  203aa2:	f7ff ffe5 	bl	203a70 <port_lock.lto_priv.75>
}
  203aa6:	bd08      	pop	{r3, pc}
	...

00203ab0 <port_unlock_from_isr.lto_priv.21>:
static inline void port_unlock_from_isr(void) {
  203ab0:	b508      	push	{r3, lr}
  port_unlock();
  203ab2:	f7ff ffed 	bl	203a90 <port_unlock.lto_priv.51>
}
  203ab6:	bd08      	pop	{r3, pc}
	...

00203ac0 <chSysLockFromISR.lto_priv.14>:
static inline void chSysLockFromISR(void) {
  203ac0:	b508      	push	{r3, lr}
  port_lock_from_isr();
  203ac2:	f7ff ffed 	bl	203aa0 <port_lock_from_isr.lto_priv.28>
  _dbg_check_lock_from_isr();
  203ac6:	f7fc ff0b 	bl	2008e0 <_dbg_check_lock_from_isr>
}
  203aca:	bd08      	pop	{r3, pc}
  203acc:	0000      	movs	r0, r0
	...

00203ad0 <chSysUnlockFromISR.lto_priv.10>:
static inline void chSysUnlockFromISR(void) {
  203ad0:	b508      	push	{r3, lr}
  _dbg_check_unlock_from_isr();
  203ad2:	f7fc ff1d 	bl	200910 <_dbg_check_unlock_from_isr>
  port_unlock_from_isr();
  203ad6:	f7ff ffeb 	bl	203ab0 <port_unlock_from_isr.lto_priv.21>
}
  203ada:	bd08      	pop	{r3, pc}
  203adc:	0000      	movs	r0, r0
	...

00203ae0 <osalSysLockFromISR.lto_priv.6>:
static inline void osalSysLockFromISR(void) {
  203ae0:	b508      	push	{r3, lr}
  chSysLockFromISR();
  203ae2:	f7ff ffed 	bl	203ac0 <chSysLockFromISR.lto_priv.14>
}
  203ae6:	bd08      	pop	{r3, pc}
	...

00203af0 <osalSysUnlockFromISR.lto_priv.4>:
static inline void osalSysUnlockFromISR(void) {
  203af0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
  203af2:	f7ff ffed 	bl	203ad0 <chSysUnlockFromISR.lto_priv.10>
}
  203af6:	bd08      	pop	{r3, pc}
	...

00203b00 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
  203b00:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
  203b02:	f7fc fe75 	bl	2007f0 <chSysTimerHandlerI>
}
  203b06:	bd08      	pop	{r3, pc}
	...

00203b10 <Vector108>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
  203b10:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  203b12:	480e      	ldr	r0, [pc, #56]	; (203b4c <Vector108+0x3c>)
  203b14:	f7fd f84c 	bl	200bb0 <_trace_isr_enter>
  203b18:	f7fc ff12 	bl	200940 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
  203b1c:	4b0c      	ldr	r3, [pc, #48]	; (203b50 <Vector108+0x40>)
  203b1e:	691b      	ldr	r3, [r3, #16]
  203b20:	f003 0302 	and.w	r3, r3, #2
  203b24:	2b00      	cmp	r3, #0
  203b26:	d008      	beq.n	203b3a <Vector108+0x2a>
    STM32_ST_TIM->SR = 0U;
  203b28:	4b09      	ldr	r3, [pc, #36]	; (203b50 <Vector108+0x40>)
  203b2a:	2200      	movs	r2, #0
  203b2c:	611a      	str	r2, [r3, #16]

    osalSysLockFromISR();
  203b2e:	f7ff ffd7 	bl	203ae0 <osalSysLockFromISR.lto_priv.6>
    osalOsTimerHandlerI();
  203b32:	f7ff ffe5 	bl	203b00 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
  203b36:	f7ff ffdb 	bl	203af0 <osalSysUnlockFromISR.lto_priv.4>
  }

  OSAL_IRQ_EPILOGUE();
  203b3a:	f7fc ff21 	bl	200980 <_dbg_check_leave_isr>
  203b3e:	4803      	ldr	r0, [pc, #12]	; (203b4c <Vector108+0x3c>)
  203b40:	f7fd f85e 	bl	200c00 <_trace_isr_leave>
  203b44:	f7fe fd84 	bl	202650 <_port_irq_epilogue>
}
  203b48:	bd08      	pop	{r3, pc}
  203b4a:	bf00      	nop
  203b4c:	08004d24 	.word	0x08004d24
  203b50:	40000c00 	.word	0x40000c00
	...

00203b60 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
  203b60:	b508      	push	{r3, lr}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
  203b62:	4b15      	ldr	r3, [pc, #84]	; (203bb8 <st_lld_init+0x58>)
  203b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  203b66:	4a14      	ldr	r2, [pc, #80]	; (203bb8 <st_lld_init+0x58>)
  203b68:	f043 0308 	orr.w	r3, r3, #8
  203b6c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
  203b6e:	4b13      	ldr	r3, [pc, #76]	; (203bbc <st_lld_init+0x5c>)
  203b70:	689b      	ldr	r3, [r3, #8]
  203b72:	4a12      	ldr	r2, [pc, #72]	; (203bbc <st_lld_init+0x5c>)
  203b74:	f043 0308 	orr.w	r3, r3, #8
  203b78:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  203b7a:	4b11      	ldr	r3, [pc, #68]	; (203bc0 <st_lld_init+0x60>)
  203b7c:	f642 222f 	movw	r2, #10799	; 0x2a2f
  203b80:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  203b82:	4b0f      	ldr	r3, [pc, #60]	; (203bc0 <st_lld_init+0x60>)
  203b84:	f04f 32ff 	mov.w	r2, #4294967295
  203b88:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
  203b8a:	4b0d      	ldr	r3, [pc, #52]	; (203bc0 <st_lld_init+0x60>)
  203b8c:	2200      	movs	r2, #0
  203b8e:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
  203b90:	4b0b      	ldr	r3, [pc, #44]	; (203bc0 <st_lld_init+0x60>)
  203b92:	2200      	movs	r2, #0
  203b94:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
  203b96:	4b0a      	ldr	r3, [pc, #40]	; (203bc0 <st_lld_init+0x60>)
  203b98:	2200      	movs	r2, #0
  203b9a:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
  203b9c:	4b08      	ldr	r3, [pc, #32]	; (203bc0 <st_lld_init+0x60>)
  203b9e:	2200      	movs	r2, #0
  203ba0:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  203ba2:	4b07      	ldr	r3, [pc, #28]	; (203bc0 <st_lld_init+0x60>)
  203ba4:	2201      	movs	r2, #1
  203ba6:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  203ba8:	4b05      	ldr	r3, [pc, #20]	; (203bc0 <st_lld_init+0x60>)
  203baa:	2201      	movs	r2, #1
  203bac:	601a      	str	r2, [r3, #0]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
  203bae:	2108      	movs	r1, #8
  203bb0:	2032      	movs	r0, #50	; 0x32
  203bb2:	f7ff fcdd 	bl	203570 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
  203bb6:	bd08      	pop	{r3, pc}
  203bb8:	40023800 	.word	0x40023800
  203bbc:	e0042000 	.word	0xe0042000
  203bc0:	40000c00 	.word	0x40000c00
	...

00203bd0 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
  203bd0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  203bd2:	4808      	ldr	r0, [pc, #32]	; (203bf4 <VectorB0+0x24>)
  203bd4:	f7fc ffec 	bl	200bb0 <_trace_isr_enter>
  203bd8:	f7fc feb2 	bl	200940 <_dbg_check_enter_isr>

  icu_lld_serve_interrupt(&ICUD2);
  203bdc:	4806      	ldr	r0, [pc, #24]	; (203bf8 <VectorB0+0x28>)
  203bde:	f000 f93f 	bl	203e60 <icu_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
  203be2:	f7fc fecd 	bl	200980 <_dbg_check_leave_isr>
  203be6:	4803      	ldr	r0, [pc, #12]	; (203bf4 <VectorB0+0x24>)
  203be8:	f7fd f80a 	bl	200c00 <_trace_isr_leave>
  203bec:	f7fe fd30 	bl	202650 <_port_irq_epilogue>
}
  203bf0:	bd08      	pop	{r3, pc}
  203bf2:	bf00      	nop
  203bf4:	08004d30 	.word	0x08004d30
  203bf8:	20001184 	.word	0x20001184
  203bfc:	00000000 	.word	0x00000000

00203c00 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
  203c00:	b508      	push	{r3, lr}
  ICUD1.tim = STM32_TIM1;
#endif

#if STM32_ICU_USE_TIM2
  /* Driver initialization.*/
  icuObjectInit(&ICUD2);
  203c02:	4804      	ldr	r0, [pc, #16]	; (203c14 <icu_lld_init+0x14>)
  203c04:	f7ff f964 	bl	202ed0 <icuObjectInit>
  ICUD2.tim = STM32_TIM2;
  203c08:	4b02      	ldr	r3, [pc, #8]	; (203c14 <icu_lld_init+0x14>)
  203c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  203c0e:	60da      	str	r2, [r3, #12]
#if STM32_ICU_USE_TIM9
  /* Driver initialization.*/
  icuObjectInit(&ICUD9);
  ICUD9.tim = STM32_TIM9;
#endif
}
  203c10:	bd08      	pop	{r3, pc}
  203c12:	bf00      	nop
  203c14:	20001184 	.word	0x20001184
	...

00203c20 <icu_lld_start>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_start(ICUDriver *icup) {
  203c20:	b500      	push	{lr}
  203c22:	b085      	sub	sp, #20
  203c24:	9001      	str	r0, [sp, #4]
  uint32_t psc;

  osalDbgAssert((icup->config->channel == ICU_CHANNEL_1) ||
  203c26:	9b01      	ldr	r3, [sp, #4]
  203c28:	685b      	ldr	r3, [r3, #4]
  203c2a:	7d1b      	ldrb	r3, [r3, #20]
  203c2c:	2b00      	cmp	r3, #0
  203c2e:	d007      	beq.n	203c40 <icu_lld_start+0x20>
  203c30:	9b01      	ldr	r3, [sp, #4]
  203c32:	685b      	ldr	r3, [r3, #4]
  203c34:	7d1b      	ldrb	r3, [r3, #20]
  203c36:	2b01      	cmp	r3, #1
  203c38:	d002      	beq.n	203c40 <icu_lld_start+0x20>
  203c3a:	4859      	ldr	r0, [pc, #356]	; (203da0 <icu_lld_start+0x180>)
  203c3c:	f7fc fdc8 	bl	2007d0 <chSysHalt>
                (icup->config->channel == ICU_CHANNEL_2),
                "invalid input");

  if (icup->state == ICU_STOP) {
  203c40:	9b01      	ldr	r3, [sp, #4]
  203c42:	781b      	ldrb	r3, [r3, #0]
  203c44:	2b01      	cmp	r3, #1
  203c46:	d11a      	bne.n	203c7e <icu_lld_start+0x5e>
#endif
    }
#endif

#if STM32_ICU_USE_TIM2
    if (&ICUD2 == icup) {
  203c48:	9b01      	ldr	r3, [sp, #4]
  203c4a:	4a56      	ldr	r2, [pc, #344]	; (203da4 <icu_lld_start+0x184>)
  203c4c:	4293      	cmp	r3, r2
  203c4e:	d127      	bne.n	203ca0 <icu_lld_start+0x80>
      rccEnableTIM2(FALSE);
  203c50:	4b55      	ldr	r3, [pc, #340]	; (203da8 <icu_lld_start+0x188>)
  203c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  203c54:	4a54      	ldr	r2, [pc, #336]	; (203da8 <icu_lld_start+0x188>)
  203c56:	f043 0301 	orr.w	r3, r3, #1
  203c5a:	6413      	str	r3, [r2, #64]	; 0x40
      rccResetTIM2();
  203c5c:	4b52      	ldr	r3, [pc, #328]	; (203da8 <icu_lld_start+0x188>)
  203c5e:	6a1b      	ldr	r3, [r3, #32]
  203c60:	4a51      	ldr	r2, [pc, #324]	; (203da8 <icu_lld_start+0x188>)
  203c62:	f043 0301 	orr.w	r3, r3, #1
  203c66:	6213      	str	r3, [r2, #32]
  203c68:	4b4f      	ldr	r3, [pc, #316]	; (203da8 <icu_lld_start+0x188>)
  203c6a:	2200      	movs	r2, #0
  203c6c:	621a      	str	r2, [r3, #32]
#if !defined(STM32_TIM2_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_ICU_TIM2_IRQ_PRIORITY);
  203c6e:	2107      	movs	r1, #7
  203c70:	201c      	movs	r0, #28
  203c72:	f7ff fc7d 	bl	203570 <nvicEnableVector>
#endif
#if defined(STM32_TIM2CLK)
      icup->clock = STM32_TIM2CLK;
#else
      icup->clock = STM32_TIMCLK1;
  203c76:	9b01      	ldr	r3, [sp, #4]
  203c78:	4a4c      	ldr	r2, [pc, #304]	; (203dac <icu_lld_start+0x18c>)
  203c7a:	609a      	str	r2, [r3, #8]
  203c7c:	e011      	b.n	203ca2 <icu_lld_start+0x82>
    }
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
  203c7e:	9b01      	ldr	r3, [sp, #4]
  203c80:	68db      	ldr	r3, [r3, #12]
  203c82:	2200      	movs	r2, #0
  203c84:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  203c86:	9b01      	ldr	r3, [sp, #4]
  203c88:	68db      	ldr	r3, [r3, #12]
  203c8a:	2200      	movs	r2, #0
  203c8c:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  203c8e:	9b01      	ldr	r3, [sp, #4]
  203c90:	68db      	ldr	r3, [r3, #12]
  203c92:	2200      	movs	r2, #0
  203c94:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  203c96:	9b01      	ldr	r3, [sp, #4]
  203c98:	68db      	ldr	r3, [r3, #12]
  203c9a:	2200      	movs	r2, #0
  203c9c:	625a      	str	r2, [r3, #36]	; 0x24
  203c9e:	e000      	b.n	203ca2 <icu_lld_start+0x82>
      icup->clock = STM32_TIMCLK1;
  203ca0:	bf00      	nop
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  203ca2:	9b01      	ldr	r3, [sp, #4]
  203ca4:	68db      	ldr	r3, [r3, #12]
  203ca6:	2200      	movs	r2, #0
  203ca8:	611a      	str	r2, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  203caa:	9b01      	ldr	r3, [sp, #4]
  203cac:	685b      	ldr	r3, [r3, #4]
  203cae:	699a      	ldr	r2, [r3, #24]
  203cb0:	9b01      	ldr	r3, [sp, #4]
  203cb2:	68db      	ldr	r3, [r3, #12]
  203cb4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  203cb8:	60da      	str	r2, [r3, #12]
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
  203cba:	9b01      	ldr	r3, [sp, #4]
  203cbc:	689a      	ldr	r2, [r3, #8]
  203cbe:	9b01      	ldr	r3, [sp, #4]
  203cc0:	685b      	ldr	r3, [r3, #4]
  203cc2:	685b      	ldr	r3, [r3, #4]
  203cc4:	fbb2 f3f3 	udiv	r3, r2, r3
  203cc8:	3b01      	subs	r3, #1
  203cca:	9303      	str	r3, [sp, #12]
  osalDbgAssert((psc <= 0xFFFF) &&
  203ccc:	9b03      	ldr	r3, [sp, #12]
  203cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  203cd2:	d20a      	bcs.n	203cea <icu_lld_start+0xca>
  203cd4:	9b03      	ldr	r3, [sp, #12]
  203cd6:	3301      	adds	r3, #1
  203cd8:	9a01      	ldr	r2, [sp, #4]
  203cda:	6852      	ldr	r2, [r2, #4]
  203cdc:	6852      	ldr	r2, [r2, #4]
  203cde:	fb02 f203 	mul.w	r2, r2, r3
  203ce2:	9b01      	ldr	r3, [sp, #4]
  203ce4:	689b      	ldr	r3, [r3, #8]
  203ce6:	429a      	cmp	r2, r3
  203ce8:	d002      	beq.n	203cf0 <icu_lld_start+0xd0>
  203cea:	482d      	ldr	r0, [pc, #180]	; (203da0 <icu_lld_start+0x180>)
  203cec:	f7fc fd70 	bl	2007d0 <chSysHalt>
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  203cf0:	9b01      	ldr	r3, [sp, #4]
  203cf2:	68db      	ldr	r3, [r3, #12]
  203cf4:	9a03      	ldr	r2, [sp, #12]
  203cf6:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
  203cf8:	9b01      	ldr	r3, [sp, #4]
  203cfa:	68db      	ldr	r3, [r3, #12]
  203cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
  203d00:	62da      	str	r2, [r3, #44]	; 0x2c

  if (icup->config->channel == ICU_CHANNEL_1) {
  203d02:	9b01      	ldr	r3, [sp, #4]
  203d04:	685b      	ldr	r3, [r3, #4]
  203d06:	7d1b      	ldrb	r3, [r3, #20]
  203d08:	2b00      	cmp	r3, #0
  203d0a:	d123      	bne.n	203d54 <icu_lld_start+0x134>
    /* Selected input 1.
       CCMR1_CC1S = 01 = CH1 Input on TI1.
       CCMR1_CC2S = 10 = CH2 Input on TI1.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
  203d0c:	9b01      	ldr	r3, [sp, #4]
  203d0e:	68db      	ldr	r3, [r3, #12]
  203d10:	f240 2201 	movw	r2, #513	; 0x201
  203d14:	619a      	str	r2, [r3, #24]

    /* SMCR_TS  = 101, input is TI1FP1.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
  203d16:	9b01      	ldr	r3, [sp, #4]
  203d18:	68db      	ldr	r3, [r3, #12]
  203d1a:	2254      	movs	r2, #84	; 0x54
  203d1c:	609a      	str	r2, [r3, #8]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
  203d1e:	9b01      	ldr	r3, [sp, #4]
  203d20:	685b      	ldr	r3, [r3, #4]
  203d22:	781b      	ldrb	r3, [r3, #0]
  203d24:	2b00      	cmp	r3, #0
  203d26:	d104      	bne.n	203d32 <icu_lld_start+0x112>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
  203d28:	9b01      	ldr	r3, [sp, #4]
  203d2a:	68db      	ldr	r3, [r3, #12]
  203d2c:	2231      	movs	r2, #49	; 0x31
  203d2e:	621a      	str	r2, [r3, #32]
  203d30:	e003      	b.n	203d3a <icu_lld_start+0x11a>
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
  203d32:	9b01      	ldr	r3, [sp, #4]
  203d34:	68db      	ldr	r3, [r3, #12]
  203d36:	2213      	movs	r2, #19
  203d38:	621a      	str	r2, [r3, #32]
                        STM32_TIM_CCER_CC2E;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[1];
  203d3a:	9b01      	ldr	r3, [sp, #4]
  203d3c:	68db      	ldr	r3, [r3, #12]
  203d3e:	f103 0238 	add.w	r2, r3, #56	; 0x38
  203d42:	9b01      	ldr	r3, [sp, #4]
  203d44:	611a      	str	r2, [r3, #16]
    icup->pccrp = &icup->tim->CCR[0];
  203d46:	9b01      	ldr	r3, [sp, #4]
  203d48:	68db      	ldr	r3, [r3, #12]
  203d4a:	f103 0234 	add.w	r2, r3, #52	; 0x34
  203d4e:	9b01      	ldr	r3, [sp, #4]
  203d50:	615a      	str	r2, [r3, #20]
  203d52:	e022      	b.n	203d9a <icu_lld_start+0x17a>
  }
  else {
    /* Selected input 2.
       CCMR1_CC1S = 10 = CH1 Input on TI2.
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
  203d54:	9b01      	ldr	r3, [sp, #4]
  203d56:	68db      	ldr	r3, [r3, #12]
  203d58:	f44f 7281 	mov.w	r2, #258	; 0x102
  203d5c:	619a      	str	r2, [r3, #24]

    /* SMCR_TS  = 110, input is TI2FP2.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
  203d5e:	9b01      	ldr	r3, [sp, #4]
  203d60:	68db      	ldr	r3, [r3, #12]
  203d62:	2264      	movs	r2, #100	; 0x64
  203d64:	609a      	str	r2, [r3, #8]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
  203d66:	9b01      	ldr	r3, [sp, #4]
  203d68:	685b      	ldr	r3, [r3, #4]
  203d6a:	781b      	ldrb	r3, [r3, #0]
  203d6c:	2b00      	cmp	r3, #0
  203d6e:	d104      	bne.n	203d7a <icu_lld_start+0x15a>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
  203d70:	9b01      	ldr	r3, [sp, #4]
  203d72:	68db      	ldr	r3, [r3, #12]
  203d74:	2213      	movs	r2, #19
  203d76:	621a      	str	r2, [r3, #32]
  203d78:	e003      	b.n	203d82 <icu_lld_start+0x162>
                        STM32_TIM_CCER_CC2E;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
  203d7a:	9b01      	ldr	r3, [sp, #4]
  203d7c:	68db      	ldr	r3, [r3, #12]
  203d7e:	2231      	movs	r2, #49	; 0x31
  203d80:	621a      	str	r2, [r3, #32]
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
  203d82:	9b01      	ldr	r3, [sp, #4]
  203d84:	68db      	ldr	r3, [r3, #12]
  203d86:	f103 0234 	add.w	r2, r3, #52	; 0x34
  203d8a:	9b01      	ldr	r3, [sp, #4]
  203d8c:	611a      	str	r2, [r3, #16]
    icup->pccrp = &icup->tim->CCR[1];
  203d8e:	9b01      	ldr	r3, [sp, #4]
  203d90:	68db      	ldr	r3, [r3, #12]
  203d92:	f103 0238 	add.w	r2, r3, #56	; 0x38
  203d96:	9b01      	ldr	r3, [sp, #4]
  203d98:	615a      	str	r2, [r3, #20]
  }
}
  203d9a:	b005      	add	sp, #20
  203d9c:	f85d fb04 	ldr.w	pc, [sp], #4
  203da0:	08004d3c 	.word	0x08004d3c
  203da4:	20001184 	.word	0x20001184
  203da8:	40023800 	.word	0x40023800
  203dac:	066ff300 	.word	0x066ff300

00203db0 <icu_lld_start_capture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {
  203db0:	b082      	sub	sp, #8
  203db2:	9001      	str	r0, [sp, #4]

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
  203db4:	9b01      	ldr	r3, [sp, #4]
  203db6:	68db      	ldr	r3, [r3, #12]
  203db8:	695a      	ldr	r2, [r3, #20]
  203dba:	9b01      	ldr	r3, [sp, #4]
  203dbc:	68db      	ldr	r3, [r3, #12]
  203dbe:	f042 0201 	orr.w	r2, r2, #1
  203dc2:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
  203dc4:	9b01      	ldr	r3, [sp, #4]
  203dc6:	68db      	ldr	r3, [r3, #12]
  203dc8:	2200      	movs	r2, #0
  203dca:	611a      	str	r2, [r3, #16]

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  203dcc:	9b01      	ldr	r3, [sp, #4]
  203dce:	68db      	ldr	r3, [r3, #12]
  203dd0:	2205      	movs	r2, #5
  203dd2:	601a      	str	r2, [r3, #0]
}
  203dd4:	b002      	add	sp, #8
  203dd6:	4770      	bx	lr
	...

00203de0 <icu_lld_enable_notifications>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
  203de0:	b084      	sub	sp, #16
  203de2:	9001      	str	r0, [sp, #4]
  uint32_t dier = icup->tim->DIER;
  203de4:	9b01      	ldr	r3, [sp, #4]
  203de6:	68db      	ldr	r3, [r3, #12]
  203de8:	68db      	ldr	r3, [r3, #12]
  203dea:	9303      	str	r3, [sp, #12]

  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
  203dec:	9b03      	ldr	r3, [sp, #12]
  203dee:	b2db      	uxtb	r3, r3
  203df0:	2b00      	cmp	r3, #0
  203df2:	d132      	bne.n	203e5a <icu_lld_enable_notifications+0x7a>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;
  203df4:	9b01      	ldr	r3, [sp, #4]
  203df6:	68db      	ldr	r3, [r3, #12]
  203df8:	2200      	movs	r2, #0
  203dfa:	611a      	str	r2, [r3, #16]

    if (icup->config->channel == ICU_CHANNEL_1) {
  203dfc:	9b01      	ldr	r3, [sp, #4]
  203dfe:	685b      	ldr	r3, [r3, #4]
  203e00:	7d1b      	ldrb	r3, [r3, #20]
  203e02:	2b00      	cmp	r3, #0
  203e04:	d10d      	bne.n	203e22 <icu_lld_enable_notifications+0x42>
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;
  203e06:	9b03      	ldr	r3, [sp, #12]
  203e08:	f043 0302 	orr.w	r3, r3, #2
  203e0c:	9303      	str	r3, [sp, #12]

      /* Optionally enabling width callback on CC2.*/
      if (icup->config->width_cb != NULL)
  203e0e:	9b01      	ldr	r3, [sp, #4]
  203e10:	685b      	ldr	r3, [r3, #4]
  203e12:	689b      	ldr	r3, [r3, #8]
  203e14:	2b00      	cmp	r3, #0
  203e16:	d012      	beq.n	203e3e <icu_lld_enable_notifications+0x5e>
        dier |= STM32_TIM_DIER_CC2IE;
  203e18:	9b03      	ldr	r3, [sp, #12]
  203e1a:	f043 0304 	orr.w	r3, r3, #4
  203e1e:	9303      	str	r3, [sp, #12]
  203e20:	e00e      	b.n	203e40 <icu_lld_enable_notifications+0x60>
    }
    else {
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;
  203e22:	9b03      	ldr	r3, [sp, #12]
  203e24:	f043 0304 	orr.w	r3, r3, #4
  203e28:	9303      	str	r3, [sp, #12]

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
  203e2a:	9b01      	ldr	r3, [sp, #4]
  203e2c:	685b      	ldr	r3, [r3, #4]
  203e2e:	689b      	ldr	r3, [r3, #8]
  203e30:	2b00      	cmp	r3, #0
  203e32:	d005      	beq.n	203e40 <icu_lld_enable_notifications+0x60>
        dier |= STM32_TIM_DIER_CC1IE;
  203e34:	9b03      	ldr	r3, [sp, #12]
  203e36:	f043 0302 	orr.w	r3, r3, #2
  203e3a:	9303      	str	r3, [sp, #12]
  203e3c:	e000      	b.n	203e40 <icu_lld_enable_notifications+0x60>
        dier |= STM32_TIM_DIER_CC2IE;
  203e3e:	bf00      	nop
    }

    /* If an overflow callback is defined then also the overflow callback
       is enabled.*/
    if (icup->config->overflow_cb != NULL)
  203e40:	9b01      	ldr	r3, [sp, #4]
  203e42:	685b      	ldr	r3, [r3, #4]
  203e44:	691b      	ldr	r3, [r3, #16]
  203e46:	2b00      	cmp	r3, #0
  203e48:	d003      	beq.n	203e52 <icu_lld_enable_notifications+0x72>
      dier |= STM32_TIM_DIER_UIE;
  203e4a:	9b03      	ldr	r3, [sp, #12]
  203e4c:	f043 0301 	orr.w	r3, r3, #1
  203e50:	9303      	str	r3, [sp, #12]

    /* One single atomic write.*/
    icup->tim->DIER = dier;
  203e52:	9b01      	ldr	r3, [sp, #4]
  203e54:	68db      	ldr	r3, [r3, #12]
  203e56:	9a03      	ldr	r2, [sp, #12]
  203e58:	60da      	str	r2, [r3, #12]
  }
}
  203e5a:	b004      	add	sp, #16
  203e5c:	4770      	bx	lr
  203e5e:	bf00      	nop

00203e60 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  203e60:	b500      	push	{lr}
  203e62:	b085      	sub	sp, #20
  203e64:	9001      	str	r0, [sp, #4]
  uint32_t sr;

  sr  = icup->tim->SR;
  203e66:	9b01      	ldr	r3, [sp, #4]
  203e68:	68db      	ldr	r3, [r3, #12]
  203e6a:	691b      	ldr	r3, [r3, #16]
  203e6c:	9303      	str	r3, [sp, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  203e6e:	9b01      	ldr	r3, [sp, #4]
  203e70:	68db      	ldr	r3, [r3, #12]
  203e72:	68db      	ldr	r3, [r3, #12]
  203e74:	b2db      	uxtb	r3, r3
  203e76:	9a03      	ldr	r2, [sp, #12]
  203e78:	4013      	ands	r3, r2
  203e7a:	9303      	str	r3, [sp, #12]
  icup->tim->SR = ~sr;
  203e7c:	9b01      	ldr	r3, [sp, #4]
  203e7e:	68db      	ldr	r3, [r3, #12]
  203e80:	9a03      	ldr	r2, [sp, #12]
  203e82:	43d2      	mvns	r2, r2
  203e84:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
  203e86:	9b01      	ldr	r3, [sp, #4]
  203e88:	685b      	ldr	r3, [r3, #4]
  203e8a:	7d1b      	ldrb	r3, [r3, #20]
  203e8c:	2b00      	cmp	r3, #0
  203e8e:	d129      	bne.n	203ee4 <icu_lld_serve_interrupt+0x84>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  203e90:	9b03      	ldr	r3, [sp, #12]
  203e92:	f003 0304 	and.w	r3, r3, #4
  203e96:	2b00      	cmp	r3, #0
  203e98:	d00d      	beq.n	203eb6 <icu_lld_serve_interrupt+0x56>
      _icu_isr_invoke_width_cb(icup);
  203e9a:	9b01      	ldr	r3, [sp, #4]
  203e9c:	781b      	ldrb	r3, [r3, #0]
  203e9e:	2b04      	cmp	r3, #4
  203ea0:	d109      	bne.n	203eb6 <icu_lld_serve_interrupt+0x56>
  203ea2:	9b01      	ldr	r3, [sp, #4]
  203ea4:	685b      	ldr	r3, [r3, #4]
  203ea6:	689b      	ldr	r3, [r3, #8]
  203ea8:	2b00      	cmp	r3, #0
  203eaa:	d004      	beq.n	203eb6 <icu_lld_serve_interrupt+0x56>
  203eac:	9b01      	ldr	r3, [sp, #4]
  203eae:	685b      	ldr	r3, [r3, #4]
  203eb0:	689b      	ldr	r3, [r3, #8]
  203eb2:	9801      	ldr	r0, [sp, #4]
  203eb4:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  203eb6:	9b03      	ldr	r3, [sp, #12]
  203eb8:	f003 0302 	and.w	r3, r3, #2
  203ebc:	2b00      	cmp	r3, #0
  203ebe:	d03b      	beq.n	203f38 <icu_lld_serve_interrupt+0xd8>
      _icu_isr_invoke_period_cb(icup);
  203ec0:	9b01      	ldr	r3, [sp, #4]
  203ec2:	781b      	ldrb	r3, [r3, #0]
  203ec4:	2b04      	cmp	r3, #4
  203ec6:	d109      	bne.n	203edc <icu_lld_serve_interrupt+0x7c>
  203ec8:	9b01      	ldr	r3, [sp, #4]
  203eca:	685b      	ldr	r3, [r3, #4]
  203ecc:	68db      	ldr	r3, [r3, #12]
  203ece:	2b00      	cmp	r3, #0
  203ed0:	d004      	beq.n	203edc <icu_lld_serve_interrupt+0x7c>
  203ed2:	9b01      	ldr	r3, [sp, #4]
  203ed4:	685b      	ldr	r3, [r3, #4]
  203ed6:	68db      	ldr	r3, [r3, #12]
  203ed8:	9801      	ldr	r0, [sp, #4]
  203eda:	4798      	blx	r3
  203edc:	9b01      	ldr	r3, [sp, #4]
  203ede:	2204      	movs	r2, #4
  203ee0:	701a      	strb	r2, [r3, #0]
  203ee2:	e02a      	b.n	203f3a <icu_lld_serve_interrupt+0xda>
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  203ee4:	9b03      	ldr	r3, [sp, #12]
  203ee6:	f003 0302 	and.w	r3, r3, #2
  203eea:	2b00      	cmp	r3, #0
  203eec:	d00d      	beq.n	203f0a <icu_lld_serve_interrupt+0xaa>
      _icu_isr_invoke_width_cb(icup);
  203eee:	9b01      	ldr	r3, [sp, #4]
  203ef0:	781b      	ldrb	r3, [r3, #0]
  203ef2:	2b04      	cmp	r3, #4
  203ef4:	d109      	bne.n	203f0a <icu_lld_serve_interrupt+0xaa>
  203ef6:	9b01      	ldr	r3, [sp, #4]
  203ef8:	685b      	ldr	r3, [r3, #4]
  203efa:	689b      	ldr	r3, [r3, #8]
  203efc:	2b00      	cmp	r3, #0
  203efe:	d004      	beq.n	203f0a <icu_lld_serve_interrupt+0xaa>
  203f00:	9b01      	ldr	r3, [sp, #4]
  203f02:	685b      	ldr	r3, [r3, #4]
  203f04:	689b      	ldr	r3, [r3, #8]
  203f06:	9801      	ldr	r0, [sp, #4]
  203f08:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  203f0a:	9b03      	ldr	r3, [sp, #12]
  203f0c:	f003 0304 	and.w	r3, r3, #4
  203f10:	2b00      	cmp	r3, #0
  203f12:	d012      	beq.n	203f3a <icu_lld_serve_interrupt+0xda>
      _icu_isr_invoke_period_cb(icup);
  203f14:	9b01      	ldr	r3, [sp, #4]
  203f16:	781b      	ldrb	r3, [r3, #0]
  203f18:	2b04      	cmp	r3, #4
  203f1a:	d109      	bne.n	203f30 <icu_lld_serve_interrupt+0xd0>
  203f1c:	9b01      	ldr	r3, [sp, #4]
  203f1e:	685b      	ldr	r3, [r3, #4]
  203f20:	68db      	ldr	r3, [r3, #12]
  203f22:	2b00      	cmp	r3, #0
  203f24:	d004      	beq.n	203f30 <icu_lld_serve_interrupt+0xd0>
  203f26:	9b01      	ldr	r3, [sp, #4]
  203f28:	685b      	ldr	r3, [r3, #4]
  203f2a:	68db      	ldr	r3, [r3, #12]
  203f2c:	9801      	ldr	r0, [sp, #4]
  203f2e:	4798      	blx	r3
  203f30:	9b01      	ldr	r3, [sp, #4]
  203f32:	2204      	movs	r2, #4
  203f34:	701a      	strb	r2, [r3, #0]
  203f36:	e000      	b.n	203f3a <icu_lld_serve_interrupt+0xda>
      _icu_isr_invoke_period_cb(icup);
  203f38:	bf00      	nop
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
  203f3a:	9b03      	ldr	r3, [sp, #12]
  203f3c:	f003 0301 	and.w	r3, r3, #1
  203f40:	2b00      	cmp	r3, #0
  203f42:	d007      	beq.n	203f54 <icu_lld_serve_interrupt+0xf4>
    _icu_isr_invoke_overflow_cb(icup);
  203f44:	9b01      	ldr	r3, [sp, #4]
  203f46:	685b      	ldr	r3, [r3, #4]
  203f48:	691b      	ldr	r3, [r3, #16]
  203f4a:	9801      	ldr	r0, [sp, #4]
  203f4c:	4798      	blx	r3
  203f4e:	9b01      	ldr	r3, [sp, #4]
  203f50:	2203      	movs	r2, #3
  203f52:	701a      	strb	r2, [r3, #0]
}
  203f54:	b005      	add	sp, #20
  203f56:	f85d fb04 	ldr.w	pc, [sp], #4
  203f5a:	bf00      	nop
  203f5c:	0000      	movs	r0, r0
	...

00203f60 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  203f60:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  203f62:	4808      	ldr	r0, [pc, #32]	; (203f84 <VectorA4+0x24>)
  203f64:	f7fc fe24 	bl	200bb0 <_trace_isr_enter>
  203f68:	f7fc fcea 	bl	200940 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD1);
  203f6c:	4806      	ldr	r0, [pc, #24]	; (203f88 <VectorA4+0x28>)
  203f6e:	f000 fa17 	bl	2043a0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
  203f72:	f7fc fd05 	bl	200980 <_dbg_check_leave_isr>
  203f76:	4803      	ldr	r0, [pc, #12]	; (203f84 <VectorA4+0x24>)
  203f78:	f7fc fe42 	bl	200c00 <_trace_isr_leave>
  203f7c:	f7fe fb68 	bl	202650 <_port_irq_epilogue>
}
  203f80:	bd08      	pop	{r3, pc}
  203f82:	bf00      	nop
  203f84:	08004d4c 	.word	0x08004d4c
  203f88:	2000119c 	.word	0x2000119c
  203f8c:	00000000 	.word	0x00000000

00203f90 <VectorAC>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
  203f90:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  203f92:	4808      	ldr	r0, [pc, #32]	; (203fb4 <VectorAC+0x24>)
  203f94:	f7fc fe0c 	bl	200bb0 <_trace_isr_enter>
  203f98:	f7fc fcd2 	bl	200940 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD1);
  203f9c:	4806      	ldr	r0, [pc, #24]	; (203fb8 <VectorAC+0x28>)
  203f9e:	f000 f9ff 	bl	2043a0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
  203fa2:	f7fc fced 	bl	200980 <_dbg_check_leave_isr>
  203fa6:	4803      	ldr	r0, [pc, #12]	; (203fb4 <VectorAC+0x24>)
  203fa8:	f7fc fe2a 	bl	200c00 <_trace_isr_leave>
  203fac:	f7fe fb50 	bl	202650 <_port_irq_epilogue>
}
  203fb0:	bd08      	pop	{r3, pc}
  203fb2:	bf00      	nop
  203fb4:	08004d58 	.word	0x08004d58
  203fb8:	2000119c 	.word	0x2000119c
  203fbc:	00000000 	.word	0x00000000

00203fc0 <VectorF4>:
/**
 * @brief   TIM14 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM14_HANDLER) {
  203fc0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  203fc2:	4808      	ldr	r0, [pc, #32]	; (203fe4 <VectorF4+0x24>)
  203fc4:	f7fc fdf4 	bl	200bb0 <_trace_isr_enter>
  203fc8:	f7fc fcba 	bl	200940 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD14);
  203fcc:	4806      	ldr	r0, [pc, #24]	; (203fe8 <VectorF4+0x28>)
  203fce:	f000 f9e7 	bl	2043a0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
  203fd2:	f7fc fcd5 	bl	200980 <_dbg_check_leave_isr>
  203fd6:	4803      	ldr	r0, [pc, #12]	; (203fe4 <VectorF4+0x24>)
  203fd8:	f7fc fe12 	bl	200c00 <_trace_isr_leave>
  203fdc:	f7fe fb38 	bl	202650 <_port_irq_epilogue>
}
  203fe0:	bd08      	pop	{r3, pc}
  203fe2:	bf00      	nop
  203fe4:	08004d64 	.word	0x08004d64
  203fe8:	200011b8 	.word	0x200011b8
  203fec:	00000000 	.word	0x00000000

00203ff0 <pwm_lld_init>:
/**
 * @brief   Low level PWM driver initialization.
 *
 * @notapi
 */
void pwm_lld_init(void) {
  203ff0:	b508      	push	{r3, lr}

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  203ff2:	4809      	ldr	r0, [pc, #36]	; (204018 <pwm_lld_init+0x28>)
  203ff4:	f7ff f844 	bl	203080 <pwmObjectInit>
  PWMD1.channels = STM32_TIM1_CHANNELS;
  203ff8:	4b07      	ldr	r3, [pc, #28]	; (204018 <pwm_lld_init+0x28>)
  203ffa:	2206      	movs	r2, #6
  203ffc:	741a      	strb	r2, [r3, #16]
  PWMD1.tim = STM32_TIM1;
  203ffe:	4b06      	ldr	r3, [pc, #24]	; (204018 <pwm_lld_init+0x28>)
  204000:	4a06      	ldr	r2, [pc, #24]	; (20401c <pwm_lld_init+0x2c>)
  204002:	619a      	str	r2, [r3, #24]
  PWMD9.tim = STM32_TIM9;
#endif

#if STM32_PWM_USE_TIM14
  /* Driver initialization.*/
  pwmObjectInit(&PWMD14);
  204004:	4806      	ldr	r0, [pc, #24]	; (204020 <pwm_lld_init+0x30>)
  204006:	f7ff f83b 	bl	203080 <pwmObjectInit>
  PWMD14.channels = STM32_TIM14_CHANNELS;
  20400a:	4b05      	ldr	r3, [pc, #20]	; (204020 <pwm_lld_init+0x30>)
  20400c:	2201      	movs	r2, #1
  20400e:	741a      	strb	r2, [r3, #16]
  PWMD14.tim = STM32_TIM14;
  204010:	4b03      	ldr	r3, [pc, #12]	; (204020 <pwm_lld_init+0x30>)
  204012:	4a04      	ldr	r2, [pc, #16]	; (204024 <pwm_lld_init+0x34>)
  204014:	619a      	str	r2, [r3, #24]
#endif
}
  204016:	bd08      	pop	{r3, pc}
  204018:	2000119c 	.word	0x2000119c
  20401c:	40010000 	.word	0x40010000
  204020:	200011b8 	.word	0x200011b8
  204024:	40002000 	.word	0x40002000
	...

00204030 <pwm_lld_start>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
  204030:	b500      	push	{lr}
  204032:	b085      	sub	sp, #20
  204034:	9001      	str	r0, [sp, #4]
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
  204036:	9b01      	ldr	r3, [sp, #4]
  204038:	781b      	ldrb	r3, [r3, #0]
  20403a:	2b01      	cmp	r3, #1
  20403c:	d146      	bne.n	2040cc <pwm_lld_start+0x9c>
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
  20403e:	9b01      	ldr	r3, [sp, #4]
  204040:	4a7d      	ldr	r2, [pc, #500]	; (204238 <pwm_lld_start+0x208>)
  204042:	4293      	cmp	r3, r2
  204044:	d119      	bne.n	20407a <pwm_lld_start+0x4a>
      rccEnableTIM1(FALSE);
  204046:	4b7d      	ldr	r3, [pc, #500]	; (20423c <pwm_lld_start+0x20c>)
  204048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  20404a:	4a7c      	ldr	r2, [pc, #496]	; (20423c <pwm_lld_start+0x20c>)
  20404c:	f043 0301 	orr.w	r3, r3, #1
  204050:	6453      	str	r3, [r2, #68]	; 0x44
      rccResetTIM1();
  204052:	4b7a      	ldr	r3, [pc, #488]	; (20423c <pwm_lld_start+0x20c>)
  204054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  204056:	4a79      	ldr	r2, [pc, #484]	; (20423c <pwm_lld_start+0x20c>)
  204058:	f043 0301 	orr.w	r3, r3, #1
  20405c:	6253      	str	r3, [r2, #36]	; 0x24
  20405e:	4b77      	ldr	r3, [pc, #476]	; (20423c <pwm_lld_start+0x20c>)
  204060:	2200      	movs	r2, #0
  204062:	625a      	str	r2, [r3, #36]	; 0x24
#if !defined(STM32_TIM1_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
  204064:	2107      	movs	r1, #7
  204066:	2019      	movs	r0, #25
  204068:	f7ff fa82 	bl	203570 <nvicEnableVector>
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
  20406c:	2107      	movs	r1, #7
  20406e:	201b      	movs	r0, #27
  204070:	f7ff fa7e 	bl	203570 <nvicEnableVector>
#endif
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
  204074:	9b01      	ldr	r3, [sp, #4]
  204076:	4a72      	ldr	r2, [pc, #456]	; (204240 <pwm_lld_start+0x210>)
  204078:	615a      	str	r2, [r3, #20]
#endif
    }
#endif

#if STM32_PWM_USE_TIM14
    if (&PWMD14 == pwmp) {
  20407a:	9b01      	ldr	r3, [sp, #4]
  20407c:	4a71      	ldr	r2, [pc, #452]	; (204244 <pwm_lld_start+0x214>)
  20407e:	4293      	cmp	r3, r2
  204080:	d115      	bne.n	2040ae <pwm_lld_start+0x7e>
      rccEnableTIM14(FALSE);
  204082:	4b6e      	ldr	r3, [pc, #440]	; (20423c <pwm_lld_start+0x20c>)
  204084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  204086:	4a6d      	ldr	r2, [pc, #436]	; (20423c <pwm_lld_start+0x20c>)
  204088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  20408c:	6413      	str	r3, [r2, #64]	; 0x40
      rccResetTIM14();
  20408e:	4b6b      	ldr	r3, [pc, #428]	; (20423c <pwm_lld_start+0x20c>)
  204090:	6a1b      	ldr	r3, [r3, #32]
  204092:	4a6a      	ldr	r2, [pc, #424]	; (20423c <pwm_lld_start+0x20c>)
  204094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  204098:	6213      	str	r3, [r2, #32]
  20409a:	4b68      	ldr	r3, [pc, #416]	; (20423c <pwm_lld_start+0x20c>)
  20409c:	2200      	movs	r2, #0
  20409e:	621a      	str	r2, [r3, #32]
#if !defined(STM32_TIM14_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM14_NUMBER, STM32_PWM_TIM14_IRQ_PRIORITY);
  2040a0:	2107      	movs	r1, #7
  2040a2:	202d      	movs	r0, #45	; 0x2d
  2040a4:	f7ff fa64 	bl	203570 <nvicEnableVector>
#endif
#if defined(STM32_TIM14CLK)
      pwmp->clock = STM32_TIM14CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
  2040a8:	9b01      	ldr	r3, [sp, #4]
  2040aa:	4a67      	ldr	r2, [pc, #412]	; (204248 <pwm_lld_start+0x218>)
  2040ac:	615a      	str	r2, [r3, #20]
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  2040ae:	9b01      	ldr	r3, [sp, #4]
  2040b0:	699b      	ldr	r3, [r3, #24]
  2040b2:	f646 0268 	movw	r2, #26728	; 0x6868
  2040b6:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
  2040b8:	9b01      	ldr	r3, [sp, #4]
  2040ba:	699b      	ldr	r3, [r3, #24]
  2040bc:	f646 0268 	movw	r2, #26728	; 0x6868
  2040c0:	61da      	str	r2, [r3, #28]
                       STM32_TIM_CCMR2_OC4M(6) | STM32_TIM_CCMR2_OC4PE;
#if STM32_TIM_MAX_CHANNELS > 4
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  2040c2:	9b01      	ldr	r3, [sp, #4]
  2040c4:	699b      	ldr	r3, [r3, #24]
  2040c6:	4a61      	ldr	r2, [pc, #388]	; (20424c <pwm_lld_start+0x21c>)
  2040c8:	655a      	str	r2, [r3, #84]	; 0x54
  2040ca:	e023      	b.n	204114 <pwm_lld_start+0xe4>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
  2040cc:	9b01      	ldr	r3, [sp, #4]
  2040ce:	699b      	ldr	r3, [r3, #24]
  2040d0:	2200      	movs	r2, #0
  2040d2:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  2040d4:	9b01      	ldr	r3, [sp, #4]
  2040d6:	699b      	ldr	r3, [r3, #24]
  2040d8:	2200      	movs	r2, #0
  2040da:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  2040dc:	9b01      	ldr	r3, [sp, #4]
  2040de:	699b      	ldr	r3, [r3, #24]
  2040e0:	2200      	movs	r2, #0
  2040e2:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
  2040e4:	9b01      	ldr	r3, [sp, #4]
  2040e6:	699b      	ldr	r3, [r3, #24]
  2040e8:	2200      	movs	r2, #0
  2040ea:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
  2040ec:	9b01      	ldr	r3, [sp, #4]
  2040ee:	699b      	ldr	r3, [r3, #24]
  2040f0:	2200      	movs	r2, #0
  2040f2:	641a      	str	r2, [r3, #64]	; 0x40
#if STM32_TIM_MAX_CHANNELS > 4
    if (pwmp->channels > 4) {
  2040f4:	9b01      	ldr	r3, [sp, #4]
  2040f6:	7c1b      	ldrb	r3, [r3, #16]
  2040f8:	2b04      	cmp	r3, #4
  2040fa:	d907      	bls.n	20410c <pwm_lld_start+0xdc>
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
  2040fc:	9b01      	ldr	r3, [sp, #4]
  2040fe:	699b      	ldr	r3, [r3, #24]
  204100:	2200      	movs	r2, #0
  204102:	659a      	str	r2, [r3, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
  204104:	9b01      	ldr	r3, [sp, #4]
  204106:	699b      	ldr	r3, [r3, #24]
  204108:	2200      	movs	r2, #0
  20410a:	65da      	str	r2, [r3, #92]	; 0x5c
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  20410c:	9b01      	ldr	r3, [sp, #4]
  20410e:	699b      	ldr	r3, [r3, #24]
  204110:	2200      	movs	r2, #0
  204112:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  204114:	9b01      	ldr	r3, [sp, #4]
  204116:	695a      	ldr	r2, [r3, #20]
  204118:	9b01      	ldr	r3, [sp, #4]
  20411a:	685b      	ldr	r3, [r3, #4]
  20411c:	681b      	ldr	r3, [r3, #0]
  20411e:	fbb2 f3f3 	udiv	r3, r2, r3
  204122:	3b01      	subs	r3, #1
  204124:	9302      	str	r3, [sp, #8]
  osalDbgAssert((psc <= 0xFFFF) &&
  204126:	9b02      	ldr	r3, [sp, #8]
  204128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  20412c:	d20a      	bcs.n	204144 <pwm_lld_start+0x114>
  20412e:	9b02      	ldr	r3, [sp, #8]
  204130:	3301      	adds	r3, #1
  204132:	9a01      	ldr	r2, [sp, #4]
  204134:	6852      	ldr	r2, [r2, #4]
  204136:	6812      	ldr	r2, [r2, #0]
  204138:	fb02 f203 	mul.w	r2, r2, r3
  20413c:	9b01      	ldr	r3, [sp, #4]
  20413e:	695b      	ldr	r3, [r3, #20]
  204140:	429a      	cmp	r2, r3
  204142:	d002      	beq.n	20414a <pwm_lld_start+0x11a>
  204144:	4842      	ldr	r0, [pc, #264]	; (204250 <pwm_lld_start+0x220>)
  204146:	f7fc fb43 	bl	2007d0 <chSysHalt>
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  20414a:	9b01      	ldr	r3, [sp, #4]
  20414c:	699b      	ldr	r3, [r3, #24]
  20414e:	9a02      	ldr	r2, [sp, #8]
  204150:	629a      	str	r2, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
  204152:	9b01      	ldr	r3, [sp, #4]
  204154:	689a      	ldr	r2, [r3, #8]
  204156:	9b01      	ldr	r3, [sp, #4]
  204158:	699b      	ldr	r3, [r3, #24]
  20415a:	3a01      	subs	r2, #1
  20415c:	62da      	str	r2, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
  20415e:	9b01      	ldr	r3, [sp, #4]
  204160:	685a      	ldr	r2, [r3, #4]
  204162:	9b01      	ldr	r3, [sp, #4]
  204164:	699b      	ldr	r3, [r3, #24]
  204166:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  204168:	605a      	str	r2, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  20416a:	2300      	movs	r3, #0
  20416c:	9303      	str	r3, [sp, #12]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  20416e:	9b01      	ldr	r3, [sp, #4]
  204170:	685b      	ldr	r3, [r3, #4]
  204172:	68db      	ldr	r3, [r3, #12]
  204174:	f003 030f 	and.w	r3, r3, #15
  204178:	2b01      	cmp	r3, #1
  20417a:	d005      	beq.n	204188 <pwm_lld_start+0x158>
  20417c:	2b02      	cmp	r3, #2
  20417e:	d107      	bne.n	204190 <pwm_lld_start+0x160>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC1P;
  204180:	9b03      	ldr	r3, [sp, #12]
  204182:	f043 0302 	orr.w	r3, r3, #2
  204186:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
  204188:	9b03      	ldr	r3, [sp, #12]
  20418a:	f043 0301 	orr.w	r3, r3, #1
  20418e:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  204190:	9b01      	ldr	r3, [sp, #4]
  204192:	685b      	ldr	r3, [r3, #4]
  204194:	695b      	ldr	r3, [r3, #20]
  204196:	f003 030f 	and.w	r3, r3, #15
  20419a:	2b01      	cmp	r3, #1
  20419c:	d005      	beq.n	2041aa <pwm_lld_start+0x17a>
  20419e:	2b02      	cmp	r3, #2
  2041a0:	d107      	bne.n	2041b2 <pwm_lld_start+0x182>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
  2041a2:	9b03      	ldr	r3, [sp, #12]
  2041a4:	f043 0320 	orr.w	r3, r3, #32
  2041a8:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
  2041aa:	9b03      	ldr	r3, [sp, #12]
  2041ac:	f043 0310 	orr.w	r3, r3, #16
  2041b0:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  2041b2:	9b01      	ldr	r3, [sp, #4]
  2041b4:	685b      	ldr	r3, [r3, #4]
  2041b6:	69db      	ldr	r3, [r3, #28]
  2041b8:	f003 030f 	and.w	r3, r3, #15
  2041bc:	2b01      	cmp	r3, #1
  2041be:	d005      	beq.n	2041cc <pwm_lld_start+0x19c>
  2041c0:	2b02      	cmp	r3, #2
  2041c2:	d107      	bne.n	2041d4 <pwm_lld_start+0x1a4>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
  2041c4:	9b03      	ldr	r3, [sp, #12]
  2041c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  2041ca:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
  2041cc:	9b03      	ldr	r3, [sp, #12]
  2041ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  2041d2:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
  2041d4:	9b01      	ldr	r3, [sp, #4]
  2041d6:	685b      	ldr	r3, [r3, #4]
  2041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  2041da:	f003 030f 	and.w	r3, r3, #15
  2041de:	2b01      	cmp	r3, #1
  2041e0:	d005      	beq.n	2041ee <pwm_lld_start+0x1be>
  2041e2:	2b02      	cmp	r3, #2
  2041e4:	d107      	bne.n	2041f6 <pwm_lld_start+0x1c6>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
  2041e6:	9b03      	ldr	r3, [sp, #12]
  2041e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  2041ec:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
  2041ee:	9b03      	ldr	r3, [sp, #12]
  2041f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  2041f4:	9303      	str	r3, [sp, #12]
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  2041f6:	9b01      	ldr	r3, [sp, #4]
  2041f8:	699b      	ldr	r3, [r3, #24]
  2041fa:	9a03      	ldr	r2, [sp, #12]
  2041fc:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  2041fe:	9b01      	ldr	r3, [sp, #4]
  204200:	699b      	ldr	r3, [r3, #24]
  204202:	2201      	movs	r2, #1
  204204:	615a      	str	r2, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  204206:	9b01      	ldr	r3, [sp, #4]
  204208:	699b      	ldr	r3, [r3, #24]
  20420a:	2200      	movs	r2, #0
  20420c:	611a      	str	r2, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  20420e:	9b01      	ldr	r3, [sp, #4]
  204210:	685b      	ldr	r3, [r3, #4]
  204212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  204214:	9b01      	ldr	r3, [sp, #4]
  204216:	699b      	ldr	r3, [r3, #24]
  204218:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  20421c:	60da      	str	r2, [r3, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
  20421e:	9b01      	ldr	r3, [sp, #4]
  204220:	699b      	ldr	r3, [r3, #24]
  204222:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  204226:	645a      	str	r2, [r3, #68]	; 0x44
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  204228:	9b01      	ldr	r3, [sp, #4]
  20422a:	699b      	ldr	r3, [r3, #24]
  20422c:	2285      	movs	r2, #133	; 0x85
  20422e:	601a      	str	r2, [r3, #0]
                     STM32_TIM_CR1_CEN;
}
  204230:	b005      	add	sp, #20
  204232:	f85d fb04 	ldr.w	pc, [sp], #4
  204236:	bf00      	nop
  204238:	2000119c 	.word	0x2000119c
  20423c:	40023800 	.word	0x40023800
  204240:	0cdfe600 	.word	0x0cdfe600
  204244:	200011b8 	.word	0x200011b8
  204248:	066ff300 	.word	0x066ff300
  20424c:	01016868 	.word	0x01016868
  204250:	08004d70 	.word	0x08004d70
	...

00204260 <pwm_lld_enable_channel>:
 *
 * @notapi
 */
void pwm_lld_enable_channel(PWMDriver *pwmp,
                            pwmchannel_t channel,
                            pwmcnt_t width) {
  204260:	b084      	sub	sp, #16
  204262:	9003      	str	r0, [sp, #12]
  204264:	460b      	mov	r3, r1
  204266:	9201      	str	r2, [sp, #4]
  204268:	f88d 300b 	strb.w	r3, [sp, #11]

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
#else
  if (channel < 4)
  20426c:	f89d 300b 	ldrb.w	r3, [sp, #11]
  204270:	2b03      	cmp	r3, #3
  204272:	d809      	bhi.n	204288 <pwm_lld_enable_channel+0x28>
    pwmp->tim->CCR[channel] = width;
  204274:	9b03      	ldr	r3, [sp, #12]
  204276:	699a      	ldr	r2, [r3, #24]
  204278:	f89d 300b 	ldrb.w	r3, [sp, #11]
  20427c:	330c      	adds	r3, #12
  20427e:	009b      	lsls	r3, r3, #2
  204280:	4413      	add	r3, r2
  204282:	9a01      	ldr	r2, [sp, #4]
  204284:	605a      	str	r2, [r3, #4]
  204286:	e008      	b.n	20429a <pwm_lld_enable_channel+0x3a>
  else
    pwmp->tim->CCXR[channel - 4] = width;
  204288:	9b03      	ldr	r3, [sp, #12]
  20428a:	699b      	ldr	r3, [r3, #24]
  20428c:	f89d 200b 	ldrb.w	r2, [sp, #11]
  204290:	3a04      	subs	r2, #4
  204292:	3216      	adds	r2, #22
  204294:	9901      	ldr	r1, [sp, #4]
  204296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
#endif
}
  20429a:	b004      	add	sp, #16
  20429c:	4770      	bx	lr
  20429e:	bf00      	nop

002042a0 <pwm_lld_disable_channel>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] channel   PWM channel identifier (0...channels-1)
 *
 * @notapi
 */
void pwm_lld_disable_channel(PWMDriver *pwmp, pwmchannel_t channel) {
  2042a0:	b082      	sub	sp, #8
  2042a2:	9001      	str	r0, [sp, #4]
  2042a4:	460b      	mov	r3, r1
  2042a6:	f88d 3003 	strb.w	r3, [sp, #3]

#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = 0;
  pwmp->tim->DIER &= ~(2 << channel);
#else
  if (channel < 4) {
  2042aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  2042ae:	2b03      	cmp	r3, #3
  2042b0:	d817      	bhi.n	2042e2 <pwm_lld_disable_channel+0x42>
    pwmp->tim->CCR[channel] = 0;
  2042b2:	9b01      	ldr	r3, [sp, #4]
  2042b4:	699a      	ldr	r2, [r3, #24]
  2042b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  2042ba:	330c      	adds	r3, #12
  2042bc:	009b      	lsls	r3, r3, #2
  2042be:	4413      	add	r3, r2
  2042c0:	2200      	movs	r2, #0
  2042c2:	605a      	str	r2, [r3, #4]
    pwmp->tim->DIER &= ~(2 << channel);
  2042c4:	9b01      	ldr	r3, [sp, #4]
  2042c6:	699b      	ldr	r3, [r3, #24]
  2042c8:	68da      	ldr	r2, [r3, #12]
  2042ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
  2042ce:	2102      	movs	r1, #2
  2042d0:	fa01 f303 	lsl.w	r3, r1, r3
  2042d4:	43db      	mvns	r3, r3
  2042d6:	4619      	mov	r1, r3
  2042d8:	9b01      	ldr	r3, [sp, #4]
  2042da:	699b      	ldr	r3, [r3, #24]
  2042dc:	400a      	ands	r2, r1
  2042de:	60da      	str	r2, [r3, #12]
  2042e0:	e008      	b.n	2042f4 <pwm_lld_disable_channel+0x54>
  }
  else
    pwmp->tim->CCXR[channel - 4] = 0;
  2042e2:	9b01      	ldr	r3, [sp, #4]
  2042e4:	699b      	ldr	r3, [r3, #24]
  2042e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
  2042ea:	3a04      	subs	r2, #4
  2042ec:	3216      	adds	r2, #22
  2042ee:	2100      	movs	r1, #0
  2042f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
#endif
}
  2042f4:	b002      	add	sp, #8
  2042f6:	4770      	bx	lr
	...

00204300 <pwm_lld_enable_periodic_notification>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_enable_periodic_notification(PWMDriver *pwmp) {
  204300:	b084      	sub	sp, #16
  204302:	9001      	str	r0, [sp, #4]
  uint32_t dier = pwmp->tim->DIER;
  204304:	9b01      	ldr	r3, [sp, #4]
  204306:	699b      	ldr	r3, [r3, #24]
  204308:	68db      	ldr	r3, [r3, #12]
  20430a:	9303      	str	r3, [sp, #12]

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & STM32_TIM_DIER_UIE) == 0) {
  20430c:	9b03      	ldr	r3, [sp, #12]
  20430e:	f003 0301 	and.w	r3, r3, #1
  204312:	2b00      	cmp	r3, #0
  204314:	d10a      	bne.n	20432c <pwm_lld_enable_periodic_notification+0x2c>
    pwmp->tim->SR   = ~STM32_TIM_SR_UIF;
  204316:	9b01      	ldr	r3, [sp, #4]
  204318:	699b      	ldr	r3, [r3, #24]
  20431a:	f06f 0201 	mvn.w	r2, #1
  20431e:	611a      	str	r2, [r3, #16]
    pwmp->tim->DIER = dier | STM32_TIM_DIER_UIE;
  204320:	9b01      	ldr	r3, [sp, #4]
  204322:	699b      	ldr	r3, [r3, #24]
  204324:	9a03      	ldr	r2, [sp, #12]
  204326:	f042 0201 	orr.w	r2, r2, #1
  20432a:	60da      	str	r2, [r3, #12]
  }
}
  20432c:	b004      	add	sp, #16
  20432e:	4770      	bx	lr

00204330 <pwm_lld_enable_channel_notification>:
 * @param[in] channel   PWM channel identifier (0...channels-1)
 *
 * @notapi
 */
void pwm_lld_enable_channel_notification(PWMDriver *pwmp,
                                         pwmchannel_t channel) {
  204330:	b500      	push	{lr}
  204332:	b085      	sub	sp, #20
  204334:	9001      	str	r0, [sp, #4]
  204336:	460b      	mov	r3, r1
  204338:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t dier = pwmp->tim->DIER;
  20433c:	9b01      	ldr	r3, [sp, #4]
  20433e:	699b      	ldr	r3, [r3, #24]
  204340:	68db      	ldr	r3, [r3, #12]
  204342:	9303      	str	r3, [sp, #12]

#if STM32_TIM_MAX_CHANNELS > 4
  /* Channels 4 and 5 do not support callbacks.*/
  osalDbgAssert(channel < 4, "callback not supported");
  204344:	f89d 3003 	ldrb.w	r3, [sp, #3]
  204348:	2b03      	cmp	r3, #3
  20434a:	d902      	bls.n	204352 <pwm_lld_enable_channel_notification+0x22>
  20434c:	4811      	ldr	r0, [pc, #68]	; (204394 <pwm_lld_enable_channel_notification+0x64>)
  20434e:	f7fc fa3f 	bl	2007d0 <chSysHalt>
#endif

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & (2 << channel)) == 0) {
  204352:	f89d 3003 	ldrb.w	r3, [sp, #3]
  204356:	2202      	movs	r2, #2
  204358:	fa02 f303 	lsl.w	r3, r2, r3
  20435c:	461a      	mov	r2, r3
  20435e:	9b03      	ldr	r3, [sp, #12]
  204360:	4013      	ands	r3, r2
  204362:	2b00      	cmp	r3, #0
  204364:	d113      	bne.n	20438e <pwm_lld_enable_channel_notification+0x5e>
    pwmp->tim->SR   = ~(2 << channel);
  204366:	f89d 3003 	ldrb.w	r3, [sp, #3]
  20436a:	2202      	movs	r2, #2
  20436c:	fa02 f303 	lsl.w	r3, r2, r3
  204370:	43da      	mvns	r2, r3
  204372:	9b01      	ldr	r3, [sp, #4]
  204374:	699b      	ldr	r3, [r3, #24]
  204376:	611a      	str	r2, [r3, #16]
    pwmp->tim->DIER = dier | (2 << channel);
  204378:	f89d 3003 	ldrb.w	r3, [sp, #3]
  20437c:	2202      	movs	r2, #2
  20437e:	fa02 f303 	lsl.w	r3, r2, r3
  204382:	4619      	mov	r1, r3
  204384:	9b01      	ldr	r3, [sp, #4]
  204386:	699b      	ldr	r3, [r3, #24]
  204388:	9a03      	ldr	r2, [sp, #12]
  20438a:	430a      	orrs	r2, r1
  20438c:	60da      	str	r2, [r3, #12]
  }
}
  20438e:	b005      	add	sp, #20
  204390:	f85d fb04 	ldr.w	pc, [sp], #4
  204394:	08004d80 	.word	0x08004d80
	...

002043a0 <pwm_lld_serve_interrupt>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  2043a0:	b500      	push	{lr}
  2043a2:	b085      	sub	sp, #20
  2043a4:	9001      	str	r0, [sp, #4]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  2043a6:	9b01      	ldr	r3, [sp, #4]
  2043a8:	699b      	ldr	r3, [r3, #24]
  2043aa:	691b      	ldr	r3, [r3, #16]
  2043ac:	9303      	str	r3, [sp, #12]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  2043ae:	9b01      	ldr	r3, [sp, #4]
  2043b0:	699b      	ldr	r3, [r3, #24]
  2043b2:	68db      	ldr	r3, [r3, #12]
  2043b4:	b2db      	uxtb	r3, r3
  2043b6:	9a03      	ldr	r2, [sp, #12]
  2043b8:	4013      	ands	r3, r2
  2043ba:	9303      	str	r3, [sp, #12]
  pwmp->tim->SR = ~sr;
  2043bc:	9b01      	ldr	r3, [sp, #4]
  2043be:	699b      	ldr	r3, [r3, #24]
  2043c0:	9a03      	ldr	r2, [sp, #12]
  2043c2:	43d2      	mvns	r2, r2
  2043c4:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  2043c6:	9b03      	ldr	r3, [sp, #12]
  2043c8:	f003 0302 	and.w	r3, r3, #2
  2043cc:	2b00      	cmp	r3, #0
  2043ce:	d009      	beq.n	2043e4 <pwm_lld_serve_interrupt+0x44>
      (pwmp->config->channels[0].callback != NULL))
  2043d0:	9b01      	ldr	r3, [sp, #4]
  2043d2:	685b      	ldr	r3, [r3, #4]
  2043d4:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  2043d6:	2b00      	cmp	r3, #0
  2043d8:	d004      	beq.n	2043e4 <pwm_lld_serve_interrupt+0x44>
    pwmp->config->channels[0].callback(pwmp);
  2043da:	9b01      	ldr	r3, [sp, #4]
  2043dc:	685b      	ldr	r3, [r3, #4]
  2043de:	691b      	ldr	r3, [r3, #16]
  2043e0:	9801      	ldr	r0, [sp, #4]
  2043e2:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  2043e4:	9b03      	ldr	r3, [sp, #12]
  2043e6:	f003 0304 	and.w	r3, r3, #4
  2043ea:	2b00      	cmp	r3, #0
  2043ec:	d009      	beq.n	204402 <pwm_lld_serve_interrupt+0x62>
      (pwmp->config->channels[1].callback != NULL))
  2043ee:	9b01      	ldr	r3, [sp, #4]
  2043f0:	685b      	ldr	r3, [r3, #4]
  2043f2:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  2043f4:	2b00      	cmp	r3, #0
  2043f6:	d004      	beq.n	204402 <pwm_lld_serve_interrupt+0x62>
    pwmp->config->channels[1].callback(pwmp);
  2043f8:	9b01      	ldr	r3, [sp, #4]
  2043fa:	685b      	ldr	r3, [r3, #4]
  2043fc:	699b      	ldr	r3, [r3, #24]
  2043fe:	9801      	ldr	r0, [sp, #4]
  204400:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  204402:	9b03      	ldr	r3, [sp, #12]
  204404:	f003 0308 	and.w	r3, r3, #8
  204408:	2b00      	cmp	r3, #0
  20440a:	d009      	beq.n	204420 <pwm_lld_serve_interrupt+0x80>
      (pwmp->config->channels[2].callback != NULL))
  20440c:	9b01      	ldr	r3, [sp, #4]
  20440e:	685b      	ldr	r3, [r3, #4]
  204410:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  204412:	2b00      	cmp	r3, #0
  204414:	d004      	beq.n	204420 <pwm_lld_serve_interrupt+0x80>
    pwmp->config->channels[2].callback(pwmp);
  204416:	9b01      	ldr	r3, [sp, #4]
  204418:	685b      	ldr	r3, [r3, #4]
  20441a:	6a1b      	ldr	r3, [r3, #32]
  20441c:	9801      	ldr	r0, [sp, #4]
  20441e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  204420:	9b03      	ldr	r3, [sp, #12]
  204422:	f003 0310 	and.w	r3, r3, #16
  204426:	2b00      	cmp	r3, #0
  204428:	d009      	beq.n	20443e <pwm_lld_serve_interrupt+0x9e>
      (pwmp->config->channels[3].callback != NULL))
  20442a:	9b01      	ldr	r3, [sp, #4]
  20442c:	685b      	ldr	r3, [r3, #4]
  20442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  204430:	2b00      	cmp	r3, #0
  204432:	d004      	beq.n	20443e <pwm_lld_serve_interrupt+0x9e>
    pwmp->config->channels[3].callback(pwmp);
  204434:	9b01      	ldr	r3, [sp, #4]
  204436:	685b      	ldr	r3, [r3, #4]
  204438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  20443a:	9801      	ldr	r0, [sp, #4]
  20443c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
  20443e:	9b03      	ldr	r3, [sp, #12]
  204440:	f003 0301 	and.w	r3, r3, #1
  204444:	2b00      	cmp	r3, #0
  204446:	d009      	beq.n	20445c <pwm_lld_serve_interrupt+0xbc>
  204448:	9b01      	ldr	r3, [sp, #4]
  20444a:	685b      	ldr	r3, [r3, #4]
  20444c:	689b      	ldr	r3, [r3, #8]
  20444e:	2b00      	cmp	r3, #0
  204450:	d004      	beq.n	20445c <pwm_lld_serve_interrupt+0xbc>
    pwmp->config->callback(pwmp);
  204452:	9b01      	ldr	r3, [sp, #4]
  204454:	685b      	ldr	r3, [r3, #4]
  204456:	689b      	ldr	r3, [r3, #8]
  204458:	9801      	ldr	r0, [sp, #4]
  20445a:	4798      	blx	r3
}
  20445c:	b005      	add	sp, #20
  20445e:	f85d fb04 	ldr.w	pc, [sp], #4
  204462:	bf00      	nop
	...

00204470 <port_lock.lto_priv.77>:
static inline void port_lock(void) {
  204470:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
  204472:	b672      	cpsid	i
  204474:	2320      	movs	r3, #32
  204476:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  204478:	9b01      	ldr	r3, [sp, #4]
  20447a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  20447e:	b662      	cpsie	i
}
  204480:	b002      	add	sp, #8
  204482:	4770      	bx	lr
	...

00204490 <port_unlock.lto_priv.53>:
static inline void port_unlock(void) {
  204490:	b082      	sub	sp, #8
  204492:	2300      	movs	r3, #0
  204494:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  204496:	9b01      	ldr	r3, [sp, #4]
  204498:	f383 8811 	msr	BASEPRI, r3
}
  20449c:	b002      	add	sp, #8
  20449e:	4770      	bx	lr

002044a0 <port_lock_from_isr.lto_priv.29>:
static inline void port_lock_from_isr(void) {
  2044a0:	b508      	push	{r3, lr}
  port_lock();
  2044a2:	f7ff ffe5 	bl	204470 <port_lock.lto_priv.77>
}
  2044a6:	bd08      	pop	{r3, pc}
	...

002044b0 <port_unlock_from_isr.lto_priv.22>:
static inline void port_unlock_from_isr(void) {
  2044b0:	b508      	push	{r3, lr}
  port_unlock();
  2044b2:	f7ff ffed 	bl	204490 <port_unlock.lto_priv.53>
}
  2044b6:	bd08      	pop	{r3, pc}
	...

002044c0 <chSysLockFromISR.lto_priv.15>:
static inline void chSysLockFromISR(void) {
  2044c0:	b508      	push	{r3, lr}
  port_lock_from_isr();
  2044c2:	f7ff ffed 	bl	2044a0 <port_lock_from_isr.lto_priv.29>
  _dbg_check_lock_from_isr();
  2044c6:	f7fc fa0b 	bl	2008e0 <_dbg_check_lock_from_isr>
}
  2044ca:	bd08      	pop	{r3, pc}
  2044cc:	0000      	movs	r0, r0
	...

002044d0 <chSysUnlockFromISR.lto_priv.11>:
static inline void chSysUnlockFromISR(void) {
  2044d0:	b508      	push	{r3, lr}
  _dbg_check_unlock_from_isr();
  2044d2:	f7fc fa1d 	bl	200910 <_dbg_check_unlock_from_isr>
  port_unlock_from_isr();
  2044d6:	f7ff ffeb 	bl	2044b0 <port_unlock_from_isr.lto_priv.22>
}
  2044da:	bd08      	pop	{r3, pc}
  2044dc:	0000      	movs	r0, r0
	...

002044e0 <osalSysLockFromISR.lto_priv.7>:
static inline void osalSysLockFromISR(void) {
  2044e0:	b508      	push	{r3, lr}
  chSysLockFromISR();
  2044e2:	f7ff ffed 	bl	2044c0 <chSysLockFromISR.lto_priv.15>
}
  2044e6:	bd08      	pop	{r3, pc}
	...

002044f0 <osalSysUnlockFromISR.lto_priv.5>:
static inline void osalSysUnlockFromISR(void) {
  2044f0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
  2044f2:	f7ff ffed 	bl	2044d0 <chSysUnlockFromISR.lto_priv.11>
}
  2044f6:	bd08      	pop	{r3, pc}
	...

00204500 <osalEventBroadcastFlagsI.lto_priv.3>:
                                            eventflags_t flags) {
  204500:	b500      	push	{lr}
  204502:	b083      	sub	sp, #12
  204504:	9001      	str	r0, [sp, #4]
  204506:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
  204508:	9900      	ldr	r1, [sp, #0]
  20450a:	9801      	ldr	r0, [sp, #4]
  20450c:	f7fd fe30 	bl	202170 <chEvtBroadcastFlagsI>
}
  204510:	b003      	add	sp, #12
  204512:	f85d fb04 	ldr.w	pc, [sp], #4
  204516:	bf00      	nop
	...

00204520 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] isr       USART ISR register value
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  204520:	b500      	push	{lr}
  204522:	b085      	sub	sp, #20
  204524:	9001      	str	r0, [sp, #4]
  204526:	9100      	str	r1, [sp, #0]
  eventflags_t sts = 0;
  204528:	2300      	movs	r3, #0
  20452a:	9303      	str	r3, [sp, #12]

  if (isr & USART_ISR_ORE)
  20452c:	9b00      	ldr	r3, [sp, #0]
  20452e:	f003 0308 	and.w	r3, r3, #8
  204532:	2b00      	cmp	r3, #0
  204534:	d003      	beq.n	20453e <set_error+0x1e>
    sts |= SD_OVERRUN_ERROR;
  204536:	9b03      	ldr	r3, [sp, #12]
  204538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  20453c:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_PE)
  20453e:	9b00      	ldr	r3, [sp, #0]
  204540:	f003 0301 	and.w	r3, r3, #1
  204544:	2b00      	cmp	r3, #0
  204546:	d003      	beq.n	204550 <set_error+0x30>
    sts |= SD_PARITY_ERROR;
  204548:	9b03      	ldr	r3, [sp, #12]
  20454a:	f043 0320 	orr.w	r3, r3, #32
  20454e:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_FE)
  204550:	9b00      	ldr	r3, [sp, #0]
  204552:	f003 0302 	and.w	r3, r3, #2
  204556:	2b00      	cmp	r3, #0
  204558:	d003      	beq.n	204562 <set_error+0x42>
    sts |= SD_FRAMING_ERROR;
  20455a:	9b03      	ldr	r3, [sp, #12]
  20455c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  204560:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_NE)
  204562:	9b00      	ldr	r3, [sp, #0]
  204564:	f003 0304 	and.w	r3, r3, #4
  204568:	2b00      	cmp	r3, #0
  20456a:	d003      	beq.n	204574 <set_error+0x54>
    sts |= SD_NOISE_ERROR;
  20456c:	9b03      	ldr	r3, [sp, #12]
  20456e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  204572:	9303      	str	r3, [sp, #12]
  osalSysLockFromISR();
  204574:	f7ff ffb4 	bl	2044e0 <osalSysLockFromISR.lto_priv.7>
  chnAddFlagsI(sdp, sts);
  204578:	9b01      	ldr	r3, [sp, #4]
  20457a:	3304      	adds	r3, #4
  20457c:	9903      	ldr	r1, [sp, #12]
  20457e:	4618      	mov	r0, r3
  204580:	f7ff ffbe 	bl	204500 <osalEventBroadcastFlagsI.lto_priv.3>
  osalSysUnlockFromISR();
  204584:	f7ff ffb4 	bl	2044f0 <osalSysUnlockFromISR.lto_priv.5>
}
  204588:	b005      	add	sp, #20
  20458a:	f85d fb04 	ldr.w	pc, [sp], #4
  20458e:	bf00      	nop

00204590 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  204590:	b500      	push	{lr}
  204592:	b087      	sub	sp, #28
  204594:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
  204596:	9b01      	ldr	r3, [sp, #4]
  204598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  20459a:	9305      	str	r3, [sp, #20]
  uint32_t cr1 = u->CR1;
  20459c:	9b05      	ldr	r3, [sp, #20]
  20459e:	681b      	ldr	r3, [r3, #0]
  2045a0:	9304      	str	r3, [sp, #16]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
  2045a2:	9b05      	ldr	r3, [sp, #20]
  2045a4:	69db      	ldr	r3, [r3, #28]
  2045a6:	9303      	str	r3, [sp, #12]
  u->ICR = isr;
  2045a8:	9b05      	ldr	r3, [sp, #20]
  2045aa:	9a03      	ldr	r2, [sp, #12]
  2045ac:	621a      	str	r2, [r3, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2045ae:	9b03      	ldr	r3, [sp, #12]
  2045b0:	f003 030f 	and.w	r3, r3, #15
  2045b4:	2b00      	cmp	r3, #0
  2045b6:	d003      	beq.n	2045c0 <serve_interrupt+0x30>
    set_error(sdp, isr);
  2045b8:	9903      	ldr	r1, [sp, #12]
  2045ba:	9801      	ldr	r0, [sp, #4]
  2045bc:	f7ff ffb0 	bl	204520 <set_error>

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
  2045c0:	9b03      	ldr	r3, [sp, #12]
  2045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  2045c6:	2b00      	cmp	r3, #0
  2045c8:	d00a      	beq.n	2045e0 <serve_interrupt+0x50>
    osalSysLockFromISR();
  2045ca:	f7ff ff89 	bl	2044e0 <osalSysLockFromISR.lto_priv.7>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
  2045ce:	9b01      	ldr	r3, [sp, #4]
  2045d0:	3304      	adds	r3, #4
  2045d2:	f44f 7100 	mov.w	r1, #512	; 0x200
  2045d6:	4618      	mov	r0, r3
  2045d8:	f7ff ff92 	bl	204500 <osalEventBroadcastFlagsI.lto_priv.3>
    osalSysUnlockFromISR();
  2045dc:	f7ff ff88 	bl	2044f0 <osalSysUnlockFromISR.lto_priv.5>
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
  2045e0:	9b03      	ldr	r3, [sp, #12]
  2045e2:	f003 0320 	and.w	r3, r3, #32
  2045e6:	2b00      	cmp	r3, #0
  2045e8:	d00f      	beq.n	20460a <serve_interrupt+0x7a>
    osalSysLockFromISR();
  2045ea:	f7ff ff79 	bl	2044e0 <osalSysLockFromISR.lto_priv.7>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  2045ee:	9b05      	ldr	r3, [sp, #20]
  2045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  2045f2:	b2da      	uxtb	r2, r3
  2045f4:	9b01      	ldr	r3, [sp, #4]
  2045f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
  2045fa:	4013      	ands	r3, r2
  2045fc:	b2db      	uxtb	r3, r3
  2045fe:	4619      	mov	r1, r3
  204600:	9801      	ldr	r0, [sp, #4]
  204602:	f7fe ff85 	bl	203510 <sdIncomingDataI>
    osalSysUnlockFromISR();
  204606:	f7ff ff73 	bl	2044f0 <osalSysUnlockFromISR.lto_priv.5>
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  20460a:	9b04      	ldr	r3, [sp, #16]
  20460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  204610:	2b00      	cmp	r3, #0
  204612:	d020      	beq.n	204656 <serve_interrupt+0xc6>
  204614:	9b03      	ldr	r3, [sp, #12]
  204616:	f003 0380 	and.w	r3, r3, #128	; 0x80
  20461a:	2b00      	cmp	r3, #0
  20461c:	d01b      	beq.n	204656 <serve_interrupt+0xc6>
    msg_t b;
    osalSysLockFromISR();
  20461e:	f7ff ff5f 	bl	2044e0 <osalSysLockFromISR.lto_priv.7>
    b = oqGetI(&sdp->oqueue);
  204622:	9b01      	ldr	r3, [sp, #4]
  204624:	3330      	adds	r3, #48	; 0x30
  204626:	4618      	mov	r0, r3
  204628:	f7fe fb3a 	bl	202ca0 <oqGetI>
  20462c:	9002      	str	r0, [sp, #8]
    if (b < MSG_OK) {
  20462e:	9b02      	ldr	r3, [sp, #8]
  204630:	2b00      	cmp	r3, #0
  204632:	da0b      	bge.n	20464c <serve_interrupt+0xbc>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  204634:	9b01      	ldr	r3, [sp, #4]
  204636:	3304      	adds	r3, #4
  204638:	2108      	movs	r1, #8
  20463a:	4618      	mov	r0, r3
  20463c:	f7ff ff60 	bl	204500 <osalEventBroadcastFlagsI.lto_priv.3>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
  204640:	9b04      	ldr	r3, [sp, #16]
  204642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  204646:	9b05      	ldr	r3, [sp, #20]
  204648:	601a      	str	r2, [r3, #0]
  20464a:	e002      	b.n	204652 <serve_interrupt+0xc2>
    }
    else
      u->TDR = b;
  20464c:	9a02      	ldr	r2, [sp, #8]
  20464e:	9b05      	ldr	r3, [sp, #20]
  204650:	629a      	str	r2, [r3, #40]	; 0x28
    osalSysUnlockFromISR();
  204652:	f7ff ff4d 	bl	2044f0 <osalSysUnlockFromISR.lto_priv.5>
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
  204656:	9b04      	ldr	r3, [sp, #16]
  204658:	f003 0340 	and.w	r3, r3, #64	; 0x40
  20465c:	2b00      	cmp	r3, #0
  20465e:	d025      	beq.n	2046ac <serve_interrupt+0x11c>
  204660:	9b03      	ldr	r3, [sp, #12]
  204662:	f003 0340 	and.w	r3, r3, #64	; 0x40
  204666:	2b00      	cmp	r3, #0
  204668:	d020      	beq.n	2046ac <serve_interrupt+0x11c>
    osalSysLockFromISR();
  20466a:	f7ff ff39 	bl	2044e0 <osalSysLockFromISR.lto_priv.7>
    if (oqIsEmptyI(&sdp->oqueue)) {
  20466e:	9b01      	ldr	r3, [sp, #4]
  204670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  204672:	9b01      	ldr	r3, [sp, #4]
  204674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  204676:	429a      	cmp	r2, r3
  204678:	d105      	bne.n	204686 <serve_interrupt+0xf6>
  20467a:	9b01      	ldr	r3, [sp, #4]
  20467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  20467e:	2b00      	cmp	r3, #0
  204680:	d001      	beq.n	204686 <serve_interrupt+0xf6>
  204682:	2301      	movs	r3, #1
  204684:	e000      	b.n	204688 <serve_interrupt+0xf8>
  204686:	2300      	movs	r3, #0
  204688:	f003 0301 	and.w	r3, r3, #1
  20468c:	b2db      	uxtb	r3, r3
  20468e:	2b00      	cmp	r3, #0
  204690:	d00a      	beq.n	2046a8 <serve_interrupt+0x118>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
  204692:	9b01      	ldr	r3, [sp, #4]
  204694:	3304      	adds	r3, #4
  204696:	2110      	movs	r1, #16
  204698:	4618      	mov	r0, r3
  20469a:	f7ff ff31 	bl	204500 <osalEventBroadcastFlagsI.lto_priv.3>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
  20469e:	9b04      	ldr	r3, [sp, #16]
  2046a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
  2046a4:	9b05      	ldr	r3, [sp, #20]
  2046a6:	601a      	str	r2, [r3, #0]
    }
    osalSysUnlockFromISR();
  2046a8:	f7ff ff22 	bl	2044f0 <osalSysUnlockFromISR.lto_priv.5>
  }
}
  2046ac:	b007      	add	sp, #28
  2046ae:	f85d fb04 	ldr.w	pc, [sp], #4
  2046b2:	bf00      	nop
	...

002046c0 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {
  2046c0:	b082      	sub	sp, #8
  2046c2:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
  2046c4:	4b03      	ldr	r3, [pc, #12]	; (2046d4 <notify1+0x14>)
  2046c6:	681b      	ldr	r3, [r3, #0]
  2046c8:	4a02      	ldr	r2, [pc, #8]	; (2046d4 <notify1+0x14>)
  2046ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  2046ce:	6013      	str	r3, [r2, #0]
}
  2046d0:	b002      	add	sp, #8
  2046d2:	4770      	bx	lr
  2046d4:	40011000 	.word	0x40011000
	...

002046e0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
  2046e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  2046e2:	4808      	ldr	r0, [pc, #32]	; (204704 <VectorD4+0x24>)
  2046e4:	f7fc fa64 	bl	200bb0 <_trace_isr_enter>
  2046e8:	f7fc f92a 	bl	200940 <_dbg_check_enter_isr>

  serve_interrupt(&SD1);
  2046ec:	4806      	ldr	r0, [pc, #24]	; (204708 <VectorD4+0x28>)
  2046ee:	f7ff ff4f 	bl	204590 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
  2046f2:	f7fc f945 	bl	200980 <_dbg_check_leave_isr>
  2046f6:	4803      	ldr	r0, [pc, #12]	; (204704 <VectorD4+0x24>)
  2046f8:	f7fc fa82 	bl	200c00 <_trace_isr_leave>
  2046fc:	f7fd ffa8 	bl	202650 <_port_irq_epilogue>
}
  204700:	bd08      	pop	{r3, pc}
  204702:	bf00      	nop
  204704:	08004da4 	.word	0x08004da4
  204708:	200011d4 	.word	0x200011d4
  20470c:	00000000 	.word	0x00000000

00204710 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
  204710:	b500      	push	{lr}
  204712:	b083      	sub	sp, #12

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1);
  204714:	480f      	ldr	r0, [pc, #60]	; (204754 <sd_lld_init+0x44>)
  204716:	f7fe fee3 	bl	2034e0 <sdObjectInit>
  iqObjectInit(&SD1.iqueue, sd_in_buf1, sizeof sd_in_buf1, NULL, &SD1);
  20471a:	4b0e      	ldr	r3, [pc, #56]	; (204754 <sd_lld_init+0x44>)
  20471c:	9300      	str	r3, [sp, #0]
  20471e:	2300      	movs	r3, #0
  204720:	2210      	movs	r2, #16
  204722:	490d      	ldr	r1, [pc, #52]	; (204758 <sd_lld_init+0x48>)
  204724:	480d      	ldr	r0, [pc, #52]	; (20475c <sd_lld_init+0x4c>)
  204726:	f7fe f923 	bl	202970 <iqObjectInit>
  oqObjectInit(&SD1.oqueue, sd_out_buf1, sizeof sd_out_buf1, notify1, &SD1);
  20472a:	4b0a      	ldr	r3, [pc, #40]	; (204754 <sd_lld_init+0x44>)
  20472c:	9300      	str	r3, [sp, #0]
  20472e:	4b0c      	ldr	r3, [pc, #48]	; (204760 <sd_lld_init+0x50>)
  204730:	2210      	movs	r2, #16
  204732:	490c      	ldr	r1, [pc, #48]	; (204764 <sd_lld_init+0x54>)
  204734:	480c      	ldr	r0, [pc, #48]	; (204768 <sd_lld_init+0x58>)
  204736:	f7fe fa43 	bl	202bc0 <oqObjectInit>
  SD1.usart = USART1;
  20473a:	4b06      	ldr	r3, [pc, #24]	; (204754 <sd_lld_init+0x44>)
  20473c:	4a0b      	ldr	r2, [pc, #44]	; (20476c <sd_lld_init+0x5c>)
  20473e:	655a      	str	r2, [r3, #84]	; 0x54
  SD1.clock = STM32_USART1CLK;
  204740:	4b04      	ldr	r3, [pc, #16]	; (204754 <sd_lld_init+0x44>)
  204742:	4a0b      	ldr	r2, [pc, #44]	; (204770 <sd_lld_init+0x60>)
  204744:	659a      	str	r2, [r3, #88]	; 0x58
#if defined(STM32_USART1_NUMBER)
  nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
  204746:	210c      	movs	r1, #12
  204748:	2025      	movs	r0, #37	; 0x25
  20474a:	f7fe ff11 	bl	203570 <nvicEnableVector>
    STM32_SERIAL_USE_UART7  || STM32_SERIAL_USE_UART8
#if defined(STM32_USART3_8_HANDLER)
  nvicEnableVector(STM32_USART3_8_NUMBER, STM32_SERIAL_USART3_8_PRIORITY);
#endif
#endif
}
  20474e:	b003      	add	sp, #12
  204750:	f85d fb04 	ldr.w	pc, [sp], #4
  204754:	200011d4 	.word	0x200011d4
  204758:	20001234 	.word	0x20001234
  20475c:	200011e0 	.word	0x200011e0
  204760:	002046c1 	.word	0x002046c1
  204764:	20001244 	.word	0x20001244
  204768:	20001204 	.word	0x20001204
  20476c:	40011000 	.word	0x40011000
  204770:	066ff300 	.word	0x066ff300
	...

00204780 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  204780:	b508      	push	{r3, lr}

  stm32_clock_init();
  204782:	f7fe ff85 	bl	203690 <stm32_clock_init>
}
  204786:	bd08      	pop	{r3, pc}
	...

00204790 <boardInit>:
/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
}
  204790:	4770      	bx	lr
  204792:	bf00      	nop
	...

002047a0 <pwmpcb>:

/*===========================================================================*/
/* PWM driver related.                                                       */
/*===========================================================================*/

static void pwmpcb(PWMDriver *pwmp) {
  2047a0:	b082      	sub	sp, #8
  2047a2:	9001      	str	r0, [sp, #4]

  (void)pwmp;
}
  2047a4:	b002      	add	sp, #8
  2047a6:	4770      	bx	lr
	...

002047b0 <pwmc1cb>:

static void pwmc1cb(PWMDriver *pwmp) {
  2047b0:	b082      	sub	sp, #8
  2047b2:	9001      	str	r0, [sp, #4]

  (void)pwmp;
}
  2047b4:	b002      	add	sp, #8
  2047b6:	4770      	bx	lr
	...

002047c0 <icuwidthcb>:
/* ICU driver related.                                                       */
/*===========================================================================*/

icucnt_t last_width, last_period;

static void icuwidthcb(ICUDriver *icup) {
  2047c0:	b082      	sub	sp, #8
  2047c2:	9001      	str	r0, [sp, #4]

  palSetLine(LINE_ARD_D13);
  2047c4:	4b05      	ldr	r3, [pc, #20]	; (2047dc <icuwidthcb+0x1c>)
  2047c6:	2202      	movs	r2, #2
  2047c8:	831a      	strh	r2, [r3, #24]
  last_width = icuGetWidthX(icup);
  2047ca:	9b01      	ldr	r3, [sp, #4]
  2047cc:	691b      	ldr	r3, [r3, #16]
  2047ce:	681b      	ldr	r3, [r3, #0]
  2047d0:	3301      	adds	r3, #1
  2047d2:	4a03      	ldr	r2, [pc, #12]	; (2047e0 <icuwidthcb+0x20>)
  2047d4:	6013      	str	r3, [r2, #0]
}
  2047d6:	b002      	add	sp, #8
  2047d8:	4770      	bx	lr
  2047da:	bf00      	nop
  2047dc:	40022000 	.word	0x40022000
  2047e0:	20001254 	.word	0x20001254
	...

002047f0 <icuperiodcb>:

static void icuperiodcb(ICUDriver *icup) {
  2047f0:	b082      	sub	sp, #8
  2047f2:	9001      	str	r0, [sp, #4]

  palClearLine(LINE_ARD_D13);
  2047f4:	4b05      	ldr	r3, [pc, #20]	; (20480c <icuperiodcb+0x1c>)
  2047f6:	2202      	movs	r2, #2
  2047f8:	835a      	strh	r2, [r3, #26]
  last_period = icuGetPeriodX(icup);
  2047fa:	9b01      	ldr	r3, [sp, #4]
  2047fc:	695b      	ldr	r3, [r3, #20]
  2047fe:	681b      	ldr	r3, [r3, #0]
  204800:	3301      	adds	r3, #1
  204802:	4a03      	ldr	r2, [pc, #12]	; (204810 <icuperiodcb+0x20>)
  204804:	6013      	str	r3, [r2, #0]
}
  204806:	b002      	add	sp, #8
  204808:	4770      	bx	lr
  20480a:	bf00      	nop
  20480c:	40022000 	.word	0x40022000
  204810:	20001258 	.word	0x20001258
	...

00204820 <icuovfcb>:

static void icuovfcb(ICUDriver *icup) {
  204820:	b082      	sub	sp, #8
  204822:	9001      	str	r0, [sp, #4]

  (void)icup;
}
  204824:	b002      	add	sp, #8
  204826:	4770      	bx	lr
	...

00204830 <main>:
/*===========================================================================*/

/*
 * Application entry point.
 */
int main(void) {
  204830:	b508      	push	{r3, lr}
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
  204832:	f7fd ff4d 	bl	2026d0 <halInit>
  chSysInit();
  204836:	f7fb ff93 	bl	200760 <chSysInit>

  /*
   * Starting PWM driver 1 and enabling the notifications.
   * GPIOA8 is programmed as PWM output (channel 1 of TIM1).
   */
  pwmStart(&PWMD1, &pwmcfg);
  20483a:	493a      	ldr	r1, [pc, #232]	; (204924 <main+0xf4>)
  20483c:	483a      	ldr	r0, [pc, #232]	; (204928 <main+0xf8>)
  20483e:	f7fe fc2f 	bl	2030a0 <pwmStart>
  pwmEnablePeriodicNotification(&PWMD1);
  204842:	4839      	ldr	r0, [pc, #228]	; (204928 <main+0xf8>)
  204844:	f7fe fcfc 	bl	203240 <pwmEnablePeriodicNotification>
  palSetLineMode(PAL_LINE(GPIOA,8), PAL_MODE_ALTERNATE(1));
  204848:	2282      	movs	r2, #130	; 0x82
  20484a:	f44f 7180 	mov.w	r1, #256	; 0x100
  20484e:	4837      	ldr	r0, [pc, #220]	; (20492c <main+0xfc>)
  204850:	f7ff f856 	bl	203900 <_pal_lld_setgroupmode>

  /*
   * Starting ICU driver 2.
   * GPIOA15 is programmed as ICU input (channel 1 of TIM2).
   */
  icuStart(&ICUD2, &icucfg);
  204854:	4936      	ldr	r1, [pc, #216]	; (204930 <main+0x100>)
  204856:	4837      	ldr	r0, [pc, #220]	; (204934 <main+0x104>)
  204858:	f7fe fb4a 	bl	202ef0 <icuStart>
  palSetLineMode(LINE_ARD_D9, PAL_MODE_ALTERNATE(1));
  20485c:	2282      	movs	r2, #130	; 0x82
  20485e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  204862:	4832      	ldr	r0, [pc, #200]	; (20492c <main+0xfc>)
  204864:	f7ff f84c 	bl	203900 <_pal_lld_setgroupmode>

  /*
   * GPIOI1 is programmed as output (board LED).
   */
  palClearLine(LINE_ARD_D13);
  204868:	4b33      	ldr	r3, [pc, #204]	; (204938 <main+0x108>)
  20486a:	2202      	movs	r2, #2
  20486c:	835a      	strh	r2, [r3, #26]
  palSetLineMode(LINE_ARD_D13, PAL_MODE_OUTPUT_PUSHPULL);
  20486e:	2201      	movs	r2, #1
  204870:	2102      	movs	r1, #2
  204872:	4831      	ldr	r0, [pc, #196]	; (204938 <main+0x108>)
  204874:	f7ff f844 	bl	203900 <_pal_lld_setgroupmode>
  chThdSleepMilliseconds(1000);
  204878:	f242 7010 	movw	r0, #10000	; 0x2710
  20487c:	f7fd f8f0 	bl	201a60 <chThdSleep>

  /*
   * Starting ICU capture and enabling the notifications.
   */
  icuStartCapture(&ICUD2);
  204880:	482c      	ldr	r0, [pc, #176]	; (204934 <main+0x104>)
  204882:	f7fe fb65 	bl	202f50 <icuStartCapture>
  icuEnableNotifications(&ICUD2);
  204886:	482b      	ldr	r0, [pc, #172]	; (204934 <main+0x104>)
  204888:	f7fe fb82 	bl	202f90 <icuEnableNotifications>
   */
  while (true) {
    /*
     * Starts the PWM channel 0 using 75% duty cycle.
     */
    pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 7500));
  20488c:	4b26      	ldr	r3, [pc, #152]	; (204928 <main+0xf8>)
  20488e:	689b      	ldr	r3, [r3, #8]
  204890:	f641 524c 	movw	r2, #7500	; 0x1d4c
  204894:	fb02 f303 	mul.w	r3, r2, r3
  204898:	4a28      	ldr	r2, [pc, #160]	; (20493c <main+0x10c>)
  20489a:	fba2 2303 	umull	r2, r3, r2, r3
  20489e:	0b5b      	lsrs	r3, r3, #13
  2048a0:	461a      	mov	r2, r3
  2048a2:	2100      	movs	r1, #0
  2048a4:	4820      	ldr	r0, [pc, #128]	; (204928 <main+0xf8>)
  2048a6:	f7fe fc5b 	bl	203160 <pwmEnableChannel>
    pwmEnableChannelNotification(&PWMD1, 0);
  2048aa:	2100      	movs	r1, #0
  2048ac:	481e      	ldr	r0, [pc, #120]	; (204928 <main+0xf8>)
  2048ae:	f7fe fcef 	bl	203290 <pwmEnableChannelNotification>
    chThdSleepMilliseconds(5000);
  2048b2:	f24c 3050 	movw	r0, #50000	; 0xc350
  2048b6:	f7fd f8d3 	bl	201a60 <chThdSleep>

    /*
     * Changes the PWM channel 0 to 50% duty cycle.
     */
    pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 5000));
  2048ba:	4b1b      	ldr	r3, [pc, #108]	; (204928 <main+0xf8>)
  2048bc:	689b      	ldr	r3, [r3, #8]
  2048be:	f241 3288 	movw	r2, #5000	; 0x1388
  2048c2:	fb02 f303 	mul.w	r3, r2, r3
  2048c6:	4a1d      	ldr	r2, [pc, #116]	; (20493c <main+0x10c>)
  2048c8:	fba2 2303 	umull	r2, r3, r2, r3
  2048cc:	0b5b      	lsrs	r3, r3, #13
  2048ce:	461a      	mov	r2, r3
  2048d0:	2100      	movs	r1, #0
  2048d2:	4815      	ldr	r0, [pc, #84]	; (204928 <main+0xf8>)
  2048d4:	f7fe fc44 	bl	203160 <pwmEnableChannel>
    chThdSleepMilliseconds(5000);
  2048d8:	f24c 3050 	movw	r0, #50000	; 0xc350
  2048dc:	f7fd f8c0 	bl	201a60 <chThdSleep>

    /*
     * Changes the PWM channel 0 to 25% duty cycle.
     */
    pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 2500));
  2048e0:	4b11      	ldr	r3, [pc, #68]	; (204928 <main+0xf8>)
  2048e2:	689b      	ldr	r3, [r3, #8]
  2048e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
  2048e8:	fb02 f303 	mul.w	r3, r2, r3
  2048ec:	4a13      	ldr	r2, [pc, #76]	; (20493c <main+0x10c>)
  2048ee:	fba2 2303 	umull	r2, r3, r2, r3
  2048f2:	0b5b      	lsrs	r3, r3, #13
  2048f4:	461a      	mov	r2, r3
  2048f6:	2100      	movs	r1, #0
  2048f8:	480b      	ldr	r0, [pc, #44]	; (204928 <main+0xf8>)
  2048fa:	f7fe fc31 	bl	203160 <pwmEnableChannel>
    chThdSleepMilliseconds(5000);
  2048fe:	f24c 3050 	movw	r0, #50000	; 0xc350
  204902:	f7fd f8ad 	bl	201a60 <chThdSleep>

    /*
     * Changes PWM period to half second the duty cycle becomes 50%
     * implicitly.
     */
    pwmChangePeriod(&PWMD1, 5000);
  204906:	f241 3188 	movw	r1, #5000	; 0x1388
  20490a:	4807      	ldr	r0, [pc, #28]	; (204928 <main+0xf8>)
  20490c:	f7fe fc00 	bl	203110 <pwmChangePeriod>
    chThdSleepMilliseconds(5000);
  204910:	f24c 3050 	movw	r0, #50000	; 0xc350
  204914:	f7fd f8a4 	bl	201a60 <chThdSleep>

    /*
     * Disables channel 0.
     */
    pwmDisableChannel(&PWMD1, 0);
  204918:	2100      	movs	r1, #0
  20491a:	4803      	ldr	r0, [pc, #12]	; (204928 <main+0xf8>)
  20491c:	f7fe fc58 	bl	2031d0 <pwmDisableChannel>
  204920:	e7b4      	b.n	20488c <main+0x5c>
  204922:	bf00      	nop
  204924:	20010000 	.word	0x20010000
  204928:	2000119c 	.word	0x2000119c
  20492c:	40020000 	.word	0x40020000
  204930:	20010044 	.word	0x20010044
  204934:	20001184 	.word	0x20001184
  204938:	40022000 	.word	0x40022000
  20493c:	d1b71759 	.word	0xd1b71759
